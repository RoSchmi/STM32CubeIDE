
STM32F439_UART_VCP_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d10  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08007ebc  08007ebc  00017ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f74  08007f74  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007f74  08007f74  00017f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f7c  08007f7c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f7c  08007f7c  00017f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f80  08007f80  00017f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007f84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d1c  200001e0  08008164  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000efc  08008164  00020efc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000171da  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003567  00000000  00000000  000373ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f10  00000000  00000000  0003a958  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d68  00000000  00000000  0003b868  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002772d  00000000  00000000  0003c5d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010254  00000000  00000000  00063cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dd561  00000000  00000000  00073f51  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001514b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d80  00000000  00000000  00151530  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200001e0 	.word	0x200001e0
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007ea4 	.word	0x08007ea4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200001e4 	.word	0x200001e4
 80001e8:	08007ea4 	.word	0x08007ea4

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b972 	b.w	80004f8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	4688      	mov	r8, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14b      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023a:	428a      	cmp	r2, r1
 800023c:	4615      	mov	r5, r2
 800023e:	d967      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0720 	rsb	r7, r2, #32
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	fa20 f707 	lsr.w	r7, r0, r7
 8000252:	4095      	lsls	r5, r2
 8000254:	ea47 0803 	orr.w	r8, r7, r3
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbb8 f7fe 	udiv	r7, r8, lr
 8000264:	fa1f fc85 	uxth.w	ip, r5
 8000268:	fb0e 8817 	mls	r8, lr, r7, r8
 800026c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000270:	fb07 f10c 	mul.w	r1, r7, ip
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18eb      	adds	r3, r5, r3
 800027a:	f107 30ff 	add.w	r0, r7, #4294967295
 800027e:	f080 811b 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8118 	bls.w	80004b8 <__udivmoddi4+0x28c>
 8000288:	3f02      	subs	r7, #2
 800028a:	442b      	add	r3, r5
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0fe 	udiv	r0, r3, lr
 8000294:	fb0e 3310 	mls	r3, lr, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a0:	45a4      	cmp	ip, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	192c      	adds	r4, r5, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8107 	bcs.w	80004bc <__udivmoddi4+0x290>
 80002ae:	45a4      	cmp	ip, r4
 80002b0:	f240 8104 	bls.w	80004bc <__udivmoddi4+0x290>
 80002b4:	3802      	subs	r0, #2
 80002b6:	442c      	add	r4, r5
 80002b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002bc:	eba4 040c 	sub.w	r4, r4, ip
 80002c0:	2700      	movs	r7, #0
 80002c2:	b11e      	cbz	r6, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c6 4300 	strd	r4, r3, [r6]
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0xbe>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80eb 	beq.w	80004b2 <__udivmoddi4+0x286>
 80002dc:	2700      	movs	r7, #0
 80002de:	e9c6 0100 	strd	r0, r1, [r6]
 80002e2:	4638      	mov	r0, r7
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f783 	clz	r7, r3
 80002ee:	2f00      	cmp	r7, #0
 80002f0:	d147      	bne.n	8000382 <__udivmoddi4+0x156>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd0>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2c4>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4698      	mov	r8, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0e0      	beq.n	80002cc <__udivmoddi4+0xa0>
 800030a:	e9c6 4800 	strd	r4, r8, [r6]
 800030e:	e7dd      	b.n	80002cc <__udivmoddi4+0xa0>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xe8>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 808f 	bne.w	800043c <__udivmoddi4+0x210>
 800031e:	1b49      	subs	r1, r1, r5
 8000320:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000324:	fa1f f885 	uxth.w	r8, r5
 8000328:	2701      	movs	r7, #1
 800032a:	fbb1 fcfe 	udiv	ip, r1, lr
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	fb0e 111c 	mls	r1, lr, ip, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb08 f10c 	mul.w	r1, r8, ip
 800033c:	4299      	cmp	r1, r3
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x124>
 8000340:	18eb      	adds	r3, r5, r3
 8000342:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4299      	cmp	r1, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 800034e:	4684      	mov	ip, r0
 8000350:	1a59      	subs	r1, r3, r1
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fb0e 1410 	mls	r4, lr, r0, r1
 800035c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000360:	fb08 f800 	mul.w	r8, r8, r0
 8000364:	45a0      	cmp	r8, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x14c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x14a>
 8000370:	45a0      	cmp	r8, r4
 8000372:	f200 80b6 	bhi.w	80004e2 <__udivmoddi4+0x2b6>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 0408 	sub.w	r4, r4, r8
 800037c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000380:	e79f      	b.n	80002c2 <__udivmoddi4+0x96>
 8000382:	f1c7 0c20 	rsb	ip, r7, #32
 8000386:	40bb      	lsls	r3, r7
 8000388:	fa22 fe0c 	lsr.w	lr, r2, ip
 800038c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000390:	fa01 f407 	lsl.w	r4, r1, r7
 8000394:	fa20 f50c 	lsr.w	r5, r0, ip
 8000398:	fa21 f30c 	lsr.w	r3, r1, ip
 800039c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a0:	4325      	orrs	r5, r4
 80003a2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a6:	0c2c      	lsrs	r4, r5, #16
 80003a8:	fb08 3319 	mls	r3, r8, r9, r3
 80003ac:	fa1f fa8e 	uxth.w	sl, lr
 80003b0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b4:	fb09 f40a 	mul.w	r4, r9, sl
 80003b8:	429c      	cmp	r4, r3
 80003ba:	fa02 f207 	lsl.w	r2, r2, r7
 80003be:	fa00 f107 	lsl.w	r1, r0, r7
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1e 0303 	adds.w	r3, lr, r3
 80003c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003cc:	f080 8087 	bcs.w	80004de <__udivmoddi4+0x2b2>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f240 8084 	bls.w	80004de <__udivmoddi4+0x2b2>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4473      	add	r3, lr
 80003dc:	1b1b      	subs	r3, r3, r4
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3310 	mls	r3, r8, r0, r3
 80003e8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003ec:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f0:	45a2      	cmp	sl, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1e 0404 	adds.w	r4, lr, r4
 80003f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fc:	d26b      	bcs.n	80004d6 <__udivmoddi4+0x2aa>
 80003fe:	45a2      	cmp	sl, r4
 8000400:	d969      	bls.n	80004d6 <__udivmoddi4+0x2aa>
 8000402:	3802      	subs	r0, #2
 8000404:	4474      	add	r4, lr
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	fba0 8902 	umull	r8, r9, r0, r2
 800040e:	eba4 040a 	sub.w	r4, r4, sl
 8000412:	454c      	cmp	r4, r9
 8000414:	46c2      	mov	sl, r8
 8000416:	464b      	mov	r3, r9
 8000418:	d354      	bcc.n	80004c4 <__udivmoddi4+0x298>
 800041a:	d051      	beq.n	80004c0 <__udivmoddi4+0x294>
 800041c:	2e00      	cmp	r6, #0
 800041e:	d069      	beq.n	80004f4 <__udivmoddi4+0x2c8>
 8000420:	ebb1 050a 	subs.w	r5, r1, sl
 8000424:	eb64 0403 	sbc.w	r4, r4, r3
 8000428:	fa04 fc0c 	lsl.w	ip, r4, ip
 800042c:	40fd      	lsrs	r5, r7
 800042e:	40fc      	lsrs	r4, r7
 8000430:	ea4c 0505 	orr.w	r5, ip, r5
 8000434:	e9c6 5400 	strd	r5, r4, [r6]
 8000438:	2700      	movs	r7, #0
 800043a:	e747      	b.n	80002cc <__udivmoddi4+0xa0>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f703 	lsr.w	r7, r0, r3
 8000444:	4095      	lsls	r5, r2
 8000446:	fa01 f002 	lsl.w	r0, r1, r2
 800044a:	fa21 f303 	lsr.w	r3, r1, r3
 800044e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000452:	4338      	orrs	r0, r7
 8000454:	0c01      	lsrs	r1, r0, #16
 8000456:	fbb3 f7fe 	udiv	r7, r3, lr
 800045a:	fa1f f885 	uxth.w	r8, r5
 800045e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb07 f308 	mul.w	r3, r7, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x256>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f107 3cff 	add.w	ip, r7, #4294967295
 8000478:	d22f      	bcs.n	80004da <__udivmoddi4+0x2ae>
 800047a:	428b      	cmp	r3, r1
 800047c:	d92d      	bls.n	80004da <__udivmoddi4+0x2ae>
 800047e:	3f02      	subs	r7, #2
 8000480:	4429      	add	r1, r5
 8000482:	1acb      	subs	r3, r1, r3
 8000484:	b281      	uxth	r1, r0
 8000486:	fbb3 f0fe 	udiv	r0, r3, lr
 800048a:	fb0e 3310 	mls	r3, lr, r0, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb00 f308 	mul.w	r3, r0, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x27e>
 800049a:	1869      	adds	r1, r5, r1
 800049c:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a0:	d217      	bcs.n	80004d2 <__udivmoddi4+0x2a6>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d915      	bls.n	80004d2 <__udivmoddi4+0x2a6>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4429      	add	r1, r5
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b0:	e73b      	b.n	800032a <__udivmoddi4+0xfe>
 80004b2:	4637      	mov	r7, r6
 80004b4:	4630      	mov	r0, r6
 80004b6:	e709      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b8:	4607      	mov	r7, r0
 80004ba:	e6e7      	b.n	800028c <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fb      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004c0:	4541      	cmp	r1, r8
 80004c2:	d2ab      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c8:	eb69 020e 	sbc.w	r2, r9, lr
 80004cc:	3801      	subs	r0, #1
 80004ce:	4613      	mov	r3, r2
 80004d0:	e7a4      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d2:	4660      	mov	r0, ip
 80004d4:	e7e9      	b.n	80004aa <__udivmoddi4+0x27e>
 80004d6:	4618      	mov	r0, r3
 80004d8:	e795      	b.n	8000406 <__udivmoddi4+0x1da>
 80004da:	4667      	mov	r7, ip
 80004dc:	e7d1      	b.n	8000482 <__udivmoddi4+0x256>
 80004de:	4681      	mov	r9, r0
 80004e0:	e77c      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e2:	3802      	subs	r0, #2
 80004e4:	442c      	add	r4, r5
 80004e6:	e747      	b.n	8000378 <__udivmoddi4+0x14c>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	442b      	add	r3, r5
 80004ee:	e72f      	b.n	8000350 <__udivmoddi4+0x124>
 80004f0:	4638      	mov	r0, r7
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xda>
 80004f4:	4637      	mov	r7, r6
 80004f6:	e6e9      	b.n	80002cc <__udivmoddi4+0xa0>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <HAL_Init+0x40>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a0d      	ldr	r2, [pc, #52]	; (800053c <HAL_Init+0x40>)
 8000506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800050c:	4b0b      	ldr	r3, [pc, #44]	; (800053c <HAL_Init+0x40>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a0a      	ldr	r2, [pc, #40]	; (800053c <HAL_Init+0x40>)
 8000512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <HAL_Init+0x40>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a07      	ldr	r2, [pc, #28]	; (800053c <HAL_Init+0x40>)
 800051e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000524:	2003      	movs	r0, #3
 8000526:	f000 f94d 	bl	80007c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800052a:	2000      	movs	r0, #0
 800052c:	f000 f808 	bl	8000540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000530:	f006 fcae 	bl	8006e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000534:	2300      	movs	r3, #0
}
 8000536:	4618      	mov	r0, r3
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40023c00 	.word	0x40023c00

08000540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_InitTick+0x54>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <HAL_InitTick+0x58>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	4619      	mov	r1, r3
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f1 	udiv	r3, r3, r1
 800055a:	fbb2 f3f3 	udiv	r3, r2, r3
 800055e:	4618      	mov	r0, r3
 8000560:	f000 f965 	bl	800082e <HAL_SYSTICK_Config>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	e00e      	b.n	800058c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b0f      	cmp	r3, #15
 8000572:	d80a      	bhi.n	800058a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000574:	2200      	movs	r2, #0
 8000576:	6879      	ldr	r1, [r7, #4]
 8000578:	f04f 30ff 	mov.w	r0, #4294967295
 800057c:	f000 f92d 	bl	80007da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <HAL_InitTick+0x5c>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	e000      	b.n	800058c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800058a:	2301      	movs	r3, #1
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000118 	.word	0x20000118
 8000598:	20000004 	.word	0x20000004
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_IncTick+0x20>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	461a      	mov	r2, r3
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_IncTick+0x24>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4413      	add	r3, r2
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <HAL_IncTick+0x24>)
 80005b2:	6013      	str	r3, [r2, #0]
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000004 	.word	0x20000004
 80005c4:	200004a8 	.word	0x200004a8

080005c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  return uwTick;
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <HAL_GetTick+0x14>)
 80005ce:	681b      	ldr	r3, [r3, #0]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	200004a8 	.word	0x200004a8

080005e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005e8:	f7ff ffee 	bl	80005c8 <HAL_GetTick>
 80005ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f8:	d005      	beq.n	8000606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <HAL_Delay+0x40>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	461a      	mov	r2, r3
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4413      	add	r3, r2
 8000604:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000606:	bf00      	nop
 8000608:	f7ff ffde 	bl	80005c8 <HAL_GetTick>
 800060c:	4602      	mov	r2, r0
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	68fa      	ldr	r2, [r7, #12]
 8000614:	429a      	cmp	r2, r3
 8000616:	d8f7      	bhi.n	8000608 <HAL_Delay+0x28>
  {
  }
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000004 	.word	0x20000004

08000624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f003 0307 	and.w	r3, r3, #7
 8000632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <__NVIC_SetPriorityGrouping+0x44>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000640:	4013      	ands	r3, r2
 8000642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800064c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000656:	4a04      	ldr	r2, [pc, #16]	; (8000668 <__NVIC_SetPriorityGrouping+0x44>)
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	60d3      	str	r3, [r2, #12]
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <__NVIC_GetPriorityGrouping+0x18>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	0a1b      	lsrs	r3, r3, #8
 8000676:	f003 0307 	and.w	r3, r3, #7
}
 800067a:	4618      	mov	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000696:	2b00      	cmp	r3, #0
 8000698:	db0b      	blt.n	80006b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	f003 021f 	and.w	r2, r3, #31
 80006a0:	4907      	ldr	r1, [pc, #28]	; (80006c0 <__NVIC_EnableIRQ+0x38>)
 80006a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a6:	095b      	lsrs	r3, r3, #5
 80006a8:	2001      	movs	r0, #1
 80006aa:	fa00 f202 	lsl.w	r2, r0, r2
 80006ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000e100 	.word	0xe000e100

080006c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	6039      	str	r1, [r7, #0]
 80006ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	db0a      	blt.n	80006ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	490c      	ldr	r1, [pc, #48]	; (8000710 <__NVIC_SetPriority+0x4c>)
 80006de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e2:	0112      	lsls	r2, r2, #4
 80006e4:	b2d2      	uxtb	r2, r2
 80006e6:	440b      	add	r3, r1
 80006e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006ec:	e00a      	b.n	8000704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4908      	ldr	r1, [pc, #32]	; (8000714 <__NVIC_SetPriority+0x50>)
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	f003 030f 	and.w	r3, r3, #15
 80006fa:	3b04      	subs	r3, #4
 80006fc:	0112      	lsls	r2, r2, #4
 80006fe:	b2d2      	uxtb	r2, r2
 8000700:	440b      	add	r3, r1
 8000702:	761a      	strb	r2, [r3, #24]
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	e000e100 	.word	0xe000e100
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000718:	b480      	push	{r7}
 800071a:	b089      	sub	sp, #36	; 0x24
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	f1c3 0307 	rsb	r3, r3, #7
 8000732:	2b04      	cmp	r3, #4
 8000734:	bf28      	it	cs
 8000736:	2304      	movcs	r3, #4
 8000738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	3304      	adds	r3, #4
 800073e:	2b06      	cmp	r3, #6
 8000740:	d902      	bls.n	8000748 <NVIC_EncodePriority+0x30>
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	3b03      	subs	r3, #3
 8000746:	e000      	b.n	800074a <NVIC_EncodePriority+0x32>
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800074c:	f04f 32ff 	mov.w	r2, #4294967295
 8000750:	69bb      	ldr	r3, [r7, #24]
 8000752:	fa02 f303 	lsl.w	r3, r2, r3
 8000756:	43da      	mvns	r2, r3
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	401a      	ands	r2, r3
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000760:	f04f 31ff 	mov.w	r1, #4294967295
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	fa01 f303 	lsl.w	r3, r1, r3
 800076a:	43d9      	mvns	r1, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000770:	4313      	orrs	r3, r2
         );
}
 8000772:	4618      	mov	r0, r3
 8000774:	3724      	adds	r7, #36	; 0x24
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
	...

08000780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3b01      	subs	r3, #1
 800078c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000790:	d301      	bcc.n	8000796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000792:	2301      	movs	r3, #1
 8000794:	e00f      	b.n	80007b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000796:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <SysTick_Config+0x40>)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3b01      	subs	r3, #1
 800079c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800079e:	210f      	movs	r1, #15
 80007a0:	f04f 30ff 	mov.w	r0, #4294967295
 80007a4:	f7ff ff8e 	bl	80006c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <SysTick_Config+0x40>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ae:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <SysTick_Config+0x40>)
 80007b0:	2207      	movs	r2, #7
 80007b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007b4:	2300      	movs	r3, #0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	e000e010 	.word	0xe000e010

080007c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff ff29 	bl	8000624 <__NVIC_SetPriorityGrouping>
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007da:	b580      	push	{r7, lr}
 80007dc:	b086      	sub	sp, #24
 80007de:	af00      	add	r7, sp, #0
 80007e0:	4603      	mov	r3, r0
 80007e2:	60b9      	str	r1, [r7, #8]
 80007e4:	607a      	str	r2, [r7, #4]
 80007e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007ec:	f7ff ff3e 	bl	800066c <__NVIC_GetPriorityGrouping>
 80007f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	68b9      	ldr	r1, [r7, #8]
 80007f6:	6978      	ldr	r0, [r7, #20]
 80007f8:	f7ff ff8e 	bl	8000718 <NVIC_EncodePriority>
 80007fc:	4602      	mov	r2, r0
 80007fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000802:	4611      	mov	r1, r2
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff5d 	bl	80006c4 <__NVIC_SetPriority>
}
 800080a:	bf00      	nop
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b082      	sub	sp, #8
 8000816:	af00      	add	r7, sp, #0
 8000818:	4603      	mov	r3, r0
 800081a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800081c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ff31 	bl	8000688 <__NVIC_EnableIRQ>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f7ff ffa2 	bl	8000780 <SysTick_Config>
 800083c:	4603      	mov	r3, r0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000846:	b480      	push	{r7}
 8000848:	b083      	sub	sp, #12
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000854:	b2db      	uxtb	r3, r3
 8000856:	2b02      	cmp	r3, #2
 8000858:	d004      	beq.n	8000864 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2280      	movs	r2, #128	; 0x80
 800085e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000860:	2301      	movs	r3, #1
 8000862:	e00c      	b.n	800087e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2205      	movs	r2, #5
 8000868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f022 0201 	bic.w	r2, r2, #1
 800087a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
	...

0800088c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800089c:	4baa      	ldr	r3, [pc, #680]	; (8000b48 <HAL_ETH_Init+0x2bc>)
 800089e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80008a4:	2300      	movs	r3, #0
 80008a6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d101      	bne.n	80008b2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e185      	b.n	8000bbe <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d106      	bne.n	80008cc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2200      	movs	r2, #0
 80008c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f005 ffea 	bl	80068a0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	4b9e      	ldr	r3, [pc, #632]	; (8000b4c <HAL_ETH_Init+0x2c0>)
 80008d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d4:	4a9d      	ldr	r2, [pc, #628]	; (8000b4c <HAL_ETH_Init+0x2c0>)
 80008d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008da:	6453      	str	r3, [r2, #68]	; 0x44
 80008dc:	4b9b      	ldr	r3, [pc, #620]	; (8000b4c <HAL_ETH_Init+0x2c0>)
 80008de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80008e8:	4b99      	ldr	r3, [pc, #612]	; (8000b50 <HAL_ETH_Init+0x2c4>)
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	4a98      	ldr	r2, [pc, #608]	; (8000b50 <HAL_ETH_Init+0x2c4>)
 80008ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80008f2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80008f4:	4b96      	ldr	r3, [pc, #600]	; (8000b50 <HAL_ETH_Init+0x2c4>)
 80008f6:	685a      	ldr	r2, [r3, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6a1b      	ldr	r3, [r3, #32]
 80008fc:	4994      	ldr	r1, [pc, #592]	; (8000b50 <HAL_ETH_Init+0x2c4>)
 80008fe:	4313      	orrs	r3, r2
 8000900:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f042 0201 	orr.w	r2, r2, #1
 8000914:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000918:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800091a:	f7ff fe55 	bl	80005c8 <HAL_GetTick>
 800091e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000920:	e011      	b.n	8000946 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000922:	f7ff fe51 	bl	80005c8 <HAL_GetTick>
 8000926:	4602      	mov	r2, r0
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000930:	d909      	bls.n	8000946 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2203      	movs	r2, #3
 8000936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2200      	movs	r2, #0
 800093e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000942:	2303      	movs	r3, #3
 8000944:	e13b      	b.n	8000bbe <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f003 0301 	and.w	r3, r3, #1
 8000954:	2b00      	cmp	r3, #0
 8000956:	d1e4      	bne.n	8000922 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	691b      	ldr	r3, [r3, #16]
 800095e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	f023 031c 	bic.w	r3, r3, #28
 8000966:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000968:	f002 fb62 	bl	8003030 <HAL_RCC_GetHCLKFreq>
 800096c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	4a78      	ldr	r2, [pc, #480]	; (8000b54 <HAL_ETH_Init+0x2c8>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d908      	bls.n	8000988 <HAL_ETH_Init+0xfc>
 8000976:	69bb      	ldr	r3, [r7, #24]
 8000978:	4a77      	ldr	r2, [pc, #476]	; (8000b58 <HAL_ETH_Init+0x2cc>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d804      	bhi.n	8000988 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	f043 0308 	orr.w	r3, r3, #8
 8000984:	61fb      	str	r3, [r7, #28]
 8000986:	e027      	b.n	80009d8 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	4a73      	ldr	r2, [pc, #460]	; (8000b58 <HAL_ETH_Init+0x2cc>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d908      	bls.n	80009a2 <HAL_ETH_Init+0x116>
 8000990:	69bb      	ldr	r3, [r7, #24]
 8000992:	4a72      	ldr	r2, [pc, #456]	; (8000b5c <HAL_ETH_Init+0x2d0>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d804      	bhi.n	80009a2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	f043 030c 	orr.w	r3, r3, #12
 800099e:	61fb      	str	r3, [r7, #28]
 80009a0:	e01a      	b.n	80009d8 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80009a2:	69bb      	ldr	r3, [r7, #24]
 80009a4:	4a6d      	ldr	r2, [pc, #436]	; (8000b5c <HAL_ETH_Init+0x2d0>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d903      	bls.n	80009b2 <HAL_ETH_Init+0x126>
 80009aa:	69bb      	ldr	r3, [r7, #24]
 80009ac:	4a6c      	ldr	r2, [pc, #432]	; (8000b60 <HAL_ETH_Init+0x2d4>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d911      	bls.n	80009d6 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	4a6a      	ldr	r2, [pc, #424]	; (8000b60 <HAL_ETH_Init+0x2d4>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d908      	bls.n	80009cc <HAL_ETH_Init+0x140>
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	4a69      	ldr	r2, [pc, #420]	; (8000b64 <HAL_ETH_Init+0x2d8>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d804      	bhi.n	80009cc <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	f043 0304 	orr.w	r3, r3, #4
 80009c8:	61fb      	str	r3, [r7, #28]
 80009ca:	e005      	b.n	80009d8 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	f043 0310 	orr.w	r3, r3, #16
 80009d2:	61fb      	str	r3, [r7, #28]
 80009d4:	e000      	b.n	80009d8 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80009d6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	69fa      	ldr	r2, [r7, #28]
 80009de:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80009e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009e4:	2100      	movs	r1, #0
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f000 f956 	bl	8000c98 <HAL_ETH_WritePHYRegister>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d00b      	beq.n	8000a0a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80009f6:	6939      	ldr	r1, [r7, #16]
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f000 f9b3 	bl	8000d64 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2201      	movs	r2, #1
 8000a02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	e0d9      	b.n	8000bbe <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000a0a:	20ff      	movs	r0, #255	; 0xff
 8000a0c:	f7ff fde8 	bl	80005e0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	f000 80a7 	beq.w	8000b68 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000a1a:	f7ff fdd5 	bl	80005c8 <HAL_GetTick>
 8000a1e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	461a      	mov	r2, r3
 8000a26:	2101      	movs	r1, #1
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f000 f8cd 	bl	8000bc8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000a2e:	f7ff fdcb 	bl	80005c8 <HAL_GetTick>
 8000a32:	4602      	mov	r2, r0
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d90f      	bls.n	8000a60 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000a40:	2301      	movs	r3, #1
 8000a42:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000a44:	6939      	ldr	r1, [r7, #16]
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f000 f98c 	bl	8000d64 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2201      	movs	r2, #1
 8000a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2200      	movs	r2, #0
 8000a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	e0ae      	b.n	8000bbe <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f003 0304 	and.w	r3, r3, #4
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d0da      	beq.n	8000a20 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000a6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a6e:	2100      	movs	r1, #0
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f000 f911 	bl	8000c98 <HAL_ETH_WritePHYRegister>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d00b      	beq.n	8000a94 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000a80:	6939      	ldr	r1, [r7, #16]
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f000 f96e 	bl	8000d64 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000a90:	2301      	movs	r3, #1
 8000a92:	e094      	b.n	8000bbe <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000a94:	f7ff fd98 	bl	80005c8 <HAL_GetTick>
 8000a98:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f000 f890 	bl	8000bc8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000aa8:	f7ff fd8e 	bl	80005c8 <HAL_GetTick>
 8000aac:	4602      	mov	r2, r0
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d90f      	bls.n	8000ada <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000abe:	6939      	ldr	r1, [r7, #16]
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f000 f94f 	bl	8000d64 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2201      	movs	r2, #1
 8000aca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	e071      	b.n	8000bbe <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	f003 0320 	and.w	r3, r3, #32
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d0da      	beq.n	8000a9a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	461a      	mov	r2, r3
 8000aea:	211f      	movs	r1, #31
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f000 f86b 	bl	8000bc8 <HAL_ETH_ReadPHYRegister>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d00b      	beq.n	8000b10 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000af8:	2301      	movs	r3, #1
 8000afa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000afc:	6939      	ldr	r1, [r7, #16]
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f000 f930 	bl	8000d64 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2201      	movs	r2, #1
 8000b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	e056      	b.n	8000bbe <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f003 0310 	and.w	r3, r3, #16
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d004      	beq.n	8000b24 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	e002      	b.n	8000b2a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f003 0304 	and.w	r3, r3, #4
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	e037      	b.n	8000bac <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	e032      	b.n	8000bac <HAL_ETH_Init+0x320>
 8000b46:	bf00      	nop
 8000b48:	03938700 	.word	0x03938700
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40013800 	.word	0x40013800
 8000b54:	01312cff 	.word	0x01312cff
 8000b58:	02160ebf 	.word	0x02160ebf
 8000b5c:	039386ff 	.word	0x039386ff
 8000b60:	05f5e0ff 	.word	0x05f5e0ff
 8000b64:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	08db      	lsrs	r3, r3, #3
 8000b6e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	085b      	lsrs	r3, r3, #1
 8000b76:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	2100      	movs	r1, #0
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f000 f889 	bl	8000c98 <HAL_ETH_WritePHYRegister>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d00b      	beq.n	8000ba4 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000b90:	6939      	ldr	r1, [r7, #16]
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f000 f8e6 	bl	8000d64 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	e00c      	b.n	8000bbe <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000ba4:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000ba8:	f7ff fd1a 	bl	80005e0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000bac:	6939      	ldr	r1, [r7, #16]
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f000 f8d8 	bl	8000d64 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3720      	adds	r7, #32
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop

08000bc8 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	607a      	str	r2, [r7, #4]
 8000bd4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	2b82      	cmp	r3, #130	; 0x82
 8000be8:	d101      	bne.n	8000bee <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8000bea:	2302      	movs	r3, #2
 8000bec:	e050      	b.n	8000c90 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	2282      	movs	r2, #130	; 0x82
 8000bf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	691b      	ldr	r3, [r3, #16]
 8000bfc:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	f003 031c 	and.w	r3, r3, #28
 8000c04:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	8a1b      	ldrh	r3, [r3, #16]
 8000c0a:	02db      	lsls	r3, r3, #11
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	697a      	ldr	r2, [r7, #20]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000c14:	897b      	ldrh	r3, [r7, #10]
 8000c16:	019b      	lsls	r3, r3, #6
 8000c18:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000c1c:	697a      	ldr	r2, [r7, #20]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	f023 0302 	bic.w	r3, r3, #2
 8000c28:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	697a      	ldr	r2, [r7, #20]
 8000c38:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000c3a:	f7ff fcc5 	bl	80005c8 <HAL_GetTick>
 8000c3e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000c40:	e015      	b.n	8000c6e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000c42:	f7ff fcc1 	bl	80005c8 <HAL_GetTick>
 8000c46:	4602      	mov	r2, r0
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c50:	d309      	bcc.n	8000c66 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	2201      	movs	r2, #1
 8000c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8000c62:	2303      	movs	r3, #3
 8000c64:	e014      	b.n	8000c90 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	691b      	ldr	r3, [r3, #16]
 8000c6c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d1e4      	bne.n	8000c42 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	461a      	mov	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	2201      	movs	r2, #1
 8000c8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	607a      	str	r2, [r7, #4]
 8000ca4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b42      	cmp	r3, #66	; 0x42
 8000cb8:	d101      	bne.n	8000cbe <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	e04e      	b.n	8000d5c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	2242      	movs	r2, #66	; 0x42
 8000cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	691b      	ldr	r3, [r3, #16]
 8000ccc:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	f003 031c 	and.w	r3, r3, #28
 8000cd4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	8a1b      	ldrh	r3, [r3, #16]
 8000cda:	02db      	lsls	r3, r3, #11
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	697a      	ldr	r2, [r7, #20]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000ce4:	897b      	ldrh	r3, [r7, #10]
 8000ce6:	019b      	lsls	r3, r3, #6
 8000ce8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000d14:	f7ff fc58 	bl	80005c8 <HAL_GetTick>
 8000d18:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000d1a:	e015      	b.n	8000d48 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000d1c:	f7ff fc54 	bl	80005c8 <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d2a:	d309      	bcc.n	8000d40 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2200      	movs	r2, #0
 8000d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	e00d      	b.n	8000d5c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	691b      	ldr	r3, [r3, #16]
 8000d46:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d1e4      	bne.n	8000d1c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	2201      	movs	r2, #1
 8000d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b0b0      	sub	sp, #192	; 0xc0
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d007      	beq.n	8000d8a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d80:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d88:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8000d92:	2300      	movs	r3, #0
 8000d94:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d103      	bne.n	8000db2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8000daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dae:	663b      	str	r3, [r7, #96]	; 0x60
 8000db0:	e001      	b.n	8000db6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8000db6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dba:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8000dd0:	2340      	movs	r3, #64	; 0x40
 8000dd2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8000dec:	2300      	movs	r3, #0
 8000dee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8000e04:	2380      	movs	r3, #128	; 0x80
 8000e06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8000e38:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e3c:	4bac      	ldr	r3, [pc, #688]	; (80010f0 <ETH_MACDMAConfig+0x38c>)
 8000e3e:	4013      	ands	r3, r2
 8000e40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8000e44:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8000e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8000e48:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8000e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8000e4c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8000e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8000e50:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8000e56:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8000e58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8000e5a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8000e5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8000e5e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8000e64:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8000e66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8000e68:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8000e6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8000e6c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8000e6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8000e70:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8000e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8000e74:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8000e76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8000e78:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8000e7a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e8c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f7ff fba1 	bl	80005e0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000ea6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000ea8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8000eaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000eac:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8000eae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8000eb0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8000eb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8000eb6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8000eb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8000ebc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8000ebe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8000ec2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8000ec4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8000ec8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8000ecc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8000ed4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000ed6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f7ff fb7c 	bl	80005e0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000ef0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000efa:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000f04:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8000f10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f14:	f64f 7341 	movw	r3, #65345	; 0xff41
 8000f18:	4013      	ands	r3, r2
 8000f1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8000f1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f22:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8000f24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8000f28:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8000f2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8000f2e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8000f30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8000f34:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8000f36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8000f3a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8000f3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8000f40:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8000f42:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f46:	4313      	orrs	r3, r2
 8000f48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f54:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000f60:	2001      	movs	r0, #1
 8000f62:	f7ff fb3d 	bl	80005e0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f6e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000f70:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8000f74:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	f7ff fb28 	bl	80005e0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f98:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8000f9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fa2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8000fa8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fac:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8000fc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8000fc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fcc:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8000fce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fd2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8000fd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8000fda:	2380      	movs	r3, #128	; 0x80
 8000fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fee:	3318      	adds	r3, #24
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8000ff6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000ffa:	4b3e      	ldr	r3, [pc, #248]	; (80010f4 <ETH_MACDMAConfig+0x390>)
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001002:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001004:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001006:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001008:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800100a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800100c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800100e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001010:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001012:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001014:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001016:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001018:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800101a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800101e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001020:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001022:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001024:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001028:	4313      	orrs	r3, r2
 800102a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001036:	3318      	adds	r3, #24
 8001038:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800103c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001046:	3318      	adds	r3, #24
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800104e:	2001      	movs	r0, #1
 8001050:	f7ff fac6 	bl	80005e0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800105c:	3318      	adds	r3, #24
 800105e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001062:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001068:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800106a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800106c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800106e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001070:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001074:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001078:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800107a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800107c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800107e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800108c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800109c:	2001      	movs	r0, #1
 800109e:	f7ff fa9f 	bl	80005e0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80010ae:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d10f      	bne.n	80010d8 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010c0:	331c      	adds	r3, #28
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80010cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010d4:	331c      	adds	r3, #28
 80010d6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	461a      	mov	r2, r3
 80010de:	2100      	movs	r1, #0
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 f809 	bl	80010f8 <ETH_MACAddressConfig>
}
 80010e6:	bf00      	nop
 80010e8:	37c0      	adds	r7, #192	; 0xc0
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	ff20810f 	.word	0xff20810f
 80010f4:	f8de3f23 	.word	0xf8de3f23

080010f8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b087      	sub	sp, #28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3305      	adds	r3, #5
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	3204      	adds	r2, #4
 8001110:	7812      	ldrb	r2, [r2, #0]
 8001112:	4313      	orrs	r3, r2
 8001114:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <ETH_MACAddressConfig+0x68>)
 800111a:	4413      	add	r3, r2
 800111c:	461a      	mov	r2, r3
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3303      	adds	r3, #3
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	061a      	lsls	r2, r3, #24
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3302      	adds	r3, #2
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	041b      	lsls	r3, r3, #16
 8001132:	431a      	orrs	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3301      	adds	r3, #1
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	4313      	orrs	r3, r2
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	7812      	ldrb	r2, [r2, #0]
 8001142:	4313      	orrs	r3, r2
 8001144:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <ETH_MACAddressConfig+0x6c>)
 800114a:	4413      	add	r3, r2
 800114c:	461a      	mov	r2, r3
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	6013      	str	r3, [r2, #0]
}
 8001152:	bf00      	nop
 8001154:	371c      	adds	r7, #28
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	40028040 	.word	0x40028040
 8001164:	40028044 	.word	0x40028044

08001168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
 8001182:	e177      	b.n	8001474 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001184:	2201      	movs	r2, #1
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	429a      	cmp	r2, r3
 800119e:	f040 8166 	bne.w	800146e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x4a>
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b12      	cmp	r3, #18
 80011b0:	d123      	bne.n	80011fa <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	08da      	lsrs	r2, r3, #3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3208      	adds	r2, #8
 80011ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	220f      	movs	r2, #15
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	691a      	ldr	r2, [r3, #16]
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	f003 0307 	and.w	r3, r3, #7
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	08da      	lsrs	r2, r3, #3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3208      	adds	r2, #8
 80011f4:	69b9      	ldr	r1, [r7, #24]
 80011f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	2203      	movs	r2, #3
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 0203 	and.w	r2, r3, #3
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d00b      	beq.n	800124e <HAL_GPIO_Init+0xe6>
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b02      	cmp	r3, #2
 800123c:	d007      	beq.n	800124e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001242:	2b11      	cmp	r3, #17
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b12      	cmp	r3, #18
 800124c:	d130      	bne.n	80012b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	2203      	movs	r2, #3
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	68da      	ldr	r2, [r3, #12]
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001284:	2201      	movs	r2, #1
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	091b      	lsrs	r3, r3, #4
 800129a:	f003 0201 	and.w	r2, r3, #1
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	2203      	movs	r2, #3
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	689a      	ldr	r2, [r3, #8]
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 80c0 	beq.w	800146e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b65      	ldr	r3, [pc, #404]	; (8001488 <HAL_GPIO_Init+0x320>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	4a64      	ldr	r2, [pc, #400]	; (8001488 <HAL_GPIO_Init+0x320>)
 80012f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012fc:	6453      	str	r3, [r2, #68]	; 0x44
 80012fe:	4b62      	ldr	r3, [pc, #392]	; (8001488 <HAL_GPIO_Init+0x320>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800130a:	4a60      	ldr	r2, [pc, #384]	; (800148c <HAL_GPIO_Init+0x324>)
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	089b      	lsrs	r3, r3, #2
 8001310:	3302      	adds	r3, #2
 8001312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	220f      	movs	r2, #15
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a57      	ldr	r2, [pc, #348]	; (8001490 <HAL_GPIO_Init+0x328>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d037      	beq.n	80013a6 <HAL_GPIO_Init+0x23e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a56      	ldr	r2, [pc, #344]	; (8001494 <HAL_GPIO_Init+0x32c>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d031      	beq.n	80013a2 <HAL_GPIO_Init+0x23a>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a55      	ldr	r2, [pc, #340]	; (8001498 <HAL_GPIO_Init+0x330>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d02b      	beq.n	800139e <HAL_GPIO_Init+0x236>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a54      	ldr	r2, [pc, #336]	; (800149c <HAL_GPIO_Init+0x334>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d025      	beq.n	800139a <HAL_GPIO_Init+0x232>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a53      	ldr	r2, [pc, #332]	; (80014a0 <HAL_GPIO_Init+0x338>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d01f      	beq.n	8001396 <HAL_GPIO_Init+0x22e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a52      	ldr	r2, [pc, #328]	; (80014a4 <HAL_GPIO_Init+0x33c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d019      	beq.n	8001392 <HAL_GPIO_Init+0x22a>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a51      	ldr	r2, [pc, #324]	; (80014a8 <HAL_GPIO_Init+0x340>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d013      	beq.n	800138e <HAL_GPIO_Init+0x226>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a50      	ldr	r2, [pc, #320]	; (80014ac <HAL_GPIO_Init+0x344>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d00d      	beq.n	800138a <HAL_GPIO_Init+0x222>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4f      	ldr	r2, [pc, #316]	; (80014b0 <HAL_GPIO_Init+0x348>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d007      	beq.n	8001386 <HAL_GPIO_Init+0x21e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4e      	ldr	r2, [pc, #312]	; (80014b4 <HAL_GPIO_Init+0x34c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d101      	bne.n	8001382 <HAL_GPIO_Init+0x21a>
 800137e:	2309      	movs	r3, #9
 8001380:	e012      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 8001382:	230a      	movs	r3, #10
 8001384:	e010      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 8001386:	2308      	movs	r3, #8
 8001388:	e00e      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 800138a:	2307      	movs	r3, #7
 800138c:	e00c      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 800138e:	2306      	movs	r3, #6
 8001390:	e00a      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 8001392:	2305      	movs	r3, #5
 8001394:	e008      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 8001396:	2304      	movs	r3, #4
 8001398:	e006      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 800139a:	2303      	movs	r3, #3
 800139c:	e004      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 800139e:	2302      	movs	r3, #2
 80013a0:	e002      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 80013a6:	2300      	movs	r3, #0
 80013a8:	69fa      	ldr	r2, [r7, #28]
 80013aa:	f002 0203 	and.w	r2, r2, #3
 80013ae:	0092      	lsls	r2, r2, #2
 80013b0:	4093      	lsls	r3, r2
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013b8:	4934      	ldr	r1, [pc, #208]	; (800148c <HAL_GPIO_Init+0x324>)
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	089b      	lsrs	r3, r3, #2
 80013be:	3302      	adds	r3, #2
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c6:	4b3c      	ldr	r3, [pc, #240]	; (80014b8 <HAL_GPIO_Init+0x350>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4013      	ands	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ea:	4a33      	ldr	r2, [pc, #204]	; (80014b8 <HAL_GPIO_Init+0x350>)
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013f0:	4b31      	ldr	r3, [pc, #196]	; (80014b8 <HAL_GPIO_Init+0x350>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001414:	4a28      	ldr	r2, [pc, #160]	; (80014b8 <HAL_GPIO_Init+0x350>)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800141a:	4b27      	ldr	r3, [pc, #156]	; (80014b8 <HAL_GPIO_Init+0x350>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800143e:	4a1e      	ldr	r2, [pc, #120]	; (80014b8 <HAL_GPIO_Init+0x350>)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001444:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <HAL_GPIO_Init+0x350>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001468:	4a13      	ldr	r2, [pc, #76]	; (80014b8 <HAL_GPIO_Init+0x350>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3301      	adds	r3, #1
 8001472:	61fb      	str	r3, [r7, #28]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	2b0f      	cmp	r3, #15
 8001478:	f67f ae84 	bls.w	8001184 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800147c:	bf00      	nop
 800147e:	3724      	adds	r7, #36	; 0x24
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	40023800 	.word	0x40023800
 800148c:	40013800 	.word	0x40013800
 8001490:	40020000 	.word	0x40020000
 8001494:	40020400 	.word	0x40020400
 8001498:	40020800 	.word	0x40020800
 800149c:	40020c00 	.word	0x40020c00
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40021400 	.word	0x40021400
 80014a8:	40021800 	.word	0x40021800
 80014ac:	40021c00 	.word	0x40021c00
 80014b0:	40022000 	.word	0x40022000
 80014b4:	40022400 	.word	0x40022400
 80014b8:	40013c00 	.word	0x40013c00

080014bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	807b      	strh	r3, [r7, #2]
 80014c8:	4613      	mov	r3, r2
 80014ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014cc:	787b      	ldrb	r3, [r7, #1]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014d2:	887a      	ldrh	r2, [r7, #2]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014d8:	e003      	b.n	80014e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014da:	887b      	ldrh	r3, [r7, #2]
 80014dc:	041a      	lsls	r2, r3, #16
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	619a      	str	r2, [r3, #24]
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
 80014f6:	460b      	mov	r3, r1
 80014f8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	695a      	ldr	r2, [r3, #20]
 80014fe:	887b      	ldrh	r3, [r7, #2]
 8001500:	401a      	ands	r2, r3
 8001502:	887b      	ldrh	r3, [r7, #2]
 8001504:	429a      	cmp	r2, r3
 8001506:	d104      	bne.n	8001512 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001508:	887b      	ldrh	r3, [r7, #2]
 800150a:	041a      	lsls	r2, r3, #16
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001510:	e002      	b.n	8001518 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001512:	887a      	ldrh	r2, [r7, #2]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	619a      	str	r2, [r3, #24]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001526:	b08f      	sub	sp, #60	; 0x3c
 8001528:	af0a      	add	r7, sp, #40	; 0x28
 800152a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e10f      	b.n	8001756 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d106      	bne.n	8001556 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f005 ff59 	bl	8007408 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2203      	movs	r2, #3
 800155a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001566:	2b00      	cmp	r3, #0
 8001568:	d102      	bne.n	8001570 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f002 fc66 	bl	8003e46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	687e      	ldr	r6, [r7, #4]
 8001582:	466d      	mov	r5, sp
 8001584:	f106 0410 	add.w	r4, r6, #16
 8001588:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800158a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800158c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800158e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001590:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001594:	e885 0003 	stmia.w	r5, {r0, r1}
 8001598:	1d33      	adds	r3, r6, #4
 800159a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800159c:	6838      	ldr	r0, [r7, #0]
 800159e:	f002 fb3d 	bl	8003c1c <USB_CoreInit>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2202      	movs	r2, #2
 80015ac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e0d0      	b.n	8001756 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2100      	movs	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f002 fc54 	bl	8003e68 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c0:	2300      	movs	r3, #0
 80015c2:	73fb      	strb	r3, [r7, #15]
 80015c4:	e04a      	b.n	800165c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015c6:	7bfa      	ldrb	r2, [r7, #15]
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	1a9b      	subs	r3, r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	440b      	add	r3, r1
 80015d4:	333d      	adds	r3, #61	; 0x3d
 80015d6:	2201      	movs	r2, #1
 80015d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015da:	7bfa      	ldrb	r2, [r7, #15]
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	1a9b      	subs	r3, r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	440b      	add	r3, r1
 80015e8:	333c      	adds	r3, #60	; 0x3c
 80015ea:	7bfa      	ldrb	r2, [r7, #15]
 80015ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015ee:	7bfa      	ldrb	r2, [r7, #15]
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	b298      	uxth	r0, r3
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	1a9b      	subs	r3, r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	440b      	add	r3, r1
 8001600:	3342      	adds	r3, #66	; 0x42
 8001602:	4602      	mov	r2, r0
 8001604:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001606:	7bfa      	ldrb	r2, [r7, #15]
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	1a9b      	subs	r3, r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	440b      	add	r3, r1
 8001614:	333f      	adds	r3, #63	; 0x3f
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800161a:	7bfa      	ldrb	r2, [r7, #15]
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	4613      	mov	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	1a9b      	subs	r3, r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	440b      	add	r3, r1
 8001628:	3344      	adds	r3, #68	; 0x44
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800162e:	7bfa      	ldrb	r2, [r7, #15]
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	4613      	mov	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	1a9b      	subs	r3, r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	440b      	add	r3, r1
 800163c:	3348      	adds	r3, #72	; 0x48
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001642:	7bfa      	ldrb	r2, [r7, #15]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	4613      	mov	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	1a9b      	subs	r3, r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	440b      	add	r3, r1
 8001650:	3350      	adds	r3, #80	; 0x50
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	3301      	adds	r3, #1
 800165a:	73fb      	strb	r3, [r7, #15]
 800165c:	7bfa      	ldrb	r2, [r7, #15]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	429a      	cmp	r2, r3
 8001664:	d3af      	bcc.n	80015c6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001666:	2300      	movs	r3, #0
 8001668:	73fb      	strb	r3, [r7, #15]
 800166a:	e044      	b.n	80016f6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800166c:	7bfa      	ldrb	r2, [r7, #15]
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	1a9b      	subs	r3, r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001682:	7bfa      	ldrb	r2, [r7, #15]
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	1a9b      	subs	r3, r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001694:	7bfa      	ldrb	r2, [r7, #15]
 8001696:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001698:	7bfa      	ldrb	r2, [r7, #15]
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	1a9b      	subs	r3, r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80016aa:	2200      	movs	r2, #0
 80016ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016ae:	7bfa      	ldrb	r2, [r7, #15]
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	1a9b      	subs	r3, r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016c4:	7bfa      	ldrb	r2, [r7, #15]
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	4613      	mov	r3, r2
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	1a9b      	subs	r3, r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016da:	7bfa      	ldrb	r2, [r7, #15]
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	4613      	mov	r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	1a9b      	subs	r3, r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	440b      	add	r3, r1
 80016e8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	3301      	adds	r3, #1
 80016f4:	73fb      	strb	r3, [r7, #15]
 80016f6:	7bfa      	ldrb	r2, [r7, #15]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d3b5      	bcc.n	800166c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	603b      	str	r3, [r7, #0]
 8001706:	687e      	ldr	r6, [r7, #4]
 8001708:	466d      	mov	r5, sp
 800170a:	f106 0410 	add.w	r4, r6, #16
 800170e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001710:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001712:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001714:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001716:	e894 0003 	ldmia.w	r4, {r0, r1}
 800171a:	e885 0003 	stmia.w	r5, {r0, r1}
 800171e:	1d33      	adds	r3, r6, #4
 8001720:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001722:	6838      	ldr	r0, [r7, #0]
 8001724:	f002 fbca 	bl	8003ebc <USB_DevInit>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d005      	beq.n	800173a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2202      	movs	r2, #2
 8001732:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e00d      	b.n	8001756 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f003 fbbf 	bl	8004ed2 <USB_DevDisconnect>

  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800175e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b084      	sub	sp, #16
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001772:	2b01      	cmp	r3, #1
 8001774:	d101      	bne.n	800177a <HAL_PCD_Start+0x1c>
 8001776:	2302      	movs	r3, #2
 8001778:	e020      	b.n	80017bc <HAL_PCD_Start+0x5e>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001786:	2b01      	cmp	r3, #1
 8001788:	d109      	bne.n	800179e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800178e:	2b01      	cmp	r3, #1
 8001790:	d005      	beq.n	800179e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001796:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f003 fb7d 	bl	8004ea2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f002 fb39 	bl	8003e24 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017c4:	b590      	push	{r4, r7, lr}
 80017c6:	b08d      	sub	sp, #52	; 0x34
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017d2:	6a3b      	ldr	r3, [r7, #32]
 80017d4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f003 fc24 	bl	8005028 <USB_GetMode>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f040 838e 	bne.w	8001f04 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f003 fb88 	bl	8004f02 <USB_ReadInterrupts>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 8384 	beq.w	8001f02 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f003 fb7f 	bl	8004f02 <USB_ReadInterrupts>
 8001804:	4603      	mov	r3, r0
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b02      	cmp	r3, #2
 800180c:	d107      	bne.n	800181e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	695a      	ldr	r2, [r3, #20]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f002 0202 	and.w	r2, r2, #2
 800181c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f003 fb6d 	bl	8004f02 <USB_ReadInterrupts>
 8001828:	4603      	mov	r3, r0
 800182a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800182e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001832:	d17b      	bne.n	800192c <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f003 fb73 	bl	8004f28 <USB_ReadDevAllOutEpInterrupt>
 8001842:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001844:	e06f      	b.n	8001926 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b00      	cmp	r3, #0
 800184e:	d064      	beq.n	800191a <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	4611      	mov	r1, r2
 800185a:	4618      	mov	r0, r3
 800185c:	f003 fb98 	bl	8004f90 <USB_ReadDevOutEPInterrupt>
 8001860:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00c      	beq.n	8001886 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	015a      	lsls	r2, r3, #5
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	4413      	add	r3, r2
 8001874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001878:	461a      	mov	r2, r3
 800187a:	2301      	movs	r3, #1
 800187c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800187e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 fe0d 	bl	80024a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	f003 0308 	and.w	r3, r3, #8
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00c      	beq.n	80018aa <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001890:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 ff0c 	bl	80026b0 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	015a      	lsls	r2, r3, #5
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	4413      	add	r3, r2
 80018a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018a4:	461a      	mov	r2, r3
 80018a6:	2308      	movs	r3, #8
 80018a8:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	f003 0310 	and.w	r3, r3, #16
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d008      	beq.n	80018c6 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	015a      	lsls	r2, r3, #5
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	4413      	add	r3, r2
 80018bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018c0:	461a      	mov	r2, r3
 80018c2:	2310      	movs	r3, #16
 80018c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	f003 0320 	and.w	r3, r3, #32
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d015      	beq.n	80018fc <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d108      	bne.n	80018ea <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6818      	ldr	r0, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80018e2:	461a      	mov	r2, r3
 80018e4:	2101      	movs	r1, #1
 80018e6:	f003 fbe3 	bl	80050b0 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	015a      	lsls	r2, r3, #5
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	4413      	add	r3, r2
 80018f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018f6:	461a      	mov	r2, r3
 80018f8:	2320      	movs	r3, #32
 80018fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d009      	beq.n	800191a <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	015a      	lsls	r2, r3, #5
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	4413      	add	r3, r2
 800190e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001912:	461a      	mov	r2, r3
 8001914:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001918:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	3301      	adds	r3, #1
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001922:	085b      	lsrs	r3, r3, #1
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001928:	2b00      	cmp	r3, #0
 800192a:	d18c      	bne.n	8001846 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f003 fae6 	bl	8004f02 <USB_ReadInterrupts>
 8001936:	4603      	mov	r3, r0
 8001938:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800193c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001940:	f040 80c4 	bne.w	8001acc <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f003 fb07 	bl	8004f5c <USB_ReadDevAllInEpInterrupt>
 800194e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001954:	e0b6      	b.n	8001ac4 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 80ab 	beq.w	8001ab8 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f003 fb2d 	bl	8004fcc <USB_ReadDevInEPInterrupt>
 8001972:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d05b      	beq.n	8001a36 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	f003 030f 	and.w	r3, r3, #15
 8001984:	2201      	movs	r2, #1
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	43db      	mvns	r3, r3
 8001998:	69f9      	ldr	r1, [r7, #28]
 800199a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800199e:	4013      	ands	r3, r2
 80019a0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	015a      	lsls	r2, r3, #5
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	4413      	add	r3, r2
 80019aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019ae:	461a      	mov	r2, r3
 80019b0:	2301      	movs	r3, #1
 80019b2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d11b      	bne.n	80019f4 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c0:	4613      	mov	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	1a9b      	subs	r3, r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	440b      	add	r3, r1
 80019ca:	3348      	adds	r3, #72	; 0x48
 80019cc:	6819      	ldr	r1, [r3, #0]
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d2:	4613      	mov	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	1a9b      	subs	r3, r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4403      	add	r3, r0
 80019dc:	3344      	adds	r3, #68	; 0x44
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4419      	add	r1, r3
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e6:	4613      	mov	r3, r2
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	1a9b      	subs	r3, r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4403      	add	r3, r0
 80019f0:	3348      	adds	r3, #72	; 0x48
 80019f2:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	4619      	mov	r1, r3
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f005 fd93 	bl	8007526 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d116      	bne.n	8001a36 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d113      	bne.n	8001a36 <HAL_PCD_IRQHandler+0x272>
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a12:	4613      	mov	r3, r2
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	1a9b      	subs	r3, r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	3350      	adds	r3, #80	; 0x50
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d108      	bne.n	8001a36 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6818      	ldr	r0, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001a2e:	461a      	mov	r2, r3
 8001a30:	2101      	movs	r1, #1
 8001a32:	f003 fb3d 	bl	80050b0 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	f003 0308 	and.w	r3, r3, #8
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d008      	beq.n	8001a52 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	015a      	lsls	r2, r3, #5
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	4413      	add	r3, r2
 8001a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	2308      	movs	r3, #8
 8001a50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	f003 0310 	and.w	r3, r3, #16
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d008      	beq.n	8001a6e <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	015a      	lsls	r2, r3, #5
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	4413      	add	r3, r2
 8001a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a68:	461a      	mov	r2, r3
 8001a6a:	2310      	movs	r3, #16
 8001a6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d008      	beq.n	8001a8a <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	015a      	lsls	r2, r3, #5
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	4413      	add	r3, r2
 8001a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a84:	461a      	mov	r2, r3
 8001a86:	2340      	movs	r3, #64	; 0x40
 8001a88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d008      	beq.n	8001aa6 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	015a      	lsls	r2, r3, #5
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ab0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 fc67 	bl	8002386 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	3301      	adds	r3, #1
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac0:	085b      	lsrs	r3, r3, #1
 8001ac2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f47f af45 	bne.w	8001956 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f003 fa16 	bl	8004f02 <USB_ReadInterrupts>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001adc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ae0:	d122      	bne.n	8001b28 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	69fa      	ldr	r2, [r7, #28]
 8001aec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001af0:	f023 0301 	bic.w	r3, r3, #1
 8001af4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d108      	bne.n	8001b12 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b08:	2100      	movs	r1, #0
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 fe88 	bl	8002820 <HAL_PCDEx_LPM_Callback>
 8001b10:	e002      	b.n	8001b18 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f005 fd7e 	bl	8007614 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	695a      	ldr	r2, [r3, #20]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001b26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f003 f9e8 	bl	8004f02 <USB_ReadInterrupts>
 8001b32:	4603      	mov	r3, r0
 8001b34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b3c:	d112      	bne.n	8001b64 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d102      	bne.n	8001b54 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f005 fd3a 	bl	80075c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695a      	ldr	r2, [r3, #20]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001b62:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f003 f9ca 	bl	8004f02 <USB_ReadInterrupts>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b78:	f040 80a7 	bne.w	8001cca <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	69fa      	ldr	r2, [r7, #28]
 8001b86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b8a:	f023 0301 	bic.w	r3, r3, #1
 8001b8e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2110      	movs	r1, #16
 8001b96:	4618      	mov	r0, r3
 8001b98:	f002 fb02 	bl	80041a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ba0:	e036      	b.n	8001c10 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba4:	015a      	lsls	r2, r3, #5
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	4413      	add	r3, r2
 8001baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bae:	461a      	mov	r2, r3
 8001bb0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001bb4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb8:	015a      	lsls	r2, r3, #5
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bc6:	0151      	lsls	r1, r2, #5
 8001bc8:	69fa      	ldr	r2, [r7, #28]
 8001bca:	440a      	add	r2, r1
 8001bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001bd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001bd4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd8:	015a      	lsls	r2, r3, #5
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	4413      	add	r3, r2
 8001bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001be2:	461a      	mov	r2, r3
 8001be4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001be8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bec:	015a      	lsls	r2, r3, #5
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bfa:	0151      	lsls	r1, r2, #5
 8001bfc:	69fa      	ldr	r2, [r7, #28]
 8001bfe:	440a      	add	r2, r1
 8001c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c08:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d3c3      	bcc.n	8001ba2 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	69fa      	ldr	r2, [r7, #28]
 8001c24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c28:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c2c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d016      	beq.n	8001c64 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c40:	69fa      	ldr	r2, [r7, #28]
 8001c42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c46:	f043 030b 	orr.w	r3, r3, #11
 8001c4a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	69fa      	ldr	r2, [r7, #28]
 8001c58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c5c:	f043 030b 	orr.w	r3, r3, #11
 8001c60:	6453      	str	r3, [r2, #68]	; 0x44
 8001c62:	e015      	b.n	8001c90 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	69fa      	ldr	r2, [r7, #28]
 8001c6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c76:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001c7a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	69fa      	ldr	r2, [r7, #28]
 8001c86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c8a:	f043 030b 	orr.w	r3, r3, #11
 8001c8e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c9e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001ca2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6818      	ldr	r0, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	f003 f9fb 	bl	80050b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	695a      	ldr	r2, [r3, #20]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001cc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f003 f917 	bl	8004f02 <USB_ReadInterrupts>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cde:	d124      	bne.n	8001d2a <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f003 f9ad 	bl	8005044 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f002 fab7 	bl	8004262 <USB_GetDevSpeed>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681c      	ldr	r4, [r3, #0]
 8001d00:	f001 f996 	bl	8003030 <HAL_RCC_GetHCLKFreq>
 8001d04:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4620      	mov	r0, r4
 8001d10:	f001 ffe6 	bl	8003ce0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f005 fc2e 	bl	8007576 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	695a      	ldr	r2, [r3, #20]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d28:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f003 f8e7 	bl	8004f02 <USB_ReadInterrupts>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	2b10      	cmp	r3, #16
 8001d3c:	d161      	bne.n	8001e02 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	699a      	ldr	r2, [r3, #24]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 0210 	bic.w	r2, r2, #16
 8001d4c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	f003 020f 	and.w	r2, r3, #15
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	1a9b      	subs	r3, r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	0c5b      	lsrs	r3, r3, #17
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d124      	bne.n	8001dc4 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001d80:	4013      	ands	r3, r2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d035      	beq.n	8001df2 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	461a      	mov	r2, r3
 8001d98:	6a38      	ldr	r0, [r7, #32]
 8001d9a:	f002 ff5f 	bl	8004c5c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001daa:	441a      	add	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	699a      	ldr	r2, [r3, #24]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	091b      	lsrs	r3, r3, #4
 8001db8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dbc:	441a      	add	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	619a      	str	r2, [r3, #24]
 8001dc2:	e016      	b.n	8001df2 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	0c5b      	lsrs	r3, r3, #17
 8001dc8:	f003 030f 	and.w	r3, r3, #15
 8001dcc:	2b06      	cmp	r3, #6
 8001dce:	d110      	bne.n	8001df2 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001dd6:	2208      	movs	r2, #8
 8001dd8:	4619      	mov	r1, r3
 8001dda:	6a38      	ldr	r0, [r7, #32]
 8001ddc:	f002 ff3e 	bl	8004c5c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	699a      	ldr	r2, [r3, #24]
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	091b      	lsrs	r3, r3, #4
 8001de8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dec:	441a      	add	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	699a      	ldr	r2, [r3, #24]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f042 0210 	orr.w	r2, r2, #16
 8001e00:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f003 f87b 	bl	8004f02 <USB_ReadInterrupts>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b08      	cmp	r3, #8
 8001e14:	d10a      	bne.n	8001e2c <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f005 fb9f 	bl	800755a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695a      	ldr	r2, [r3, #20]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f002 0208 	and.w	r2, r2, #8
 8001e2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f003 f866 	bl	8004f02 <USB_ReadInterrupts>
 8001e36:	4603      	mov	r3, r0
 8001e38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e40:	d10f      	bne.n	8001e62 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f005 fc01 	bl	8007654 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	695a      	ldr	r2, [r3, #20]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001e60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f003 f84b 	bl	8004f02 <USB_ReadInterrupts>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e76:	d10f      	bne.n	8001e98 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	4619      	mov	r1, r3
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f005 fbd4 	bl	8007630 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	695a      	ldr	r2, [r3, #20]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001e96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f003 f830 	bl	8004f02 <USB_ReadInterrupts>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eac:	d10a      	bne.n	8001ec4 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f005 fbe2 	bl	8007678 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	695a      	ldr	r2, [r3, #20]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001ec2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f003 f81a 	bl	8004f02 <USB_ReadInterrupts>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d115      	bne.n	8001f04 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d002      	beq.n	8001ef0 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f005 fbd2 	bl	8007694 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6859      	ldr	r1, [r3, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	e000      	b.n	8001f04 <HAL_PCD_IRQHandler+0x740>
      return;
 8001f02:	bf00      	nop
    }
  }
}
 8001f04:	3734      	adds	r7, #52	; 0x34
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd90      	pop	{r4, r7, pc}

08001f0a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	460b      	mov	r3, r1
 8001f14:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d101      	bne.n	8001f24 <HAL_PCD_SetAddress+0x1a>
 8001f20:	2302      	movs	r3, #2
 8001f22:	e013      	b.n	8001f4c <HAL_PCD_SetAddress+0x42>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	78fa      	ldrb	r2, [r7, #3]
 8001f30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	78fa      	ldrb	r2, [r7, #3]
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f002 ff8a 	bl	8004e56 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	4608      	mov	r0, r1
 8001f5e:	4611      	mov	r1, r2
 8001f60:	461a      	mov	r2, r3
 8001f62:	4603      	mov	r3, r0
 8001f64:	70fb      	strb	r3, [r7, #3]
 8001f66:	460b      	mov	r3, r1
 8001f68:	803b      	strh	r3, [r7, #0]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	da0f      	bge.n	8001f9a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f7a:	78fb      	ldrb	r3, [r7, #3]
 8001f7c:	f003 020f 	and.w	r2, r3, #15
 8001f80:	4613      	mov	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	1a9b      	subs	r3, r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	3338      	adds	r3, #56	; 0x38
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	3304      	adds	r3, #4
 8001f90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2201      	movs	r2, #1
 8001f96:	705a      	strb	r2, [r3, #1]
 8001f98:	e00f      	b.n	8001fba <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	f003 020f 	and.w	r2, r3, #15
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	1a9b      	subs	r3, r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	4413      	add	r3, r2
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	f003 030f 	and.w	r3, r3, #15
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001fc6:	883a      	ldrh	r2, [r7, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	78ba      	ldrb	r2, [r7, #2]
 8001fd0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	785b      	ldrb	r3, [r3, #1]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d004      	beq.n	8001fe4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001fe4:	78bb      	ldrb	r3, [r7, #2]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d102      	bne.n	8001ff0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_PCD_EP_Open+0xaa>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e00e      	b.n	800201c <HAL_PCD_EP_Open+0xc8>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68f9      	ldr	r1, [r7, #12]
 800200c:	4618      	mov	r0, r3
 800200e:	f002 f94d 	bl	80042ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800201a:	7afb      	ldrb	r3, [r7, #11]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002030:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002034:	2b00      	cmp	r3, #0
 8002036:	da0f      	bge.n	8002058 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	f003 020f 	and.w	r2, r3, #15
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	1a9b      	subs	r3, r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	3338      	adds	r3, #56	; 0x38
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	4413      	add	r3, r2
 800204c:	3304      	adds	r3, #4
 800204e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2201      	movs	r2, #1
 8002054:	705a      	strb	r2, [r3, #1]
 8002056:	e00f      	b.n	8002078 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002058:	78fb      	ldrb	r3, [r7, #3]
 800205a:	f003 020f 	and.w	r2, r3, #15
 800205e:	4613      	mov	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	1a9b      	subs	r3, r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	3304      	adds	r3, #4
 8002070:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	b2da      	uxtb	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <HAL_PCD_EP_Close+0x6e>
 800208e:	2302      	movs	r3, #2
 8002090:	e00e      	b.n	80020b0 <HAL_PCD_EP_Close+0x8c>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68f9      	ldr	r1, [r7, #12]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f002 f98b 	bl	80043bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	607a      	str	r2, [r7, #4]
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	460b      	mov	r3, r1
 80020c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020c8:	7afb      	ldrb	r3, [r7, #11]
 80020ca:	f003 020f 	and.w	r2, r3, #15
 80020ce:	4613      	mov	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	1a9b      	subs	r3, r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4413      	add	r3, r2
 80020de:	3304      	adds	r3, #4
 80020e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	2200      	movs	r2, #0
 80020f2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	2200      	movs	r2, #0
 80020f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020fa:	7afb      	ldrb	r3, [r7, #11]
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	b2da      	uxtb	r2, r3
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d102      	bne.n	8002114 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002114:	7afb      	ldrb	r3, [r7, #11]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	2b00      	cmp	r3, #0
 800211c:	d109      	bne.n	8002132 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6818      	ldr	r0, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	461a      	mov	r2, r3
 800212a:	6979      	ldr	r1, [r7, #20]
 800212c:	f002 fc0e 	bl	800494c <USB_EP0StartXfer>
 8002130:	e008      	b.n	8002144 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	461a      	mov	r2, r3
 800213e:	6979      	ldr	r1, [r7, #20]
 8002140:	f002 f9c0 	bl	80044c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	460b      	mov	r3, r1
 8002158:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	f003 020f 	and.w	r2, r3, #15
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002170:	681b      	ldr	r3, [r3, #0]
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b086      	sub	sp, #24
 8002182:	af00      	add	r7, sp, #0
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	607a      	str	r2, [r7, #4]
 8002188:	603b      	str	r3, [r7, #0]
 800218a:	460b      	mov	r3, r1
 800218c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800218e:	7afb      	ldrb	r3, [r7, #11]
 8002190:	f003 020f 	and.w	r2, r3, #15
 8002194:	4613      	mov	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	1a9b      	subs	r3, r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	3338      	adds	r3, #56	; 0x38
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	4413      	add	r3, r2
 80021a2:	3304      	adds	r3, #4
 80021a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2200      	movs	r2, #0
 80021b6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	2201      	movs	r2, #1
 80021bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021be:	7afb      	ldrb	r3, [r7, #11]
 80021c0:	f003 030f 	and.w	r3, r3, #15
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d102      	bne.n	80021d8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021d8:	7afb      	ldrb	r3, [r7, #11]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d109      	bne.n	80021f6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6818      	ldr	r0, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	461a      	mov	r2, r3
 80021ee:	6979      	ldr	r1, [r7, #20]
 80021f0:	f002 fbac 	bl	800494c <USB_EP0StartXfer>
 80021f4:	e008      	b.n	8002208 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6818      	ldr	r0, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	6979      	ldr	r1, [r7, #20]
 8002204:	f002 f95e 	bl	80044c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b084      	sub	sp, #16
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	460b      	mov	r3, r1
 800221c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800221e:	78fb      	ldrb	r3, [r7, #3]
 8002220:	f003 020f 	and.w	r2, r3, #15
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	429a      	cmp	r2, r3
 800222a:	d901      	bls.n	8002230 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e050      	b.n	80022d2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002230:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002234:	2b00      	cmp	r3, #0
 8002236:	da0f      	bge.n	8002258 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	f003 020f 	and.w	r2, r3, #15
 800223e:	4613      	mov	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	3338      	adds	r3, #56	; 0x38
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	4413      	add	r3, r2
 800224c:	3304      	adds	r3, #4
 800224e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2201      	movs	r2, #1
 8002254:	705a      	strb	r2, [r3, #1]
 8002256:	e00d      	b.n	8002274 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002258:	78fa      	ldrb	r2, [r7, #3]
 800225a:	4613      	mov	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	1a9b      	subs	r3, r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	4413      	add	r3, r2
 800226a:	3304      	adds	r3, #4
 800226c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2201      	movs	r2, #1
 8002278:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	b2da      	uxtb	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_PCD_EP_SetStall+0x82>
 8002290:	2302      	movs	r3, #2
 8002292:	e01e      	b.n	80022d2 <HAL_PCD_EP_SetStall+0xc0>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68f9      	ldr	r1, [r7, #12]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f002 fd03 	bl	8004cae <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10a      	bne.n	80022c8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	b2d9      	uxtb	r1, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022c2:	461a      	mov	r2, r3
 80022c4:	f002 fef4 	bl	80050b0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b084      	sub	sp, #16
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	460b      	mov	r3, r1
 80022e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80022e6:	78fb      	ldrb	r3, [r7, #3]
 80022e8:	f003 020f 	and.w	r2, r3, #15
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d901      	bls.n	80022f8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e042      	b.n	800237e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	da0f      	bge.n	8002320 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	f003 020f 	and.w	r2, r3, #15
 8002306:	4613      	mov	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	1a9b      	subs	r3, r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	3338      	adds	r3, #56	; 0x38
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	4413      	add	r3, r2
 8002314:	3304      	adds	r3, #4
 8002316:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2201      	movs	r2, #1
 800231c:	705a      	strb	r2, [r3, #1]
 800231e:	e00f      	b.n	8002340 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002320:	78fb      	ldrb	r3, [r7, #3]
 8002322:	f003 020f 	and.w	r2, r3, #15
 8002326:	4613      	mov	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	1a9b      	subs	r3, r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	3304      	adds	r3, #4
 8002338:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002346:	78fb      	ldrb	r3, [r7, #3]
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	b2da      	uxtb	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <HAL_PCD_EP_ClrStall+0x86>
 800235c:	2302      	movs	r3, #2
 800235e:	e00e      	b.n	800237e <HAL_PCD_EP_ClrStall+0xa4>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68f9      	ldr	r1, [r7, #12]
 800236e:	4618      	mov	r0, r3
 8002370:	f002 fd0b 	bl	8004d8a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b08a      	sub	sp, #40	; 0x28
 800238a:	af02      	add	r7, sp, #8
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	4613      	mov	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	1a9b      	subs	r3, r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	3338      	adds	r3, #56	; 0x38
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	3304      	adds	r3, #4
 80023ac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	699a      	ldr	r2, [r3, #24]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d901      	bls.n	80023be <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e06c      	b.n	8002498 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	695a      	ldr	r2, [r3, #20]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	69fa      	ldr	r2, [r7, #28]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d902      	bls.n	80023da <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3303      	adds	r3, #3
 80023de:	089b      	lsrs	r3, r3, #2
 80023e0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023e2:	e02b      	b.n	800243c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	695a      	ldr	r2, [r3, #20]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	69fa      	ldr	r2, [r7, #28]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d902      	bls.n	8002400 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	3303      	adds	r3, #3
 8002404:	089b      	lsrs	r3, r3, #2
 8002406:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	68d9      	ldr	r1, [r3, #12]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	b2da      	uxtb	r2, r3
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002418:	b2db      	uxtb	r3, r3
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	4603      	mov	r3, r0
 800241e:	6978      	ldr	r0, [r7, #20]
 8002420:	f002 fbe7 	bl	8004bf2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	68da      	ldr	r2, [r3, #12]
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	441a      	add	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	699a      	ldr	r2, [r3, #24]
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	441a      	add	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	015a      	lsls	r2, r3, #5
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4413      	add	r3, r2
 8002444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	b29b      	uxth	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	429a      	cmp	r2, r3
 8002450:	d809      	bhi.n	8002466 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	699a      	ldr	r2, [r3, #24]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800245a:	429a      	cmp	r2, r3
 800245c:	d203      	bcs.n	8002466 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1be      	bne.n	80023e4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	695a      	ldr	r2, [r3, #20]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	429a      	cmp	r2, r3
 8002470:	d811      	bhi.n	8002496 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	f003 030f 	and.w	r3, r3, #15
 8002478:	2201      	movs	r2, #1
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	43db      	mvns	r3, r3
 800248c:	6939      	ldr	r1, [r7, #16]
 800248e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002492:	4013      	ands	r3, r2
 8002494:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3720      	adds	r7, #32
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	333c      	adds	r3, #60	; 0x3c
 80024b8:	3304      	adds	r3, #4
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	f040 80b3 	bne.w	800263e <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d028      	beq.n	8002534 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	4a70      	ldr	r2, [pc, #448]	; (80026a8 <PCD_EP_OutXfrComplete_int+0x208>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d90e      	bls.n	8002508 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d009      	beq.n	8002508 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	015a      	lsls	r2, r3, #5
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002500:	461a      	mov	r2, r3
 8002502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002506:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f004 ffdf 	bl	80074cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002518:	461a      	mov	r2, r3
 800251a:	2101      	movs	r1, #1
 800251c:	f002 fdc8 	bl	80050b0 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	015a      	lsls	r2, r3, #5
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4413      	add	r3, r2
 8002528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800252c:	461a      	mov	r2, r3
 800252e:	2308      	movs	r3, #8
 8002530:	6093      	str	r3, [r2, #8]
 8002532:	e0b3      	b.n	800269c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f003 0320 	and.w	r3, r3, #32
 800253a:	2b00      	cmp	r3, #0
 800253c:	d009      	beq.n	8002552 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	015a      	lsls	r2, r3, #5
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4413      	add	r3, r2
 8002546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800254a:	461a      	mov	r2, r3
 800254c:	2320      	movs	r3, #32
 800254e:	6093      	str	r3, [r2, #8]
 8002550:	e0a4      	b.n	800269c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002558:	2b00      	cmp	r3, #0
 800255a:	f040 809f 	bne.w	800269c <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4a51      	ldr	r2, [pc, #324]	; (80026a8 <PCD_EP_OutXfrComplete_int+0x208>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d90f      	bls.n	8002586 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00a      	beq.n	8002586 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	015a      	lsls	r2, r3, #5
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4413      	add	r3, r2
 8002578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800257c:	461a      	mov	r2, r3
 800257e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002582:	6093      	str	r3, [r2, #8]
 8002584:	e08a      	b.n	800269c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	4613      	mov	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	1a9b      	subs	r3, r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	440b      	add	r3, r1
 8002594:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002598:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	0159      	lsls	r1, r3, #5
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	440b      	add	r3, r1
 80025a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80025ac:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	4613      	mov	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	1a9b      	subs	r3, r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4403      	add	r3, r0
 80025bc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80025c0:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	1a9b      	subs	r3, r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	440b      	add	r3, r1
 80025d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025d4:	6819      	ldr	r1, [r3, #0]
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	1a9b      	subs	r3, r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4403      	add	r3, r0
 80025e4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4419      	add	r1, r3
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	4613      	mov	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	1a9b      	subs	r3, r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4403      	add	r3, r0
 80025fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025fe:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	4619      	mov	r1, r3
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f004 ff72 	bl	80074f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d144      	bne.n	800269c <PCD_EP_OutXfrComplete_int+0x1fc>
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	4613      	mov	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	1a9b      	subs	r3, r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d138      	bne.n	800269c <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002634:	461a      	mov	r2, r3
 8002636:	2101      	movs	r1, #1
 8002638:	f002 fd3a 	bl	80050b0 <USB_EP0_OutStart>
 800263c:	e02e      	b.n	800269c <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4a1a      	ldr	r2, [pc, #104]	; (80026ac <PCD_EP_OutXfrComplete_int+0x20c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d124      	bne.n	8002690 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00a      	beq.n	8002666 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4413      	add	r3, r2
 8002658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800265c:	461a      	mov	r2, r3
 800265e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002662:	6093      	str	r3, [r2, #8]
 8002664:	e01a      	b.n	800269c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	f003 0320 	and.w	r3, r3, #32
 800266c:	2b00      	cmp	r3, #0
 800266e:	d008      	beq.n	8002682 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4413      	add	r3, r2
 8002678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800267c:	461a      	mov	r2, r3
 800267e:	2320      	movs	r3, #32
 8002680:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	4619      	mov	r1, r3
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f004 ff31 	bl	80074f0 <HAL_PCD_DataOutStageCallback>
 800268e:	e005      	b.n	800269c <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	b2db      	uxtb	r3, r3
 8002694:	4619      	mov	r1, r3
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f004 ff2a 	bl	80074f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	4f54300a 	.word	0x4f54300a
 80026ac:	4f54310a 	.word	0x4f54310a

080026b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	333c      	adds	r3, #60	; 0x3c
 80026c8:	3304      	adds	r3, #4
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	015a      	lsls	r2, r3, #5
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4413      	add	r3, r2
 80026d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d113      	bne.n	800270e <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4a1f      	ldr	r2, [pc, #124]	; (8002768 <PCD_EP_OutSetupPacket_int+0xb8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d922      	bls.n	8002734 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d01d      	beq.n	8002734 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002704:	461a      	mov	r2, r3
 8002706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800270a:	6093      	str	r3, [r2, #8]
 800270c:	e012      	b.n	8002734 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4a16      	ldr	r2, [pc, #88]	; (800276c <PCD_EP_OutSetupPacket_int+0xbc>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d10e      	bne.n	8002734 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800271c:	2b00      	cmp	r3, #0
 800271e:	d009      	beq.n	8002734 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4413      	add	r3, r2
 8002728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800272c:	461a      	mov	r2, r3
 800272e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002732:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f004 fec9 	bl	80074cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <PCD_EP_OutSetupPacket_int+0xb8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d90c      	bls.n	800275c <PCD_EP_OutSetupPacket_int+0xac>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d108      	bne.n	800275c <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002754:	461a      	mov	r2, r3
 8002756:	2101      	movs	r1, #1
 8002758:	f002 fcaa 	bl	80050b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	4f54300a 	.word	0x4f54300a
 800276c:	4f54310a 	.word	0x4f54310a

08002770 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	70fb      	strb	r3, [r7, #3]
 800277c:	4613      	mov	r3, r2
 800277e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002788:	78fb      	ldrb	r3, [r7, #3]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d107      	bne.n	800279e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800278e:	883b      	ldrh	r3, [r7, #0]
 8002790:	0419      	lsls	r1, r3, #16
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	430a      	orrs	r2, r1
 800279a:	629a      	str	r2, [r3, #40]	; 0x28
 800279c:	e028      	b.n	80027f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a4:	0c1b      	lsrs	r3, r3, #16
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	4413      	add	r3, r2
 80027aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80027ac:	2300      	movs	r3, #0
 80027ae:	73fb      	strb	r3, [r7, #15]
 80027b0:	e00d      	b.n	80027ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	7bfb      	ldrb	r3, [r7, #15]
 80027b8:	3340      	adds	r3, #64	; 0x40
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	0c1b      	lsrs	r3, r3, #16
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	4413      	add	r3, r2
 80027c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	3301      	adds	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
 80027ce:	7bfa      	ldrb	r2, [r7, #15]
 80027d0:	78fb      	ldrb	r3, [r7, #3]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d3ec      	bcc.n	80027b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80027d8:	883b      	ldrh	r3, [r7, #0]
 80027da:	0418      	lsls	r0, r3, #16
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6819      	ldr	r1, [r3, #0]
 80027e0:	78fb      	ldrb	r3, [r7, #3]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	4302      	orrs	r2, r0
 80027e8:	3340      	adds	r3, #64	; 0x40
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	460b      	mov	r3, r1
 8002808:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	887a      	ldrh	r2, [r7, #2]
 8002810:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e22d      	b.n	8002ca6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d075      	beq.n	8002942 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002856:	4ba3      	ldr	r3, [pc, #652]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 030c 	and.w	r3, r3, #12
 800285e:	2b04      	cmp	r3, #4
 8002860:	d00c      	beq.n	800287c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002862:	4ba0      	ldr	r3, [pc, #640]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800286a:	2b08      	cmp	r3, #8
 800286c:	d112      	bne.n	8002894 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800286e:	4b9d      	ldr	r3, [pc, #628]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002876:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800287a:	d10b      	bne.n	8002894 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800287c:	4b99      	ldr	r3, [pc, #612]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d05b      	beq.n	8002940 <HAL_RCC_OscConfig+0x108>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d157      	bne.n	8002940 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e208      	b.n	8002ca6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800289c:	d106      	bne.n	80028ac <HAL_RCC_OscConfig+0x74>
 800289e:	4b91      	ldr	r3, [pc, #580]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a90      	ldr	r2, [pc, #576]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 80028a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	e01d      	b.n	80028e8 <HAL_RCC_OscConfig+0xb0>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCC_OscConfig+0x98>
 80028b6:	4b8b      	ldr	r3, [pc, #556]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a8a      	ldr	r2, [pc, #552]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 80028bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	4b88      	ldr	r3, [pc, #544]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a87      	ldr	r2, [pc, #540]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 80028c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	e00b      	b.n	80028e8 <HAL_RCC_OscConfig+0xb0>
 80028d0:	4b84      	ldr	r3, [pc, #528]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a83      	ldr	r2, [pc, #524]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 80028d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	4b81      	ldr	r3, [pc, #516]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a80      	ldr	r2, [pc, #512]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 80028e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d013      	beq.n	8002918 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f0:	f7fd fe6a 	bl	80005c8 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028f8:	f7fd fe66 	bl	80005c8 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b64      	cmp	r3, #100	; 0x64
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e1cd      	b.n	8002ca6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290a:	4b76      	ldr	r3, [pc, #472]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0xc0>
 8002916:	e014      	b.n	8002942 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002918:	f7fd fe56 	bl	80005c8 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002920:	f7fd fe52 	bl	80005c8 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b64      	cmp	r3, #100	; 0x64
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e1b9      	b.n	8002ca6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002932:	4b6c      	ldr	r3, [pc, #432]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0xe8>
 800293e:	e000      	b.n	8002942 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d063      	beq.n	8002a16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800294e:	4b65      	ldr	r3, [pc, #404]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 030c 	and.w	r3, r3, #12
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00b      	beq.n	8002972 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800295a:	4b62      	ldr	r3, [pc, #392]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002962:	2b08      	cmp	r3, #8
 8002964:	d11c      	bne.n	80029a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002966:	4b5f      	ldr	r3, [pc, #380]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d116      	bne.n	80029a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002972:	4b5c      	ldr	r3, [pc, #368]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d005      	beq.n	800298a <HAL_RCC_OscConfig+0x152>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d001      	beq.n	800298a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e18d      	b.n	8002ca6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298a:	4b56      	ldr	r3, [pc, #344]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4952      	ldr	r1, [pc, #328]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 800299a:	4313      	orrs	r3, r2
 800299c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800299e:	e03a      	b.n	8002a16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d020      	beq.n	80029ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029a8:	4b4f      	ldr	r3, [pc, #316]	; (8002ae8 <HAL_RCC_OscConfig+0x2b0>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ae:	f7fd fe0b 	bl	80005c8 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029b6:	f7fd fe07 	bl	80005c8 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e16e      	b.n	8002ca6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c8:	4b46      	ldr	r3, [pc, #280]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d4:	4b43      	ldr	r3, [pc, #268]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4940      	ldr	r1, [pc, #256]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	600b      	str	r3, [r1, #0]
 80029e8:	e015      	b.n	8002a16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ea:	4b3f      	ldr	r3, [pc, #252]	; (8002ae8 <HAL_RCC_OscConfig+0x2b0>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f0:	f7fd fdea 	bl	80005c8 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029f8:	f7fd fde6 	bl	80005c8 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e14d      	b.n	8002ca6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0a:	4b36      	ldr	r3, [pc, #216]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1f0      	bne.n	80029f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d030      	beq.n	8002a84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d016      	beq.n	8002a58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a2a:	4b30      	ldr	r3, [pc, #192]	; (8002aec <HAL_RCC_OscConfig+0x2b4>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a30:	f7fd fdca 	bl	80005c8 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a38:	f7fd fdc6 	bl	80005c8 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e12d      	b.n	8002ca6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4a:	4b26      	ldr	r3, [pc, #152]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 8002a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0f0      	beq.n	8002a38 <HAL_RCC_OscConfig+0x200>
 8002a56:	e015      	b.n	8002a84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a58:	4b24      	ldr	r3, [pc, #144]	; (8002aec <HAL_RCC_OscConfig+0x2b4>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a5e:	f7fd fdb3 	bl	80005c8 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a66:	f7fd fdaf 	bl	80005c8 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e116      	b.n	8002ca6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a78:	4b1a      	ldr	r3, [pc, #104]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 8002a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1f0      	bne.n	8002a66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 80a0 	beq.w	8002bd2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a92:	2300      	movs	r3, #0
 8002a94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a96:	4b13      	ldr	r3, [pc, #76]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10f      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	4b0f      	ldr	r3, [pc, #60]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	4a0e      	ldr	r2, [pc, #56]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 8002aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab2:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <HAL_RCC_OscConfig+0x2ac>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <HAL_RCC_OscConfig+0x2b8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d121      	bne.n	8002b12 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ace:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <HAL_RCC_OscConfig+0x2b8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a07      	ldr	r2, [pc, #28]	; (8002af0 <HAL_RCC_OscConfig+0x2b8>)
 8002ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ada:	f7fd fd75 	bl	80005c8 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae0:	e011      	b.n	8002b06 <HAL_RCC_OscConfig+0x2ce>
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	42470000 	.word	0x42470000
 8002aec:	42470e80 	.word	0x42470e80
 8002af0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af4:	f7fd fd68 	bl	80005c8 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e0cf      	b.n	8002ca6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b06:	4b6a      	ldr	r3, [pc, #424]	; (8002cb0 <HAL_RCC_OscConfig+0x478>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f0      	beq.n	8002af4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d106      	bne.n	8002b28 <HAL_RCC_OscConfig+0x2f0>
 8002b1a:	4b66      	ldr	r3, [pc, #408]	; (8002cb4 <HAL_RCC_OscConfig+0x47c>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1e:	4a65      	ldr	r2, [pc, #404]	; (8002cb4 <HAL_RCC_OscConfig+0x47c>)
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	6713      	str	r3, [r2, #112]	; 0x70
 8002b26:	e01c      	b.n	8002b62 <HAL_RCC_OscConfig+0x32a>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2b05      	cmp	r3, #5
 8002b2e:	d10c      	bne.n	8002b4a <HAL_RCC_OscConfig+0x312>
 8002b30:	4b60      	ldr	r3, [pc, #384]	; (8002cb4 <HAL_RCC_OscConfig+0x47c>)
 8002b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b34:	4a5f      	ldr	r2, [pc, #380]	; (8002cb4 <HAL_RCC_OscConfig+0x47c>)
 8002b36:	f043 0304 	orr.w	r3, r3, #4
 8002b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3c:	4b5d      	ldr	r3, [pc, #372]	; (8002cb4 <HAL_RCC_OscConfig+0x47c>)
 8002b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b40:	4a5c      	ldr	r2, [pc, #368]	; (8002cb4 <HAL_RCC_OscConfig+0x47c>)
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	6713      	str	r3, [r2, #112]	; 0x70
 8002b48:	e00b      	b.n	8002b62 <HAL_RCC_OscConfig+0x32a>
 8002b4a:	4b5a      	ldr	r3, [pc, #360]	; (8002cb4 <HAL_RCC_OscConfig+0x47c>)
 8002b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4e:	4a59      	ldr	r2, [pc, #356]	; (8002cb4 <HAL_RCC_OscConfig+0x47c>)
 8002b50:	f023 0301 	bic.w	r3, r3, #1
 8002b54:	6713      	str	r3, [r2, #112]	; 0x70
 8002b56:	4b57      	ldr	r3, [pc, #348]	; (8002cb4 <HAL_RCC_OscConfig+0x47c>)
 8002b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5a:	4a56      	ldr	r2, [pc, #344]	; (8002cb4 <HAL_RCC_OscConfig+0x47c>)
 8002b5c:	f023 0304 	bic.w	r3, r3, #4
 8002b60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d015      	beq.n	8002b96 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6a:	f7fd fd2d 	bl	80005c8 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b70:	e00a      	b.n	8002b88 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b72:	f7fd fd29 	bl	80005c8 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e08e      	b.n	8002ca6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b88:	4b4a      	ldr	r3, [pc, #296]	; (8002cb4 <HAL_RCC_OscConfig+0x47c>)
 8002b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0ee      	beq.n	8002b72 <HAL_RCC_OscConfig+0x33a>
 8002b94:	e014      	b.n	8002bc0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b96:	f7fd fd17 	bl	80005c8 <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b9c:	e00a      	b.n	8002bb4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b9e:	f7fd fd13 	bl	80005c8 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e078      	b.n	8002ca6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb4:	4b3f      	ldr	r3, [pc, #252]	; (8002cb4 <HAL_RCC_OscConfig+0x47c>)
 8002bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1ee      	bne.n	8002b9e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bc0:	7dfb      	ldrb	r3, [r7, #23]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d105      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc6:	4b3b      	ldr	r3, [pc, #236]	; (8002cb4 <HAL_RCC_OscConfig+0x47c>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	4a3a      	ldr	r2, [pc, #232]	; (8002cb4 <HAL_RCC_OscConfig+0x47c>)
 8002bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bd0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d064      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bda:	4b36      	ldr	r3, [pc, #216]	; (8002cb4 <HAL_RCC_OscConfig+0x47c>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 030c 	and.w	r3, r3, #12
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d05c      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d141      	bne.n	8002c72 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bee:	4b32      	ldr	r3, [pc, #200]	; (8002cb8 <HAL_RCC_OscConfig+0x480>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7fd fce8 	bl	80005c8 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bfc:	f7fd fce4 	bl	80005c8 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e04b      	b.n	8002ca6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c0e:	4b29      	ldr	r3, [pc, #164]	; (8002cb4 <HAL_RCC_OscConfig+0x47c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f0      	bne.n	8002bfc <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69da      	ldr	r2, [r3, #28]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	019b      	lsls	r3, r3, #6
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c30:	085b      	lsrs	r3, r3, #1
 8002c32:	3b01      	subs	r3, #1
 8002c34:	041b      	lsls	r3, r3, #16
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	061b      	lsls	r3, r3, #24
 8002c3e:	491d      	ldr	r1, [pc, #116]	; (8002cb4 <HAL_RCC_OscConfig+0x47c>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c44:	4b1c      	ldr	r3, [pc, #112]	; (8002cb8 <HAL_RCC_OscConfig+0x480>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4a:	f7fd fcbd 	bl	80005c8 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c52:	f7fd fcb9 	bl	80005c8 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e020      	b.n	8002ca6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c64:	4b13      	ldr	r3, [pc, #76]	; (8002cb4 <HAL_RCC_OscConfig+0x47c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0x41a>
 8002c70:	e018      	b.n	8002ca4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c72:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <HAL_RCC_OscConfig+0x480>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7fd fca6 	bl	80005c8 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c80:	f7fd fca2 	bl	80005c8 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e009      	b.n	8002ca6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c92:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <HAL_RCC_OscConfig+0x47c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x448>
 8002c9e:	e001      	b.n	8002ca4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e000      	b.n	8002ca6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40007000 	.word	0x40007000
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	42470060 	.word	0x42470060

08002cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e0ca      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd0:	4b67      	ldr	r3, [pc, #412]	; (8002e70 <HAL_RCC_ClockConfig+0x1b4>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 030f 	and.w	r3, r3, #15
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d90c      	bls.n	8002cf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cde:	4b64      	ldr	r3, [pc, #400]	; (8002e70 <HAL_RCC_ClockConfig+0x1b4>)
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce6:	4b62      	ldr	r3, [pc, #392]	; (8002e70 <HAL_RCC_ClockConfig+0x1b4>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d001      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e0b6      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d020      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d10:	4b58      	ldr	r3, [pc, #352]	; (8002e74 <HAL_RCC_ClockConfig+0x1b8>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	4a57      	ldr	r2, [pc, #348]	; (8002e74 <HAL_RCC_ClockConfig+0x1b8>)
 8002d16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d28:	4b52      	ldr	r3, [pc, #328]	; (8002e74 <HAL_RCC_ClockConfig+0x1b8>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	4a51      	ldr	r2, [pc, #324]	; (8002e74 <HAL_RCC_ClockConfig+0x1b8>)
 8002d2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d34:	4b4f      	ldr	r3, [pc, #316]	; (8002e74 <HAL_RCC_ClockConfig+0x1b8>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	494c      	ldr	r1, [pc, #304]	; (8002e74 <HAL_RCC_ClockConfig+0x1b8>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d044      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d107      	bne.n	8002d6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5a:	4b46      	ldr	r3, [pc, #280]	; (8002e74 <HAL_RCC_ClockConfig+0x1b8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d119      	bne.n	8002d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e07d      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d003      	beq.n	8002d7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d76:	2b03      	cmp	r3, #3
 8002d78:	d107      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d7a:	4b3e      	ldr	r3, [pc, #248]	; (8002e74 <HAL_RCC_ClockConfig+0x1b8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d109      	bne.n	8002d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e06d      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8a:	4b3a      	ldr	r3, [pc, #232]	; (8002e74 <HAL_RCC_ClockConfig+0x1b8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e065      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d9a:	4b36      	ldr	r3, [pc, #216]	; (8002e74 <HAL_RCC_ClockConfig+0x1b8>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f023 0203 	bic.w	r2, r3, #3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	4933      	ldr	r1, [pc, #204]	; (8002e74 <HAL_RCC_ClockConfig+0x1b8>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dac:	f7fd fc0c 	bl	80005c8 <HAL_GetTick>
 8002db0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db2:	e00a      	b.n	8002dca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db4:	f7fd fc08 	bl	80005c8 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e04d      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dca:	4b2a      	ldr	r3, [pc, #168]	; (8002e74 <HAL_RCC_ClockConfig+0x1b8>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 020c 	and.w	r2, r3, #12
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d1eb      	bne.n	8002db4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ddc:	4b24      	ldr	r3, [pc, #144]	; (8002e70 <HAL_RCC_ClockConfig+0x1b4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d20c      	bcs.n	8002e04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dea:	4b21      	ldr	r3, [pc, #132]	; (8002e70 <HAL_RCC_ClockConfig+0x1b4>)
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df2:	4b1f      	ldr	r3, [pc, #124]	; (8002e70 <HAL_RCC_ClockConfig+0x1b4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d001      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e030      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d008      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e10:	4b18      	ldr	r3, [pc, #96]	; (8002e74 <HAL_RCC_ClockConfig+0x1b8>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	4915      	ldr	r1, [pc, #84]	; (8002e74 <HAL_RCC_ClockConfig+0x1b8>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d009      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e2e:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <HAL_RCC_ClockConfig+0x1b8>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	490d      	ldr	r1, [pc, #52]	; (8002e74 <HAL_RCC_ClockConfig+0x1b8>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e42:	f000 f81d 	bl	8002e80 <HAL_RCC_GetSysClockFreq>
 8002e46:	4601      	mov	r1, r0
 8002e48:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <HAL_RCC_ClockConfig+0x1b8>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	091b      	lsrs	r3, r3, #4
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	4a09      	ldr	r2, [pc, #36]	; (8002e78 <HAL_RCC_ClockConfig+0x1bc>)
 8002e54:	5cd3      	ldrb	r3, [r2, r3]
 8002e56:	fa21 f303 	lsr.w	r3, r1, r3
 8002e5a:	4a08      	ldr	r2, [pc, #32]	; (8002e7c <HAL_RCC_ClockConfig+0x1c0>)
 8002e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002e5e:	2000      	movs	r0, #0
 8002e60:	f7fd fb6e 	bl	8000540 <HAL_InitTick>

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40023c00 	.word	0x40023c00
 8002e74:	40023800 	.word	0x40023800
 8002e78:	08007f5c 	.word	0x08007f5c
 8002e7c:	20000118 	.word	0x20000118

08002e80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	607b      	str	r3, [r7, #4]
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	2300      	movs	r3, #0
 8002e90:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e96:	4b63      	ldr	r3, [pc, #396]	; (8003024 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d007      	beq.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x32>
 8002ea2:	2b08      	cmp	r3, #8
 8002ea4:	d008      	beq.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x38>
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f040 80b4 	bne.w	8003014 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002eac:	4b5e      	ldr	r3, [pc, #376]	; (8003028 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002eae:	60bb      	str	r3, [r7, #8]
       break;
 8002eb0:	e0b3      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eb2:	4b5e      	ldr	r3, [pc, #376]	; (800302c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002eb4:	60bb      	str	r3, [r7, #8]
      break;
 8002eb6:	e0b0      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb8:	4b5a      	ldr	r3, [pc, #360]	; (8003024 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ec0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ec2:	4b58      	ldr	r3, [pc, #352]	; (8003024 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d04a      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ece:	4b55      	ldr	r3, [pc, #340]	; (8003024 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	099b      	lsrs	r3, r3, #6
 8002ed4:	f04f 0400 	mov.w	r4, #0
 8002ed8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	ea03 0501 	and.w	r5, r3, r1
 8002ee4:	ea04 0602 	and.w	r6, r4, r2
 8002ee8:	4629      	mov	r1, r5
 8002eea:	4632      	mov	r2, r6
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	f04f 0400 	mov.w	r4, #0
 8002ef4:	0154      	lsls	r4, r2, #5
 8002ef6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002efa:	014b      	lsls	r3, r1, #5
 8002efc:	4619      	mov	r1, r3
 8002efe:	4622      	mov	r2, r4
 8002f00:	1b49      	subs	r1, r1, r5
 8002f02:	eb62 0206 	sbc.w	r2, r2, r6
 8002f06:	f04f 0300 	mov.w	r3, #0
 8002f0a:	f04f 0400 	mov.w	r4, #0
 8002f0e:	0194      	lsls	r4, r2, #6
 8002f10:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f14:	018b      	lsls	r3, r1, #6
 8002f16:	1a5b      	subs	r3, r3, r1
 8002f18:	eb64 0402 	sbc.w	r4, r4, r2
 8002f1c:	f04f 0100 	mov.w	r1, #0
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	00e2      	lsls	r2, r4, #3
 8002f26:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f2a:	00d9      	lsls	r1, r3, #3
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4614      	mov	r4, r2
 8002f30:	195b      	adds	r3, r3, r5
 8002f32:	eb44 0406 	adc.w	r4, r4, r6
 8002f36:	f04f 0100 	mov.w	r1, #0
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	0262      	lsls	r2, r4, #9
 8002f40:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002f44:	0259      	lsls	r1, r3, #9
 8002f46:	460b      	mov	r3, r1
 8002f48:	4614      	mov	r4, r2
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	4621      	mov	r1, r4
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f04f 0400 	mov.w	r4, #0
 8002f54:	461a      	mov	r2, r3
 8002f56:	4623      	mov	r3, r4
 8002f58:	f7fd f950 	bl	80001fc <__aeabi_uldivmod>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	460c      	mov	r4, r1
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	e049      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f64:	4b2f      	ldr	r3, [pc, #188]	; (8003024 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	099b      	lsrs	r3, r3, #6
 8002f6a:	f04f 0400 	mov.w	r4, #0
 8002f6e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	ea03 0501 	and.w	r5, r3, r1
 8002f7a:	ea04 0602 	and.w	r6, r4, r2
 8002f7e:	4629      	mov	r1, r5
 8002f80:	4632      	mov	r2, r6
 8002f82:	f04f 0300 	mov.w	r3, #0
 8002f86:	f04f 0400 	mov.w	r4, #0
 8002f8a:	0154      	lsls	r4, r2, #5
 8002f8c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f90:	014b      	lsls	r3, r1, #5
 8002f92:	4619      	mov	r1, r3
 8002f94:	4622      	mov	r2, r4
 8002f96:	1b49      	subs	r1, r1, r5
 8002f98:	eb62 0206 	sbc.w	r2, r2, r6
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	f04f 0400 	mov.w	r4, #0
 8002fa4:	0194      	lsls	r4, r2, #6
 8002fa6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002faa:	018b      	lsls	r3, r1, #6
 8002fac:	1a5b      	subs	r3, r3, r1
 8002fae:	eb64 0402 	sbc.w	r4, r4, r2
 8002fb2:	f04f 0100 	mov.w	r1, #0
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	00e2      	lsls	r2, r4, #3
 8002fbc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002fc0:	00d9      	lsls	r1, r3, #3
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4614      	mov	r4, r2
 8002fc6:	195b      	adds	r3, r3, r5
 8002fc8:	eb44 0406 	adc.w	r4, r4, r6
 8002fcc:	f04f 0100 	mov.w	r1, #0
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	02a2      	lsls	r2, r4, #10
 8002fd6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002fda:	0299      	lsls	r1, r3, #10
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4614      	mov	r4, r2
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	4621      	mov	r1, r4
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f04f 0400 	mov.w	r4, #0
 8002fea:	461a      	mov	r2, r3
 8002fec:	4623      	mov	r3, r4
 8002fee:	f7fd f905 	bl	80001fc <__aeabi_uldivmod>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	460c      	mov	r4, r1
 8002ff6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ff8:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	0c1b      	lsrs	r3, r3, #16
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	3301      	adds	r3, #1
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003010:	60bb      	str	r3, [r7, #8]
      break;
 8003012:	e002      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003014:	4b04      	ldr	r3, [pc, #16]	; (8003028 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003016:	60bb      	str	r3, [r7, #8]
      break;
 8003018:	bf00      	nop
    }
  }
  return sysclockfreq;
 800301a:	68bb      	ldr	r3, [r7, #8]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003024:	40023800 	.word	0x40023800
 8003028:	00f42400 	.word	0x00f42400
 800302c:	007a1200 	.word	0x007a1200

08003030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003034:	4b03      	ldr	r3, [pc, #12]	; (8003044 <HAL_RCC_GetHCLKFreq+0x14>)
 8003036:	681b      	ldr	r3, [r3, #0]
}
 8003038:	4618      	mov	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	20000118 	.word	0x20000118

08003048 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800304c:	f7ff fff0 	bl	8003030 <HAL_RCC_GetHCLKFreq>
 8003050:	4601      	mov	r1, r0
 8003052:	4b05      	ldr	r3, [pc, #20]	; (8003068 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	0a9b      	lsrs	r3, r3, #10
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	4a03      	ldr	r2, [pc, #12]	; (800306c <HAL_RCC_GetPCLK1Freq+0x24>)
 800305e:	5cd3      	ldrb	r3, [r2, r3]
 8003060:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003064:	4618      	mov	r0, r3
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40023800 	.word	0x40023800
 800306c:	08007f6c 	.word	0x08007f6c

08003070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003074:	f7ff ffdc 	bl	8003030 <HAL_RCC_GetHCLKFreq>
 8003078:	4601      	mov	r1, r0
 800307a:	4b05      	ldr	r3, [pc, #20]	; (8003090 <HAL_RCC_GetPCLK2Freq+0x20>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	0b5b      	lsrs	r3, r3, #13
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	4a03      	ldr	r2, [pc, #12]	; (8003094 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003086:	5cd3      	ldrb	r3, [r2, r3]
 8003088:	fa21 f303 	lsr.w	r3, r1, r3
}
 800308c:	4618      	mov	r0, r3
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40023800 	.word	0x40023800
 8003094:	08007f6c 	.word	0x08007f6c

08003098 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e03f      	b.n	800312a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d106      	bne.n	80030c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f003 ffe2 	bl	8007088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2224      	movs	r2, #36	; 0x24
 80030c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 fb93 	bl	8003808 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695a      	ldr	r2, [r3, #20]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003100:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003110:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b088      	sub	sp, #32
 8003136:	af02      	add	r7, sp, #8
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	603b      	str	r3, [r7, #0]
 800313e:	4613      	mov	r3, r2
 8003140:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b20      	cmp	r3, #32
 8003150:	f040 8083 	bne.w	800325a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d002      	beq.n	8003160 <HAL_UART_Transmit+0x2e>
 800315a:	88fb      	ldrh	r3, [r7, #6]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e07b      	b.n	800325c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <HAL_UART_Transmit+0x40>
 800316e:	2302      	movs	r3, #2
 8003170:	e074      	b.n	800325c <HAL_UART_Transmit+0x12a>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2221      	movs	r2, #33	; 0x21
 8003184:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003188:	f7fd fa1e 	bl	80005c8 <HAL_GetTick>
 800318c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	88fa      	ldrh	r2, [r7, #6]
 8003192:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	88fa      	ldrh	r2, [r7, #6]
 8003198:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800319a:	e042      	b.n	8003222 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b2:	d122      	bne.n	80031fa <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	2200      	movs	r2, #0
 80031bc:	2180      	movs	r1, #128	; 0x80
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 f9b6 	bl	8003530 <UART_WaitOnFlagUntilTimeout>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e046      	b.n	800325c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	461a      	mov	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031e0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d103      	bne.n	80031f2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	3302      	adds	r3, #2
 80031ee:	60bb      	str	r3, [r7, #8]
 80031f0:	e017      	b.n	8003222 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	3301      	adds	r3, #1
 80031f6:	60bb      	str	r3, [r7, #8]
 80031f8:	e013      	b.n	8003222 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2200      	movs	r2, #0
 8003202:	2180      	movs	r1, #128	; 0x80
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 f993 	bl	8003530 <UART_WaitOnFlagUntilTimeout>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e023      	b.n	800325c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	1c5a      	adds	r2, r3, #1
 8003218:	60ba      	str	r2, [r7, #8]
 800321a:	781a      	ldrb	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003226:	b29b      	uxth	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1b7      	bne.n	800319c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2200      	movs	r2, #0
 8003234:	2140      	movs	r1, #64	; 0x40
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 f97a 	bl	8003530 <UART_WaitOnFlagUntilTimeout>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e00a      	b.n	800325c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003256:	2300      	movs	r3, #0
 8003258:	e000      	b.n	800325c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800325a:	2302      	movs	r3, #2
  }
}
 800325c:	4618      	mov	r0, r3
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	4613      	mov	r3, r2
 8003270:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b20      	cmp	r3, #32
 800327c:	d140      	bne.n	8003300 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <HAL_UART_Receive_IT+0x26>
 8003284:	88fb      	ldrh	r3, [r7, #6]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e039      	b.n	8003302 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_UART_Receive_IT+0x38>
 8003298:	2302      	movs	r3, #2
 800329a:	e032      	b.n	8003302 <HAL_UART_Receive_IT+0x9e>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	88fa      	ldrh	r2, [r7, #6]
 80032ae:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	88fa      	ldrh	r2, [r7, #6]
 80032b4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2222      	movs	r2, #34	; 0x22
 80032c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032da:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695a      	ldr	r2, [r3, #20]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0220 	orr.w	r2, r2, #32
 80032fa:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	e000      	b.n	8003302 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003300:	2302      	movs	r3, #2
  }
}
 8003302:	4618      	mov	r0, r3
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
	...

08003310 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003330:	2300      	movs	r3, #0
 8003332:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003334:	2300      	movs	r3, #0
 8003336:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10d      	bne.n	8003362 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	f003 0320 	and.w	r3, r3, #32
 800334c:	2b00      	cmp	r3, #0
 800334e:	d008      	beq.n	8003362 <HAL_UART_IRQHandler+0x52>
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	f003 0320 	and.w	r3, r3, #32
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f9d2 	bl	8003704 <UART_Receive_IT>
      return;
 8003360:	e0cc      	b.n	80034fc <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 80ab 	beq.w	80034c0 <HAL_UART_IRQHandler+0x1b0>
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b00      	cmp	r3, #0
 8003372:	d105      	bne.n	8003380 <HAL_UART_IRQHandler+0x70>
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 80a0 	beq.w	80034c0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <HAL_UART_IRQHandler+0x90>
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003398:	f043 0201 	orr.w	r2, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f003 0304 	and.w	r3, r3, #4
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00a      	beq.n	80033c0 <HAL_UART_IRQHandler+0xb0>
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b8:	f043 0202 	orr.w	r2, r3, #2
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <HAL_UART_IRQHandler+0xd0>
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d8:	f043 0204 	orr.w	r2, r3, #4
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00a      	beq.n	8003400 <HAL_UART_IRQHandler+0xf0>
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f8:	f043 0208 	orr.w	r2, r3, #8
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003404:	2b00      	cmp	r3, #0
 8003406:	d078      	beq.n	80034fa <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f003 0320 	and.w	r3, r3, #32
 800340e:	2b00      	cmp	r3, #0
 8003410:	d007      	beq.n	8003422 <HAL_UART_IRQHandler+0x112>
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	f003 0320 	and.w	r3, r3, #32
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f971 	bl	8003704 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342c:	2b40      	cmp	r3, #64	; 0x40
 800342e:	bf0c      	ite	eq
 8003430:	2301      	moveq	r3, #1
 8003432:	2300      	movne	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343c:	f003 0308 	and.w	r3, r3, #8
 8003440:	2b00      	cmp	r3, #0
 8003442:	d102      	bne.n	800344a <HAL_UART_IRQHandler+0x13a>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d031      	beq.n	80034ae <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f8ba 	bl	80035c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345a:	2b40      	cmp	r3, #64	; 0x40
 800345c:	d123      	bne.n	80034a6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695a      	ldr	r2, [r3, #20]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800346c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003472:	2b00      	cmp	r3, #0
 8003474:	d013      	beq.n	800349e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800347a:	4a22      	ldr	r2, [pc, #136]	; (8003504 <HAL_UART_IRQHandler+0x1f4>)
 800347c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003482:	4618      	mov	r0, r3
 8003484:	f7fd f9df 	bl	8000846 <HAL_DMA_Abort_IT>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d016      	beq.n	80034bc <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003498:	4610      	mov	r0, r2
 800349a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800349c:	e00e      	b.n	80034bc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f83c 	bl	800351c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a4:	e00a      	b.n	80034bc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f838 	bl	800351c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ac:	e006      	b.n	80034bc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f834 	bl	800351c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80034ba:	e01e      	b.n	80034fa <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034bc:	bf00      	nop
    return;
 80034be:	e01c      	b.n	80034fa <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d008      	beq.n	80034dc <HAL_UART_IRQHandler+0x1cc>
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f8a7 	bl	8003628 <UART_Transmit_IT>
    return;
 80034da:	e00f      	b.n	80034fc <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HAL_UART_IRQHandler+0x1ec>
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f8ef 	bl	80036d4 <UART_EndTransmit_IT>
    return;
 80034f6:	bf00      	nop
 80034f8:	e000      	b.n	80034fc <HAL_UART_IRQHandler+0x1ec>
    return;
 80034fa:	bf00      	nop
  }
}
 80034fc:	3720      	adds	r7, #32
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	08003601 	.word	0x08003601

08003508 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	4613      	mov	r3, r2
 800353e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003540:	e02c      	b.n	800359c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003548:	d028      	beq.n	800359c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d007      	beq.n	8003560 <UART_WaitOnFlagUntilTimeout+0x30>
 8003550:	f7fd f83a 	bl	80005c8 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	429a      	cmp	r2, r3
 800355e:	d21d      	bcs.n	800359c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800356e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695a      	ldr	r2, [r3, #20]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0201 	bic.w	r2, r2, #1
 800357e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2220      	movs	r2, #32
 8003584:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e00f      	b.n	80035bc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	4013      	ands	r3, r2
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	bf0c      	ite	eq
 80035ac:	2301      	moveq	r3, #1
 80035ae:	2300      	movne	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	461a      	mov	r2, r3
 80035b4:	79fb      	ldrb	r3, [r7, #7]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d0c3      	beq.n	8003542 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80035da:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695a      	ldr	r2, [r3, #20]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0201 	bic.w	r2, r2, #1
 80035ea:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f7ff ff7e 	bl	800351c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003620:	bf00      	nop
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b21      	cmp	r3, #33	; 0x21
 800363a:	d144      	bne.n	80036c6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003644:	d11a      	bne.n	800367c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	461a      	mov	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800365a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d105      	bne.n	8003670 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	1c9a      	adds	r2, r3, #2
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	621a      	str	r2, [r3, #32]
 800366e:	e00e      	b.n	800368e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	621a      	str	r2, [r3, #32]
 800367a:	e008      	b.n	800368e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	1c59      	adds	r1, r3, #1
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6211      	str	r1, [r2, #32]
 8003686:	781a      	ldrb	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003692:	b29b      	uxth	r3, r3
 8003694:	3b01      	subs	r3, #1
 8003696:	b29b      	uxth	r3, r3
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	4619      	mov	r1, r3
 800369c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10f      	bne.n	80036c2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	e000      	b.n	80036c8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80036c6:	2302      	movs	r3, #2
  }
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7ff ff07 	bl	8003508 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b22      	cmp	r3, #34	; 0x22
 8003716:	d171      	bne.n	80037fc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003720:	d123      	bne.n	800376a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003726:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10e      	bne.n	800374e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	b29b      	uxth	r3, r3
 8003738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800373c:	b29a      	uxth	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003746:	1c9a      	adds	r2, r3, #2
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	629a      	str	r2, [r3, #40]	; 0x28
 800374c:	e029      	b.n	80037a2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	b29b      	uxth	r3, r3
 8003756:	b2db      	uxtb	r3, r3
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	629a      	str	r2, [r3, #40]	; 0x28
 8003768:	e01b      	b.n	80037a2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10a      	bne.n	8003788 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6858      	ldr	r0, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377c:	1c59      	adds	r1, r3, #1
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6291      	str	r1, [r2, #40]	; 0x28
 8003782:	b2c2      	uxtb	r2, r0
 8003784:	701a      	strb	r2, [r3, #0]
 8003786:	e00c      	b.n	80037a2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	b2da      	uxtb	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003794:	1c58      	adds	r0, r3, #1
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	6288      	str	r0, [r1, #40]	; 0x28
 800379a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	4619      	mov	r1, r3
 80037b0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d120      	bne.n	80037f8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0220 	bic.w	r2, r2, #32
 80037c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695a      	ldr	r2, [r3, #20]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0201 	bic.w	r2, r2, #1
 80037e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2220      	movs	r2, #32
 80037ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f003 f9e0 	bl	8006bb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80037f4:	2300      	movs	r3, #0
 80037f6:	e002      	b.n	80037fe <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80037f8:	2300      	movs	r3, #0
 80037fa:	e000      	b.n	80037fe <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80037fc:	2302      	movs	r3, #2
  }
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
	...

08003808 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003808:	b5b0      	push	{r4, r5, r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	431a      	orrs	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	4313      	orrs	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003848:	f023 030c 	bic.w	r3, r3, #12
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6812      	ldr	r2, [r2, #0]
 8003850:	68f9      	ldr	r1, [r7, #12]
 8003852:	430b      	orrs	r3, r1
 8003854:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699a      	ldr	r2, [r3, #24]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003874:	f040 80e4 	bne.w	8003a40 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4aab      	ldr	r2, [pc, #684]	; (8003b2c <UART_SetConfig+0x324>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d004      	beq.n	800388c <UART_SetConfig+0x84>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4aaa      	ldr	r2, [pc, #680]	; (8003b30 <UART_SetConfig+0x328>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d16c      	bne.n	8003966 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800388c:	f7ff fbf0 	bl	8003070 <HAL_RCC_GetPCLK2Freq>
 8003890:	4602      	mov	r2, r0
 8003892:	4613      	mov	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	009a      	lsls	r2, r3, #2
 800389a:	441a      	add	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a6:	4aa3      	ldr	r2, [pc, #652]	; (8003b34 <UART_SetConfig+0x32c>)
 80038a8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ac:	095b      	lsrs	r3, r3, #5
 80038ae:	011c      	lsls	r4, r3, #4
 80038b0:	f7ff fbde 	bl	8003070 <HAL_RCC_GetPCLK2Freq>
 80038b4:	4602      	mov	r2, r0
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	009a      	lsls	r2, r3, #2
 80038be:	441a      	add	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	fbb2 f5f3 	udiv	r5, r2, r3
 80038ca:	f7ff fbd1 	bl	8003070 <HAL_RCC_GetPCLK2Freq>
 80038ce:	4602      	mov	r2, r0
 80038d0:	4613      	mov	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	009a      	lsls	r2, r3, #2
 80038d8:	441a      	add	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e4:	4a93      	ldr	r2, [pc, #588]	; (8003b34 <UART_SetConfig+0x32c>)
 80038e6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ea:	095b      	lsrs	r3, r3, #5
 80038ec:	2264      	movs	r2, #100	; 0x64
 80038ee:	fb02 f303 	mul.w	r3, r2, r3
 80038f2:	1aeb      	subs	r3, r5, r3
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	3332      	adds	r3, #50	; 0x32
 80038f8:	4a8e      	ldr	r2, [pc, #568]	; (8003b34 <UART_SetConfig+0x32c>)
 80038fa:	fba2 2303 	umull	r2, r3, r2, r3
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003906:	441c      	add	r4, r3
 8003908:	f7ff fbb2 	bl	8003070 <HAL_RCC_GetPCLK2Freq>
 800390c:	4602      	mov	r2, r0
 800390e:	4613      	mov	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	009a      	lsls	r2, r3, #2
 8003916:	441a      	add	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	fbb2 f5f3 	udiv	r5, r2, r3
 8003922:	f7ff fba5 	bl	8003070 <HAL_RCC_GetPCLK2Freq>
 8003926:	4602      	mov	r2, r0
 8003928:	4613      	mov	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	009a      	lsls	r2, r3, #2
 8003930:	441a      	add	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	fbb2 f3f3 	udiv	r3, r2, r3
 800393c:	4a7d      	ldr	r2, [pc, #500]	; (8003b34 <UART_SetConfig+0x32c>)
 800393e:	fba2 2303 	umull	r2, r3, r2, r3
 8003942:	095b      	lsrs	r3, r3, #5
 8003944:	2264      	movs	r2, #100	; 0x64
 8003946:	fb02 f303 	mul.w	r3, r2, r3
 800394a:	1aeb      	subs	r3, r5, r3
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	3332      	adds	r3, #50	; 0x32
 8003950:	4a78      	ldr	r2, [pc, #480]	; (8003b34 <UART_SetConfig+0x32c>)
 8003952:	fba2 2303 	umull	r2, r3, r2, r3
 8003956:	095b      	lsrs	r3, r3, #5
 8003958:	f003 0207 	and.w	r2, r3, #7
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4422      	add	r2, r4
 8003962:	609a      	str	r2, [r3, #8]
 8003964:	e154      	b.n	8003c10 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003966:	f7ff fb6f 	bl	8003048 <HAL_RCC_GetPCLK1Freq>
 800396a:	4602      	mov	r2, r0
 800396c:	4613      	mov	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	009a      	lsls	r2, r3, #2
 8003974:	441a      	add	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003980:	4a6c      	ldr	r2, [pc, #432]	; (8003b34 <UART_SetConfig+0x32c>)
 8003982:	fba2 2303 	umull	r2, r3, r2, r3
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	011c      	lsls	r4, r3, #4
 800398a:	f7ff fb5d 	bl	8003048 <HAL_RCC_GetPCLK1Freq>
 800398e:	4602      	mov	r2, r0
 8003990:	4613      	mov	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	009a      	lsls	r2, r3, #2
 8003998:	441a      	add	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	fbb2 f5f3 	udiv	r5, r2, r3
 80039a4:	f7ff fb50 	bl	8003048 <HAL_RCC_GetPCLK1Freq>
 80039a8:	4602      	mov	r2, r0
 80039aa:	4613      	mov	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	009a      	lsls	r2, r3, #2
 80039b2:	441a      	add	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80039be:	4a5d      	ldr	r2, [pc, #372]	; (8003b34 <UART_SetConfig+0x32c>)
 80039c0:	fba2 2303 	umull	r2, r3, r2, r3
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	2264      	movs	r2, #100	; 0x64
 80039c8:	fb02 f303 	mul.w	r3, r2, r3
 80039cc:	1aeb      	subs	r3, r5, r3
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	3332      	adds	r3, #50	; 0x32
 80039d2:	4a58      	ldr	r2, [pc, #352]	; (8003b34 <UART_SetConfig+0x32c>)
 80039d4:	fba2 2303 	umull	r2, r3, r2, r3
 80039d8:	095b      	lsrs	r3, r3, #5
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039e0:	441c      	add	r4, r3
 80039e2:	f7ff fb31 	bl	8003048 <HAL_RCC_GetPCLK1Freq>
 80039e6:	4602      	mov	r2, r0
 80039e8:	4613      	mov	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	009a      	lsls	r2, r3, #2
 80039f0:	441a      	add	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	fbb2 f5f3 	udiv	r5, r2, r3
 80039fc:	f7ff fb24 	bl	8003048 <HAL_RCC_GetPCLK1Freq>
 8003a00:	4602      	mov	r2, r0
 8003a02:	4613      	mov	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	009a      	lsls	r2, r3, #2
 8003a0a:	441a      	add	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a16:	4a47      	ldr	r2, [pc, #284]	; (8003b34 <UART_SetConfig+0x32c>)
 8003a18:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1c:	095b      	lsrs	r3, r3, #5
 8003a1e:	2264      	movs	r2, #100	; 0x64
 8003a20:	fb02 f303 	mul.w	r3, r2, r3
 8003a24:	1aeb      	subs	r3, r5, r3
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	3332      	adds	r3, #50	; 0x32
 8003a2a:	4a42      	ldr	r2, [pc, #264]	; (8003b34 <UART_SetConfig+0x32c>)
 8003a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a30:	095b      	lsrs	r3, r3, #5
 8003a32:	f003 0207 	and.w	r2, r3, #7
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4422      	add	r2, r4
 8003a3c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8003a3e:	e0e7      	b.n	8003c10 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a39      	ldr	r2, [pc, #228]	; (8003b2c <UART_SetConfig+0x324>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d004      	beq.n	8003a54 <UART_SetConfig+0x24c>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a38      	ldr	r2, [pc, #224]	; (8003b30 <UART_SetConfig+0x328>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d171      	bne.n	8003b38 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003a54:	f7ff fb0c 	bl	8003070 <HAL_RCC_GetPCLK2Freq>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	009a      	lsls	r2, r3, #2
 8003a62:	441a      	add	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6e:	4a31      	ldr	r2, [pc, #196]	; (8003b34 <UART_SetConfig+0x32c>)
 8003a70:	fba2 2303 	umull	r2, r3, r2, r3
 8003a74:	095b      	lsrs	r3, r3, #5
 8003a76:	011c      	lsls	r4, r3, #4
 8003a78:	f7ff fafa 	bl	8003070 <HAL_RCC_GetPCLK2Freq>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	4613      	mov	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	009a      	lsls	r2, r3, #2
 8003a86:	441a      	add	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	fbb2 f5f3 	udiv	r5, r2, r3
 8003a92:	f7ff faed 	bl	8003070 <HAL_RCC_GetPCLK2Freq>
 8003a96:	4602      	mov	r2, r0
 8003a98:	4613      	mov	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	009a      	lsls	r2, r3, #2
 8003aa0:	441a      	add	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aac:	4a21      	ldr	r2, [pc, #132]	; (8003b34 <UART_SetConfig+0x32c>)
 8003aae:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab2:	095b      	lsrs	r3, r3, #5
 8003ab4:	2264      	movs	r2, #100	; 0x64
 8003ab6:	fb02 f303 	mul.w	r3, r2, r3
 8003aba:	1aeb      	subs	r3, r5, r3
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	3332      	adds	r3, #50	; 0x32
 8003ac0:	4a1c      	ldr	r2, [pc, #112]	; (8003b34 <UART_SetConfig+0x32c>)
 8003ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac6:	095b      	lsrs	r3, r3, #5
 8003ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003acc:	441c      	add	r4, r3
 8003ace:	f7ff facf 	bl	8003070 <HAL_RCC_GetPCLK2Freq>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	009a      	lsls	r2, r3, #2
 8003adc:	441a      	add	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	fbb2 f5f3 	udiv	r5, r2, r3
 8003ae8:	f7ff fac2 	bl	8003070 <HAL_RCC_GetPCLK2Freq>
 8003aec:	4602      	mov	r2, r0
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	009a      	lsls	r2, r3, #2
 8003af6:	441a      	add	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b02:	4a0c      	ldr	r2, [pc, #48]	; (8003b34 <UART_SetConfig+0x32c>)
 8003b04:	fba2 2303 	umull	r2, r3, r2, r3
 8003b08:	095b      	lsrs	r3, r3, #5
 8003b0a:	2264      	movs	r2, #100	; 0x64
 8003b0c:	fb02 f303 	mul.w	r3, r2, r3
 8003b10:	1aeb      	subs	r3, r5, r3
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	3332      	adds	r3, #50	; 0x32
 8003b16:	4a07      	ldr	r2, [pc, #28]	; (8003b34 <UART_SetConfig+0x32c>)
 8003b18:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1c:	095b      	lsrs	r3, r3, #5
 8003b1e:	f003 020f 	and.w	r2, r3, #15
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4422      	add	r2, r4
 8003b28:	609a      	str	r2, [r3, #8]
 8003b2a:	e071      	b.n	8003c10 <UART_SetConfig+0x408>
 8003b2c:	40011000 	.word	0x40011000
 8003b30:	40011400 	.word	0x40011400
 8003b34:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003b38:	f7ff fa86 	bl	8003048 <HAL_RCC_GetPCLK1Freq>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	4613      	mov	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	009a      	lsls	r2, r3, #2
 8003b46:	441a      	add	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b52:	4a31      	ldr	r2, [pc, #196]	; (8003c18 <UART_SetConfig+0x410>)
 8003b54:	fba2 2303 	umull	r2, r3, r2, r3
 8003b58:	095b      	lsrs	r3, r3, #5
 8003b5a:	011c      	lsls	r4, r3, #4
 8003b5c:	f7ff fa74 	bl	8003048 <HAL_RCC_GetPCLK1Freq>
 8003b60:	4602      	mov	r2, r0
 8003b62:	4613      	mov	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	009a      	lsls	r2, r3, #2
 8003b6a:	441a      	add	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	fbb2 f5f3 	udiv	r5, r2, r3
 8003b76:	f7ff fa67 	bl	8003048 <HAL_RCC_GetPCLK1Freq>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	009a      	lsls	r2, r3, #2
 8003b84:	441a      	add	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b90:	4a21      	ldr	r2, [pc, #132]	; (8003c18 <UART_SetConfig+0x410>)
 8003b92:	fba2 2303 	umull	r2, r3, r2, r3
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	2264      	movs	r2, #100	; 0x64
 8003b9a:	fb02 f303 	mul.w	r3, r2, r3
 8003b9e:	1aeb      	subs	r3, r5, r3
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	3332      	adds	r3, #50	; 0x32
 8003ba4:	4a1c      	ldr	r2, [pc, #112]	; (8003c18 <UART_SetConfig+0x410>)
 8003ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bb0:	441c      	add	r4, r3
 8003bb2:	f7ff fa49 	bl	8003048 <HAL_RCC_GetPCLK1Freq>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	4613      	mov	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009a      	lsls	r2, r3, #2
 8003bc0:	441a      	add	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	fbb2 f5f3 	udiv	r5, r2, r3
 8003bcc:	f7ff fa3c 	bl	8003048 <HAL_RCC_GetPCLK1Freq>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009a      	lsls	r2, r3, #2
 8003bda:	441a      	add	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be6:	4a0c      	ldr	r2, [pc, #48]	; (8003c18 <UART_SetConfig+0x410>)
 8003be8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bec:	095b      	lsrs	r3, r3, #5
 8003bee:	2264      	movs	r2, #100	; 0x64
 8003bf0:	fb02 f303 	mul.w	r3, r2, r3
 8003bf4:	1aeb      	subs	r3, r5, r3
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	3332      	adds	r3, #50	; 0x32
 8003bfa:	4a07      	ldr	r2, [pc, #28]	; (8003c18 <UART_SetConfig+0x410>)
 8003bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003c00:	095b      	lsrs	r3, r3, #5
 8003c02:	f003 020f 	and.w	r2, r3, #15
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4422      	add	r2, r4
 8003c0c:	609a      	str	r2, [r3, #8]
}
 8003c0e:	e7ff      	b.n	8003c10 <UART_SetConfig+0x408>
 8003c10:	bf00      	nop
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bdb0      	pop	{r4, r5, r7, pc}
 8003c18:	51eb851f 	.word	0x51eb851f

08003c1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c1c:	b084      	sub	sp, #16
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b084      	sub	sp, #16
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	f107 001c 	add.w	r0, r7, #28
 8003c2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d122      	bne.n	8003c7a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003c48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d105      	bne.n	8003c6e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f001 fa7c 	bl	800516c <USB_CoreReset>
 8003c74:	4603      	mov	r3, r0
 8003c76:	73fb      	strb	r3, [r7, #15]
 8003c78:	e01a      	b.n	8003cb0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f001 fa70 	bl	800516c <USB_CoreReset>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d106      	bne.n	8003ca4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	639a      	str	r2, [r3, #56]	; 0x38
 8003ca2:	e005      	b.n	8003cb0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d10b      	bne.n	8003cce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f043 0206 	orr.w	r2, r3, #6
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f043 0220 	orr.w	r2, r3, #32
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cda:	b004      	add	sp, #16
 8003cdc:	4770      	bx	lr
	...

08003ce0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	4613      	mov	r3, r2
 8003cec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003cee:	79fb      	ldrb	r3, [r7, #7]
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d165      	bne.n	8003dc0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	4a41      	ldr	r2, [pc, #260]	; (8003dfc <USB_SetTurnaroundTime+0x11c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d906      	bls.n	8003d0a <USB_SetTurnaroundTime+0x2a>
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	4a40      	ldr	r2, [pc, #256]	; (8003e00 <USB_SetTurnaroundTime+0x120>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d802      	bhi.n	8003d0a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003d04:	230f      	movs	r3, #15
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	e062      	b.n	8003dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	4a3c      	ldr	r2, [pc, #240]	; (8003e00 <USB_SetTurnaroundTime+0x120>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d906      	bls.n	8003d20 <USB_SetTurnaroundTime+0x40>
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	4a3b      	ldr	r2, [pc, #236]	; (8003e04 <USB_SetTurnaroundTime+0x124>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d802      	bhi.n	8003d20 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003d1a:	230e      	movs	r3, #14
 8003d1c:	617b      	str	r3, [r7, #20]
 8003d1e:	e057      	b.n	8003dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4a38      	ldr	r2, [pc, #224]	; (8003e04 <USB_SetTurnaroundTime+0x124>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d906      	bls.n	8003d36 <USB_SetTurnaroundTime+0x56>
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	4a37      	ldr	r2, [pc, #220]	; (8003e08 <USB_SetTurnaroundTime+0x128>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d802      	bhi.n	8003d36 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003d30:	230d      	movs	r3, #13
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	e04c      	b.n	8003dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	4a33      	ldr	r2, [pc, #204]	; (8003e08 <USB_SetTurnaroundTime+0x128>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d906      	bls.n	8003d4c <USB_SetTurnaroundTime+0x6c>
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	4a32      	ldr	r2, [pc, #200]	; (8003e0c <USB_SetTurnaroundTime+0x12c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d802      	bhi.n	8003d4c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003d46:	230c      	movs	r3, #12
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	e041      	b.n	8003dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	4a2f      	ldr	r2, [pc, #188]	; (8003e0c <USB_SetTurnaroundTime+0x12c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d906      	bls.n	8003d62 <USB_SetTurnaroundTime+0x82>
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	4a2e      	ldr	r2, [pc, #184]	; (8003e10 <USB_SetTurnaroundTime+0x130>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d802      	bhi.n	8003d62 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003d5c:	230b      	movs	r3, #11
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	e036      	b.n	8003dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	4a2a      	ldr	r2, [pc, #168]	; (8003e10 <USB_SetTurnaroundTime+0x130>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d906      	bls.n	8003d78 <USB_SetTurnaroundTime+0x98>
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	4a29      	ldr	r2, [pc, #164]	; (8003e14 <USB_SetTurnaroundTime+0x134>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d802      	bhi.n	8003d78 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003d72:	230a      	movs	r3, #10
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	e02b      	b.n	8003dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	4a26      	ldr	r2, [pc, #152]	; (8003e14 <USB_SetTurnaroundTime+0x134>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d906      	bls.n	8003d8e <USB_SetTurnaroundTime+0xae>
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	4a25      	ldr	r2, [pc, #148]	; (8003e18 <USB_SetTurnaroundTime+0x138>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d802      	bhi.n	8003d8e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003d88:	2309      	movs	r3, #9
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	e020      	b.n	8003dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	4a21      	ldr	r2, [pc, #132]	; (8003e18 <USB_SetTurnaroundTime+0x138>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d906      	bls.n	8003da4 <USB_SetTurnaroundTime+0xc4>
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	4a20      	ldr	r2, [pc, #128]	; (8003e1c <USB_SetTurnaroundTime+0x13c>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d802      	bhi.n	8003da4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003d9e:	2308      	movs	r3, #8
 8003da0:	617b      	str	r3, [r7, #20]
 8003da2:	e015      	b.n	8003dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	4a1d      	ldr	r2, [pc, #116]	; (8003e1c <USB_SetTurnaroundTime+0x13c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d906      	bls.n	8003dba <USB_SetTurnaroundTime+0xda>
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	4a1c      	ldr	r2, [pc, #112]	; (8003e20 <USB_SetTurnaroundTime+0x140>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d802      	bhi.n	8003dba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003db4:	2307      	movs	r3, #7
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	e00a      	b.n	8003dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003dba:	2306      	movs	r3, #6
 8003dbc:	617b      	str	r3, [r7, #20]
 8003dbe:	e007      	b.n	8003dd0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003dc0:	79fb      	ldrb	r3, [r7, #7]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d102      	bne.n	8003dcc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003dc6:	2309      	movs	r3, #9
 8003dc8:	617b      	str	r3, [r7, #20]
 8003dca:	e001      	b.n	8003dd0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003dcc:	2309      	movs	r3, #9
 8003dce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	029b      	lsls	r3, r3, #10
 8003de4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003de8:	431a      	orrs	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	371c      	adds	r7, #28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	00d8acbf 	.word	0x00d8acbf
 8003e00:	00e4e1bf 	.word	0x00e4e1bf
 8003e04:	00f423ff 	.word	0x00f423ff
 8003e08:	0106737f 	.word	0x0106737f
 8003e0c:	011a499f 	.word	0x011a499f
 8003e10:	01312cff 	.word	0x01312cff
 8003e14:	014ca43f 	.word	0x014ca43f
 8003e18:	016e35ff 	.word	0x016e35ff
 8003e1c:	01a6ab1f 	.word	0x01a6ab1f
 8003e20:	01e847ff 	.word	0x01e847ff

08003e24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f043 0201 	orr.w	r2, r3, #1
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f023 0201 	bic.w	r2, r3, #1
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e80:	78fb      	ldrb	r3, [r7, #3]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d106      	bne.n	8003e94 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	60da      	str	r2, [r3, #12]
 8003e92:	e00b      	b.n	8003eac <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d106      	bne.n	8003ea8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	60da      	str	r2, [r3, #12]
 8003ea6:	e001      	b.n	8003eac <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e003      	b.n	8003eb4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003eac:	2032      	movs	r0, #50	; 0x32
 8003eae:	f7fc fb97 	bl	80005e0 <HAL_Delay>

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3708      	adds	r7, #8
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ebc:	b084      	sub	sp, #16
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b086      	sub	sp, #24
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003eca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	e009      	b.n	8003ef0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	3340      	adds	r3, #64	; 0x40
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	3301      	adds	r3, #1
 8003eee:	613b      	str	r3, [r7, #16]
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	2b0e      	cmp	r3, #14
 8003ef4:	d9f2      	bls.n	8003edc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d112      	bne.n	8003f22 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f18:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	639a      	str	r2, [r3, #56]	; 0x38
 8003f20:	e00b      	b.n	8003f3a <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f32:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f40:	461a      	mov	r2, r3
 8003f42:	2300      	movs	r3, #0
 8003f44:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f54:	461a      	mov	r2, r3
 8003f56:	680b      	ldr	r3, [r1, #0]
 8003f58:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d10c      	bne.n	8003f7a <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d104      	bne.n	8003f70 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003f66:	2100      	movs	r1, #0
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f961 	bl	8004230 <USB_SetDevSpeed>
 8003f6e:	e008      	b.n	8003f82 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f70:	2101      	movs	r1, #1
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f95c 	bl	8004230 <USB_SetDevSpeed>
 8003f78:	e003      	b.n	8003f82 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003f7a:	2103      	movs	r1, #3
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f957 	bl	8004230 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003f82:	2110      	movs	r1, #16
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f90b 	bl	80041a0 <USB_FlushTxFifo>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f929 	bl	80041ec <USB_FlushRxFifo>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003faa:	461a      	mov	r2, r3
 8003fac:	2300      	movs	r3, #0
 8003fae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	2300      	movs	r3, #0
 8003fba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fc8:	2300      	movs	r3, #0
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	e043      	b.n	8004056 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fe0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fe4:	d118      	bne.n	8004018 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10a      	bne.n	8004002 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	015a      	lsls	r2, r3, #5
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	e013      	b.n	800402a <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	4413      	add	r3, r2
 800400a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800400e:	461a      	mov	r2, r3
 8004010:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	e008      	b.n	800402a <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4413      	add	r3, r2
 8004020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004024:	461a      	mov	r2, r3
 8004026:	2300      	movs	r3, #0
 8004028:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4413      	add	r3, r2
 8004032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004036:	461a      	mov	r2, r3
 8004038:	2300      	movs	r3, #0
 800403a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4413      	add	r3, r2
 8004044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004048:	461a      	mov	r2, r3
 800404a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800404e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	3301      	adds	r3, #1
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	429a      	cmp	r2, r3
 800405c:	d3b7      	bcc.n	8003fce <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800405e:	2300      	movs	r3, #0
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	e043      	b.n	80040ec <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4413      	add	r3, r2
 800406c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004076:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800407a:	d118      	bne.n	80040ae <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10a      	bne.n	8004098 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	015a      	lsls	r2, r3, #5
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4413      	add	r3, r2
 800408a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408e:	461a      	mov	r2, r3
 8004090:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	e013      	b.n	80040c0 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a4:	461a      	mov	r2, r3
 80040a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040aa:	6013      	str	r3, [r2, #0]
 80040ac:	e008      	b.n	80040c0 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ba:	461a      	mov	r2, r3
 80040bc:	2300      	movs	r3, #0
 80040be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040cc:	461a      	mov	r2, r3
 80040ce:	2300      	movs	r3, #0
 80040d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	015a      	lsls	r2, r3, #5
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	4413      	add	r3, r2
 80040da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040de:	461a      	mov	r2, r3
 80040e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	3301      	adds	r3, #1
 80040ea:	613b      	str	r3, [r7, #16]
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d3b7      	bcc.n	8004064 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004102:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004106:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8004108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410a:	2b01      	cmp	r3, #1
 800410c:	d111      	bne.n	8004132 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004114:	461a      	mov	r2, r3
 8004116:	4b20      	ldr	r3, [pc, #128]	; (8004198 <USB_DevInit+0x2dc>)
 8004118:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800412c:	f043 0303 	orr.w	r3, r3, #3
 8004130:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800413e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004142:	2b00      	cmp	r3, #0
 8004144:	d105      	bne.n	8004152 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	f043 0210 	orr.w	r2, r3, #16
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699a      	ldr	r2, [r3, #24]
 8004156:	4b11      	ldr	r3, [pc, #68]	; (800419c <USB_DevInit+0x2e0>)
 8004158:	4313      	orrs	r3, r2
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800415e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004160:	2b00      	cmp	r3, #0
 8004162:	d005      	beq.n	8004170 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	f043 0208 	orr.w	r2, r3, #8
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004172:	2b01      	cmp	r3, #1
 8004174:	d107      	bne.n	8004186 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800417e:	f043 0304 	orr.w	r3, r3, #4
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004186:	7dfb      	ldrb	r3, [r7, #23]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004192:	b004      	add	sp, #16
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	00800100 	.word	0x00800100
 800419c:	803c3800 	.word	0x803c3800

080041a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	019b      	lsls	r3, r3, #6
 80041b2:	f043 0220 	orr.w	r2, r3, #32
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	3301      	adds	r3, #1
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4a09      	ldr	r2, [pc, #36]	; (80041e8 <USB_FlushTxFifo+0x48>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d901      	bls.n	80041cc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e006      	b.n	80041da <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	f003 0320 	and.w	r3, r3, #32
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d0f0      	beq.n	80041ba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	00030d40 	.word	0x00030d40

080041ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2210      	movs	r2, #16
 80041fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	3301      	adds	r3, #1
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4a09      	ldr	r2, [pc, #36]	; (800422c <USB_FlushRxFifo+0x40>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d901      	bls.n	8004210 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e006      	b.n	800421e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	f003 0310 	and.w	r3, r3, #16
 8004218:	2b10      	cmp	r3, #16
 800421a:	d0f0      	beq.n	80041fe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	00030d40 	.word	0x00030d40

08004230 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	78fb      	ldrb	r3, [r7, #3]
 800424a:	68f9      	ldr	r1, [r7, #12]
 800424c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004250:	4313      	orrs	r3, r2
 8004252:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004262:	b480      	push	{r7}
 8004264:	b087      	sub	sp, #28
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 0306 	and.w	r3, r3, #6
 800427a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d102      	bne.n	8004288 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004282:	2300      	movs	r3, #0
 8004284:	75fb      	strb	r3, [r7, #23]
 8004286:	e00a      	b.n	800429e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2b02      	cmp	r3, #2
 800428c:	d002      	beq.n	8004294 <USB_GetDevSpeed+0x32>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2b06      	cmp	r3, #6
 8004292:	d102      	bne.n	800429a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004294:	2302      	movs	r3, #2
 8004296:	75fb      	strb	r3, [r7, #23]
 8004298:	e001      	b.n	800429e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800429a:	230f      	movs	r3, #15
 800429c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800429e:	7dfb      	ldrb	r3, [r7, #23]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	371c      	adds	r7, #28
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	785b      	ldrb	r3, [r3, #1]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d13a      	bne.n	800433e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ce:	69da      	ldr	r2, [r3, #28]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	f003 030f 	and.w	r3, r3, #15
 80042d8:	2101      	movs	r1, #1
 80042da:	fa01 f303 	lsl.w	r3, r1, r3
 80042de:	b29b      	uxth	r3, r3
 80042e0:	68f9      	ldr	r1, [r7, #12]
 80042e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042e6:	4313      	orrs	r3, r2
 80042e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d155      	bne.n	80043ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	78db      	ldrb	r3, [r3, #3]
 800431a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800431c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	059b      	lsls	r3, r3, #22
 8004322:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004324:	4313      	orrs	r3, r2
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	0151      	lsls	r1, r2, #5
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	440a      	add	r2, r1
 800432e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	e036      	b.n	80043ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004344:	69da      	ldr	r2, [r3, #28]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	2101      	movs	r1, #1
 8004350:	fa01 f303 	lsl.w	r3, r1, r3
 8004354:	041b      	lsls	r3, r3, #16
 8004356:	68f9      	ldr	r1, [r7, #12]
 8004358:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800435c:	4313      	orrs	r3, r2
 800435e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4413      	add	r3, r2
 8004368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d11a      	bne.n	80043ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	78db      	ldrb	r3, [r3, #3]
 8004390:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004392:	430b      	orrs	r3, r1
 8004394:	4313      	orrs	r3, r2
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	0151      	lsls	r1, r2, #5
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	440a      	add	r2, r1
 800439e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
	...

080043bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	785b      	ldrb	r3, [r3, #1]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d135      	bne.n	8004444 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	f003 030f 	and.w	r3, r3, #15
 80043e8:	2101      	movs	r1, #1
 80043ea:	fa01 f303 	lsl.w	r3, r1, r3
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	43db      	mvns	r3, r3
 80043f2:	68f9      	ldr	r1, [r7, #12]
 80043f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043f8:	4013      	ands	r3, r2
 80043fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004402:	69da      	ldr	r2, [r3, #28]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	f003 030f 	and.w	r3, r3, #15
 800440c:	2101      	movs	r1, #1
 800440e:	fa01 f303 	lsl.w	r3, r1, r3
 8004412:	b29b      	uxth	r3, r3
 8004414:	43db      	mvns	r3, r3
 8004416:	68f9      	ldr	r1, [r7, #12]
 8004418:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800441c:	4013      	ands	r3, r2
 800441e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	015a      	lsls	r2, r3, #5
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4413      	add	r3, r2
 8004428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	0159      	lsls	r1, r3, #5
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	440b      	add	r3, r1
 8004436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800443a:	4619      	mov	r1, r3
 800443c:	4b1f      	ldr	r3, [pc, #124]	; (80044bc <USB_DeactivateEndpoint+0x100>)
 800443e:	4013      	ands	r3, r2
 8004440:	600b      	str	r3, [r1, #0]
 8004442:	e034      	b.n	80044ae <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	f003 030f 	and.w	r3, r3, #15
 8004454:	2101      	movs	r1, #1
 8004456:	fa01 f303 	lsl.w	r3, r1, r3
 800445a:	041b      	lsls	r3, r3, #16
 800445c:	43db      	mvns	r3, r3
 800445e:	68f9      	ldr	r1, [r7, #12]
 8004460:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004464:	4013      	ands	r3, r2
 8004466:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800446e:	69da      	ldr	r2, [r3, #28]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	f003 030f 	and.w	r3, r3, #15
 8004478:	2101      	movs	r1, #1
 800447a:	fa01 f303 	lsl.w	r3, r1, r3
 800447e:	041b      	lsls	r3, r3, #16
 8004480:	43db      	mvns	r3, r3
 8004482:	68f9      	ldr	r1, [r7, #12]
 8004484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004488:	4013      	ands	r3, r2
 800448a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4413      	add	r3, r2
 8004494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	0159      	lsls	r1, r3, #5
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	440b      	add	r3, r1
 80044a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a6:	4619      	mov	r1, r3
 80044a8:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <USB_DeactivateEndpoint+0x104>)
 80044aa:	4013      	ands	r3, r2
 80044ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	ec337800 	.word	0xec337800
 80044c0:	eff37800 	.word	0xeff37800

080044c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08a      	sub	sp, #40	; 0x28
 80044c8:	af02      	add	r7, sp, #8
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	4613      	mov	r3, r2
 80044d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	785b      	ldrb	r3, [r3, #1]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	f040 815c 	bne.w	800479e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d132      	bne.n	8004554 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	0151      	lsls	r1, r2, #5
 8004500:	69fa      	ldr	r2, [r7, #28]
 8004502:	440a      	add	r2, r1
 8004504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004508:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800450c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004510:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	015a      	lsls	r2, r3, #5
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	4413      	add	r3, r2
 800451a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	0151      	lsls	r1, r2, #5
 8004524:	69fa      	ldr	r2, [r7, #28]
 8004526:	440a      	add	r2, r1
 8004528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800452c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004530:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	4413      	add	r3, r2
 800453a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	0151      	lsls	r1, r2, #5
 8004544:	69fa      	ldr	r2, [r7, #28]
 8004546:	440a      	add	r2, r1
 8004548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800454c:	0cdb      	lsrs	r3, r3, #19
 800454e:	04db      	lsls	r3, r3, #19
 8004550:	6113      	str	r3, [r2, #16]
 8004552:	e074      	b.n	800463e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	4413      	add	r3, r2
 800455c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	0151      	lsls	r1, r2, #5
 8004566:	69fa      	ldr	r2, [r7, #28]
 8004568:	440a      	add	r2, r1
 800456a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800456e:	0cdb      	lsrs	r3, r3, #19
 8004570:	04db      	lsls	r3, r3, #19
 8004572:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	015a      	lsls	r2, r3, #5
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	4413      	add	r3, r2
 800457c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	0151      	lsls	r1, r2, #5
 8004586:	69fa      	ldr	r2, [r7, #28]
 8004588:	440a      	add	r2, r1
 800458a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800458e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004592:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004596:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a4:	691a      	ldr	r2, [r3, #16]
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	6959      	ldr	r1, [r3, #20]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	440b      	add	r3, r1
 80045b0:	1e59      	subs	r1, r3, #1
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80045ba:	04d9      	lsls	r1, r3, #19
 80045bc:	4b9d      	ldr	r3, [pc, #628]	; (8004834 <USB_EPStartXfer+0x370>)
 80045be:	400b      	ands	r3, r1
 80045c0:	69b9      	ldr	r1, [r7, #24]
 80045c2:	0148      	lsls	r0, r1, #5
 80045c4:	69f9      	ldr	r1, [r7, #28]
 80045c6:	4401      	add	r1, r0
 80045c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80045cc:	4313      	orrs	r3, r2
 80045ce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	015a      	lsls	r2, r3, #5
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	4413      	add	r3, r2
 80045d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045dc:	691a      	ldr	r2, [r3, #16]
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045e6:	69b9      	ldr	r1, [r7, #24]
 80045e8:	0148      	lsls	r0, r1, #5
 80045ea:	69f9      	ldr	r1, [r7, #28]
 80045ec:	4401      	add	r1, r0
 80045ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80045f2:	4313      	orrs	r3, r2
 80045f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	78db      	ldrb	r3, [r3, #3]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d11f      	bne.n	800463e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	015a      	lsls	r2, r3, #5
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	4413      	add	r3, r2
 8004606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	0151      	lsls	r1, r2, #5
 8004610:	69fa      	ldr	r2, [r7, #28]
 8004612:	440a      	add	r2, r1
 8004614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004618:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800461c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	015a      	lsls	r2, r3, #5
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	4413      	add	r3, r2
 8004626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	0151      	lsls	r1, r2, #5
 8004630:	69fa      	ldr	r2, [r7, #28]
 8004632:	440a      	add	r2, r1
 8004634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004638:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800463c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800463e:	79fb      	ldrb	r3, [r7, #7]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d14b      	bne.n	80046dc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d009      	beq.n	8004660 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	015a      	lsls	r2, r3, #5
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	4413      	add	r3, r2
 8004654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004658:	461a      	mov	r2, r3
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	78db      	ldrb	r3, [r3, #3]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d128      	bne.n	80046ba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004674:	2b00      	cmp	r3, #0
 8004676:	d110      	bne.n	800469a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	0151      	lsls	r1, r2, #5
 800468a:	69fa      	ldr	r2, [r7, #28]
 800468c:	440a      	add	r2, r1
 800468e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004692:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004696:	6013      	str	r3, [r2, #0]
 8004698:	e00f      	b.n	80046ba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	0151      	lsls	r1, r2, #5
 80046ac:	69fa      	ldr	r2, [r7, #28]
 80046ae:	440a      	add	r2, r1
 80046b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	0151      	lsls	r1, r2, #5
 80046cc:	69fa      	ldr	r2, [r7, #28]
 80046ce:	440a      	add	r2, r1
 80046d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	e12f      	b.n	800493c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	0151      	lsls	r1, r2, #5
 80046ee:	69fa      	ldr	r2, [r7, #28]
 80046f0:	440a      	add	r2, r1
 80046f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	78db      	ldrb	r3, [r3, #3]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d015      	beq.n	8004730 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 8117 	beq.w	800493c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004714:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	2101      	movs	r1, #1
 8004720:	fa01 f303 	lsl.w	r3, r1, r3
 8004724:	69f9      	ldr	r1, [r7, #28]
 8004726:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800472a:	4313      	orrs	r3, r2
 800472c:	634b      	str	r3, [r1, #52]	; 0x34
 800472e:	e105      	b.n	800493c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473c:	2b00      	cmp	r3, #0
 800473e:	d110      	bne.n	8004762 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	0151      	lsls	r1, r2, #5
 8004752:	69fa      	ldr	r2, [r7, #28]
 8004754:	440a      	add	r2, r1
 8004756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800475a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800475e:	6013      	str	r3, [r2, #0]
 8004760:	e00f      	b.n	8004782 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	4413      	add	r3, r2
 800476a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	0151      	lsls	r1, r2, #5
 8004774:	69fa      	ldr	r2, [r7, #28]
 8004776:	440a      	add	r2, r1
 8004778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800477c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004780:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	68d9      	ldr	r1, [r3, #12]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	781a      	ldrb	r2, [r3, #0]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	b298      	uxth	r0, r3
 8004790:	79fb      	ldrb	r3, [r7, #7]
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	4603      	mov	r3, r0
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 fa2b 	bl	8004bf2 <USB_WritePacket>
 800479c:	e0ce      	b.n	800493c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	0151      	lsls	r1, r2, #5
 80047b0:	69fa      	ldr	r2, [r7, #28]
 80047b2:	440a      	add	r2, r1
 80047b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047b8:	0cdb      	lsrs	r3, r3, #19
 80047ba:	04db      	lsls	r3, r3, #19
 80047bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	0151      	lsls	r1, r2, #5
 80047d0:	69fa      	ldr	r2, [r7, #28]
 80047d2:	440a      	add	r2, r1
 80047d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80047dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80047e0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d126      	bne.n	8004838 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f6:	691a      	ldr	r2, [r3, #16]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004800:	69b9      	ldr	r1, [r7, #24]
 8004802:	0148      	lsls	r0, r1, #5
 8004804:	69f9      	ldr	r1, [r7, #28]
 8004806:	4401      	add	r1, r0
 8004808:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800480c:	4313      	orrs	r3, r2
 800480e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	0151      	lsls	r1, r2, #5
 8004822:	69fa      	ldr	r2, [r7, #28]
 8004824:	440a      	add	r2, r1
 8004826:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800482a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800482e:	6113      	str	r3, [r2, #16]
 8004830:	e036      	b.n	80048a0 <USB_EPStartXfer+0x3dc>
 8004832:	bf00      	nop
 8004834:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	695a      	ldr	r2, [r3, #20]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	4413      	add	r3, r2
 8004842:	1e5a      	subs	r2, r3, #1
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	fbb2 f3f3 	udiv	r3, r2, r3
 800484c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	4413      	add	r3, r2
 8004856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485a:	691a      	ldr	r2, [r3, #16]
 800485c:	8afb      	ldrh	r3, [r7, #22]
 800485e:	04d9      	lsls	r1, r3, #19
 8004860:	4b39      	ldr	r3, [pc, #228]	; (8004948 <USB_EPStartXfer+0x484>)
 8004862:	400b      	ands	r3, r1
 8004864:	69b9      	ldr	r1, [r7, #24]
 8004866:	0148      	lsls	r0, r1, #5
 8004868:	69f9      	ldr	r1, [r7, #28]
 800486a:	4401      	add	r1, r0
 800486c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004870:	4313      	orrs	r3, r2
 8004872:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	015a      	lsls	r2, r3, #5
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	4413      	add	r3, r2
 800487c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004880:	691a      	ldr	r2, [r3, #16]
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	8af9      	ldrh	r1, [r7, #22]
 8004888:	fb01 f303 	mul.w	r3, r1, r3
 800488c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004890:	69b9      	ldr	r1, [r7, #24]
 8004892:	0148      	lsls	r0, r1, #5
 8004894:	69f9      	ldr	r1, [r7, #28]
 8004896:	4401      	add	r1, r0
 8004898:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800489c:	4313      	orrs	r3, r2
 800489e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80048a0:	79fb      	ldrb	r3, [r7, #7]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d10d      	bne.n	80048c2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d009      	beq.n	80048c2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	68d9      	ldr	r1, [r3, #12]
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	015a      	lsls	r2, r3, #5
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	4413      	add	r3, r2
 80048ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048be:	460a      	mov	r2, r1
 80048c0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	78db      	ldrb	r3, [r3, #3]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d128      	bne.n	800491c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d110      	bne.n	80048fc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	0151      	lsls	r1, r2, #5
 80048ec:	69fa      	ldr	r2, [r7, #28]
 80048ee:	440a      	add	r2, r1
 80048f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	e00f      	b.n	800491c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	4413      	add	r3, r2
 8004904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	0151      	lsls	r1, r2, #5
 800490e:	69fa      	ldr	r2, [r7, #28]
 8004910:	440a      	add	r2, r1
 8004912:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800491a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	0151      	lsls	r1, r2, #5
 800492e:	69fa      	ldr	r2, [r7, #28]
 8004930:	440a      	add	r2, r1
 8004932:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004936:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800493a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3720      	adds	r7, #32
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	1ff80000 	.word	0x1ff80000

0800494c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	4613      	mov	r3, r2
 8004958:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	785b      	ldrb	r3, [r3, #1]
 8004968:	2b01      	cmp	r3, #1
 800496a:	f040 80cd 	bne.w	8004b08 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d132      	bne.n	80049dc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	4413      	add	r3, r2
 800497e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	0151      	lsls	r1, r2, #5
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	440a      	add	r2, r1
 800498c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004990:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004994:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004998:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	0151      	lsls	r1, r2, #5
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	440a      	add	r2, r1
 80049b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	0151      	lsls	r1, r2, #5
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	440a      	add	r2, r1
 80049d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049d4:	0cdb      	lsrs	r3, r3, #19
 80049d6:	04db      	lsls	r3, r3, #19
 80049d8:	6113      	str	r3, [r2, #16]
 80049da:	e04e      	b.n	8004a7a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	0151      	lsls	r1, r2, #5
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	440a      	add	r2, r1
 80049f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049f6:	0cdb      	lsrs	r3, r3, #19
 80049f8:	04db      	lsls	r3, r3, #19
 80049fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	0151      	lsls	r1, r2, #5
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	440a      	add	r2, r1
 8004a12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a16:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a1a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a1e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	695a      	ldr	r2, [r3, #20]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d903      	bls.n	8004a34 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	0151      	lsls	r1, r2, #5
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	440a      	add	r2, r1
 8004a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a60:	691a      	ldr	r2, [r3, #16]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a6a:	6939      	ldr	r1, [r7, #16]
 8004a6c:	0148      	lsls	r0, r1, #5
 8004a6e:	6979      	ldr	r1, [r7, #20]
 8004a70:	4401      	add	r1, r0
 8004a72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a76:	4313      	orrs	r3, r2
 8004a78:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004a7a:	79fb      	ldrb	r3, [r7, #7]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d11e      	bne.n	8004abe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d009      	beq.n	8004a9c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a94:	461a      	mov	r2, r3
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	0151      	lsls	r1, r2, #5
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	440a      	add	r2, r1
 8004ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ab6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004aba:	6013      	str	r3, [r2, #0]
 8004abc:	e092      	b.n	8004be4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	015a      	lsls	r2, r3, #5
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	0151      	lsls	r1, r2, #5
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	440a      	add	r2, r1
 8004ad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ad8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004adc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d07e      	beq.n	8004be4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	f003 030f 	and.w	r3, r3, #15
 8004af6:	2101      	movs	r1, #1
 8004af8:	fa01 f303 	lsl.w	r3, r1, r3
 8004afc:	6979      	ldr	r1, [r7, #20]
 8004afe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b02:	4313      	orrs	r3, r2
 8004b04:	634b      	str	r3, [r1, #52]	; 0x34
 8004b06:	e06d      	b.n	8004be4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	0151      	lsls	r1, r2, #5
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	440a      	add	r2, r1
 8004b1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b22:	0cdb      	lsrs	r3, r3, #19
 8004b24:	04db      	lsls	r3, r3, #19
 8004b26:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	0151      	lsls	r1, r2, #5
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	440a      	add	r2, r1
 8004b3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b4a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d003      	beq.n	8004b5c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	689a      	ldr	r2, [r3, #8]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	0151      	lsls	r1, r2, #5
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	440a      	add	r2, r1
 8004b72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b88:	691a      	ldr	r2, [r3, #16]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b92:	6939      	ldr	r1, [r7, #16]
 8004b94:	0148      	lsls	r0, r1, #5
 8004b96:	6979      	ldr	r1, [r7, #20]
 8004b98:	4401      	add	r1, r0
 8004b9a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004ba2:	79fb      	ldrb	r3, [r7, #7]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d10d      	bne.n	8004bc4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d009      	beq.n	8004bc4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	68d9      	ldr	r1, [r3, #12]
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc0:	460a      	mov	r2, r1
 8004bc2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	0151      	lsls	r1, r2, #5
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	440a      	add	r2, r1
 8004bda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004be2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	371c      	adds	r7, #28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b089      	sub	sp, #36	; 0x24
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	4611      	mov	r1, r2
 8004bfe:	461a      	mov	r2, r3
 8004c00:	460b      	mov	r3, r1
 8004c02:	71fb      	strb	r3, [r7, #7]
 8004c04:	4613      	mov	r3, r2
 8004c06:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004c10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d11a      	bne.n	8004c4e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c18:	88bb      	ldrh	r3, [r7, #4]
 8004c1a:	3303      	adds	r3, #3
 8004c1c:	089b      	lsrs	r3, r3, #2
 8004c1e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004c20:	2300      	movs	r3, #0
 8004c22:	61bb      	str	r3, [r7, #24]
 8004c24:	e00f      	b.n	8004c46 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c26:	79fb      	ldrb	r3, [r7, #7]
 8004c28:	031a      	lsls	r2, r3, #12
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c32:	461a      	mov	r2, r3
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	3301      	adds	r3, #1
 8004c44:	61bb      	str	r3, [r7, #24]
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d3eb      	bcc.n	8004c26 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3724      	adds	r7, #36	; 0x24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b089      	sub	sp, #36	; 0x24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	4613      	mov	r3, r2
 8004c68:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004c72:	88fb      	ldrh	r3, [r7, #6]
 8004c74:	3303      	adds	r3, #3
 8004c76:	089b      	lsrs	r3, r3, #2
 8004c78:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	61bb      	str	r3, [r7, #24]
 8004c7e:	e00b      	b.n	8004c98 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	3304      	adds	r3, #4
 8004c90:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	3301      	adds	r3, #1
 8004c96:	61bb      	str	r3, [r7, #24]
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d3ef      	bcc.n	8004c80 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004ca0:	69fb      	ldr	r3, [r7, #28]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3724      	adds	r7, #36	; 0x24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b085      	sub	sp, #20
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
 8004cb6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	785b      	ldrb	r3, [r3, #1]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d12c      	bne.n	8004d24 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	db12      	blt.n	8004d02 <USB_EPSetStall+0x54>
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00f      	beq.n	8004d02 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	015a      	lsls	r2, r3, #5
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	4413      	add	r3, r2
 8004cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	0151      	lsls	r1, r2, #5
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	440a      	add	r2, r1
 8004cf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cfc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d00:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	0151      	lsls	r1, r2, #5
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	440a      	add	r2, r1
 8004d18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	e02b      	b.n	8004d7c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	db12      	blt.n	8004d5c <USB_EPSetStall+0xae>
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00f      	beq.n	8004d5c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	0151      	lsls	r1, r2, #5
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	440a      	add	r2, r1
 8004d52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d56:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d5a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	0151      	lsls	r1, r2, #5
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	440a      	add	r2, r1
 8004d72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b085      	sub	sp, #20
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	785b      	ldrb	r3, [r3, #1]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d128      	bne.n	8004df8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	0151      	lsls	r1, r2, #5
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	440a      	add	r2, r1
 8004dbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dc0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004dc4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	78db      	ldrb	r3, [r3, #3]
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d003      	beq.n	8004dd6 <USB_EPClearStall+0x4c>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	78db      	ldrb	r3, [r3, #3]
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d138      	bne.n	8004e48 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	0151      	lsls	r1, r2, #5
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	440a      	add	r2, r1
 8004dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004df4:	6013      	str	r3, [r2, #0]
 8004df6:	e027      	b.n	8004e48 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	0151      	lsls	r1, r2, #5
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	440a      	add	r2, r1
 8004e0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e16:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	78db      	ldrb	r3, [r3, #3]
 8004e1c:	2b03      	cmp	r3, #3
 8004e1e:	d003      	beq.n	8004e28 <USB_EPClearStall+0x9e>
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	78db      	ldrb	r3, [r3, #3]
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d10f      	bne.n	8004e48 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	0151      	lsls	r1, r2, #5
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	440a      	add	r2, r1
 8004e3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e46:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b085      	sub	sp, #20
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	460b      	mov	r3, r1
 8004e60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e74:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004e78:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	78fb      	ldrb	r3, [r7, #3]
 8004e84:	011b      	lsls	r3, r3, #4
 8004e86:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004e8a:	68f9      	ldr	r1, [r7, #12]
 8004e8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e90:	4313      	orrs	r3, r2
 8004e92:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b084      	sub	sp, #16
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ebc:	f023 0302 	bic.w	r3, r3, #2
 8004ec0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004ec2:	2003      	movs	r0, #3
 8004ec4:	f7fb fb8c 	bl	80005e0 <HAL_Delay>

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b084      	sub	sp, #16
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004eec:	f043 0302 	orr.w	r3, r3, #2
 8004ef0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004ef2:	2003      	movs	r0, #3
 8004ef4:	f7fb fb74 	bl	80005e0 <HAL_Delay>

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b085      	sub	sp, #20
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	4013      	ands	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	0c1b      	lsrs	r3, r3, #16
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	b29b      	uxth	r3, r3
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	460b      	mov	r3, r1
 8004f9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004fa0:	78fb      	ldrb	r3, [r7, #3]
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004fbe:	68bb      	ldr	r3, [r7, #8]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b087      	sub	sp, #28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fee:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004ff0:	78fb      	ldrb	r3, [r7, #3]
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ffc:	01db      	lsls	r3, r3, #7
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	4313      	orrs	r3, r2
 8005004:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005006:	78fb      	ldrb	r3, [r7, #3]
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	4413      	add	r3, r2
 800500e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	4013      	ands	r3, r2
 8005018:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800501a:	68bb      	ldr	r3, [r7, #8]
}
 800501c:	4618      	mov	r0, r3
 800501e:	371c      	adds	r7, #28
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	f003 0301 	and.w	r3, r3, #1
}
 8005038:	4618      	mov	r0, r3
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800505e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005062:	f023 0307 	bic.w	r3, r3, #7
 8005066:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f003 0306 	and.w	r3, r3, #6
 8005074:	2b04      	cmp	r3, #4
 8005076:	d109      	bne.n	800508c <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005086:	f043 0303 	orr.w	r3, r3, #3
 800508a:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800509a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800509e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
	...

080050b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	460b      	mov	r3, r1
 80050ba:	607a      	str	r2, [r7, #4]
 80050bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	333c      	adds	r3, #60	; 0x3c
 80050c6:	3304      	adds	r3, #4
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	4a26      	ldr	r2, [pc, #152]	; (8005168 <USB_EP0_OutStart+0xb8>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d90a      	bls.n	80050ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050e4:	d101      	bne.n	80050ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	e037      	b.n	800515a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f0:	461a      	mov	r2, r3
 80050f2:	2300      	movs	r3, #0
 80050f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005104:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005108:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005118:	f043 0318 	orr.w	r3, r3, #24
 800511c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800512c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005130:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005132:	7afb      	ldrb	r3, [r7, #11]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d10f      	bne.n	8005158 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513e:	461a      	mov	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005152:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005156:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	371c      	adds	r7, #28
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	4f54300a 	.word	0x4f54300a

0800516c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	3301      	adds	r3, #1
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	4a13      	ldr	r2, [pc, #76]	; (80051d0 <USB_CoreReset+0x64>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d901      	bls.n	800518a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e01b      	b.n	80051c2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	2b00      	cmp	r3, #0
 8005190:	daf2      	bge.n	8005178 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005192:	2300      	movs	r3, #0
 8005194:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	f043 0201 	orr.w	r2, r3, #1
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	3301      	adds	r3, #1
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4a09      	ldr	r2, [pc, #36]	; (80051d0 <USB_CoreReset+0x64>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d901      	bls.n	80051b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e006      	b.n	80051c2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d0f0      	beq.n	80051a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	00030d40 	.word	0x00030d40

080051d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	460b      	mov	r3, r1
 80051de:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	7c1b      	ldrb	r3, [r3, #16]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d115      	bne.n	8005218 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80051ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051f0:	2202      	movs	r2, #2
 80051f2:	2181      	movs	r1, #129	; 0x81
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f002 fac2 	bl	800777e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005200:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005204:	2202      	movs	r2, #2
 8005206:	2101      	movs	r1, #1
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f002 fab8 	bl	800777e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8005216:	e012      	b.n	800523e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005218:	2340      	movs	r3, #64	; 0x40
 800521a:	2202      	movs	r2, #2
 800521c:	2181      	movs	r1, #129	; 0x81
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f002 faad 	bl	800777e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800522a:	2340      	movs	r3, #64	; 0x40
 800522c:	2202      	movs	r2, #2
 800522e:	2101      	movs	r1, #1
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f002 faa4 	bl	800777e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800523e:	2308      	movs	r3, #8
 8005240:	2203      	movs	r2, #3
 8005242:	2182      	movs	r1, #130	; 0x82
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f002 fa9a 	bl	800777e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8005250:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005254:	f002 fd48 	bl	8007ce8 <malloc>
 8005258:	4603      	mov	r3, r0
 800525a:	461a      	mov	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005268:	2b00      	cmp	r3, #0
 800526a:	d102      	bne.n	8005272 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800526c:	2301      	movs	r3, #1
 800526e:	73fb      	strb	r3, [r7, #15]
 8005270:	e026      	b.n	80052c0 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005278:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	2200      	movs	r2, #0
 8005288:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2200      	movs	r2, #0
 8005290:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	7c1b      	ldrb	r3, [r3, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d109      	bne.n	80052b0 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052a6:	2101      	movs	r1, #1
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f002 fb59 	bl	8007960 <USBD_LL_PrepareReceive>
 80052ae:	e007      	b.n	80052c0 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052b6:	2340      	movs	r3, #64	; 0x40
 80052b8:	2101      	movs	r1, #1
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f002 fb50 	bl	8007960 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80052c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b084      	sub	sp, #16
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	460b      	mov	r3, r1
 80052d4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80052da:	2181      	movs	r1, #129	; 0x81
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f002 fa74 	bl	80077ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80052e8:	2101      	movs	r1, #1
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f002 fa6d 	bl	80077ca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80052f8:	2182      	movs	r1, #130	; 0x82
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f002 fa65 	bl	80077ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00e      	beq.n	800532e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005320:	4618      	mov	r0, r3
 8005322:	f002 fce9 	bl	8007cf8 <free>
    pdev->pClassData = NULL;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800532e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005348:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800534a:	2300      	movs	r3, #0
 800534c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800534e:	2300      	movs	r3, #0
 8005350:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005352:	2300      	movs	r3, #0
 8005354:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800535e:	2b00      	cmp	r3, #0
 8005360:	d039      	beq.n	80053d6 <USBD_CDC_Setup+0x9e>
 8005362:	2b20      	cmp	r3, #32
 8005364:	d17c      	bne.n	8005460 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	88db      	ldrh	r3, [r3, #6]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d029      	beq.n	80053c2 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	b25b      	sxtb	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	da11      	bge.n	800539c <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8005384:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	88d2      	ldrh	r2, [r2, #6]
 800538a:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800538c:	6939      	ldr	r1, [r7, #16]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	88db      	ldrh	r3, [r3, #6]
 8005392:	461a      	mov	r2, r3
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f001 f9c9 	bl	800672c <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800539a:	e068      	b.n	800546e <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	785a      	ldrb	r2, [r3, #1]
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	88db      	ldrh	r3, [r3, #6]
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80053b2:	6939      	ldr	r1, [r7, #16]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	88db      	ldrh	r3, [r3, #6]
 80053b8:	461a      	mov	r2, r3
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f001 f9e4 	bl	8006788 <USBD_CtlPrepareRx>
    break;
 80053c0:	e055      	b.n	800546e <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	7850      	ldrb	r0, [r2, #1]
 80053ce:	2200      	movs	r2, #0
 80053d0:	6839      	ldr	r1, [r7, #0]
 80053d2:	4798      	blx	r3
    break;
 80053d4:	e04b      	b.n	800546e <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	785b      	ldrb	r3, [r3, #1]
 80053da:	2b0a      	cmp	r3, #10
 80053dc:	d017      	beq.n	800540e <USBD_CDC_Setup+0xd6>
 80053de:	2b0b      	cmp	r3, #11
 80053e0:	d029      	beq.n	8005436 <USBD_CDC_Setup+0xfe>
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d133      	bne.n	800544e <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80053ec:	2b03      	cmp	r3, #3
 80053ee:	d107      	bne.n	8005400 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80053f0:	f107 030c 	add.w	r3, r7, #12
 80053f4:	2202      	movs	r2, #2
 80053f6:	4619      	mov	r1, r3
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f001 f997 	bl	800672c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80053fe:	e02e      	b.n	800545e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8005400:	6839      	ldr	r1, [r7, #0]
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f001 f927 	bl	8006656 <USBD_CtlError>
			  ret = USBD_FAIL;
 8005408:	2302      	movs	r3, #2
 800540a:	75fb      	strb	r3, [r7, #23]
      break;
 800540c:	e027      	b.n	800545e <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005414:	2b03      	cmp	r3, #3
 8005416:	d107      	bne.n	8005428 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8005418:	f107 030f 	add.w	r3, r7, #15
 800541c:	2201      	movs	r2, #1
 800541e:	4619      	mov	r1, r3
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f001 f983 	bl	800672c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8005426:	e01a      	b.n	800545e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8005428:	6839      	ldr	r1, [r7, #0]
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f001 f913 	bl	8006656 <USBD_CtlError>
			  ret = USBD_FAIL;
 8005430:	2302      	movs	r3, #2
 8005432:	75fb      	strb	r3, [r7, #23]
      break;
 8005434:	e013      	b.n	800545e <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800543c:	2b03      	cmp	r3, #3
 800543e:	d00d      	beq.n	800545c <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8005440:	6839      	ldr	r1, [r7, #0]
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f001 f907 	bl	8006656 <USBD_CtlError>
			  ret = USBD_FAIL;
 8005448:	2302      	movs	r3, #2
 800544a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800544c:	e006      	b.n	800545c <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800544e:	6839      	ldr	r1, [r7, #0]
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f001 f900 	bl	8006656 <USBD_CtlError>
      ret = USBD_FAIL;
 8005456:	2302      	movs	r3, #2
 8005458:	75fb      	strb	r3, [r7, #23]
      break;
 800545a:	e000      	b.n	800545e <USBD_CDC_Setup+0x126>
      break;
 800545c:	bf00      	nop
    }
    break;
 800545e:	e006      	b.n	800546e <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8005460:	6839      	ldr	r1, [r7, #0]
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f001 f8f7 	bl	8006656 <USBD_CtlError>
    ret = USBD_FAIL;
 8005468:	2302      	movs	r3, #2
 800546a:	75fb      	strb	r3, [r7, #23]
    break;
 800546c:	bf00      	nop
  }

  return ret;
 800546e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3718      	adds	r7, #24
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	460b      	mov	r3, r1
 8005482:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800548a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005492:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800549a:	2b00      	cmp	r3, #0
 800549c:	d03a      	beq.n	8005514 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800549e:	78fa      	ldrb	r2, [r7, #3]
 80054a0:	6879      	ldr	r1, [r7, #4]
 80054a2:	4613      	mov	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	440b      	add	r3, r1
 80054ac:	331c      	adds	r3, #28
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d029      	beq.n	8005508 <USBD_CDC_DataIn+0x90>
 80054b4:	78fa      	ldrb	r2, [r7, #3]
 80054b6:	6879      	ldr	r1, [r7, #4]
 80054b8:	4613      	mov	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	440b      	add	r3, r1
 80054c2:	331c      	adds	r3, #28
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	78f9      	ldrb	r1, [r7, #3]
 80054c8:	68b8      	ldr	r0, [r7, #8]
 80054ca:	460b      	mov	r3, r1
 80054cc:	00db      	lsls	r3, r3, #3
 80054ce:	1a5b      	subs	r3, r3, r1
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4403      	add	r3, r0
 80054d4:	3344      	adds	r3, #68	; 0x44
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80054dc:	fb03 f301 	mul.w	r3, r3, r1
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d110      	bne.n	8005508 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80054e6:	78fa      	ldrb	r2, [r7, #3]
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	4613      	mov	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	440b      	add	r3, r1
 80054f4:	331c      	adds	r3, #28
 80054f6:	2200      	movs	r2, #0
 80054f8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80054fa:	78f9      	ldrb	r1, [r7, #3]
 80054fc:	2300      	movs	r3, #0
 80054fe:	2200      	movs	r2, #0
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f002 fa0a 	bl	800791a <USBD_LL_Transmit>
 8005506:	e003      	b.n	8005510 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005510:	2300      	movs	r3, #0
 8005512:	e000      	b.n	8005516 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005514:	2302      	movs	r3, #2
  }
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b084      	sub	sp, #16
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
 8005526:	460b      	mov	r3, r1
 8005528:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005530:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8005532:	78fb      	ldrb	r3, [r7, #3]
 8005534:	4619      	mov	r1, r3
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f002 fa35 	bl	80079a6 <USBD_LL_GetRxDataSize>
 800553c:	4602      	mov	r2, r0
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00d      	beq.n	800556a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005562:	4611      	mov	r1, r2
 8005564:	4798      	blx	r3

    return USBD_OK;
 8005566:	2300      	movs	r3, #0
 8005568:	e000      	b.n	800556c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800556a:	2302      	movs	r3, #2
  }
}
 800556c:	4618      	mov	r0, r3
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005582:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800558a:	2b00      	cmp	r3, #0
 800558c:	d015      	beq.n	80055ba <USBD_CDC_EP0_RxReady+0x46>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005594:	2bff      	cmp	r3, #255	; 0xff
 8005596:	d010      	beq.n	80055ba <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80055a6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80055ae:	b292      	uxth	r2, r2
 80055b0:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	22ff      	movs	r2, #255	; 0xff
 80055b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2243      	movs	r2, #67	; 0x43
 80055d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80055d2:	4b03      	ldr	r3, [pc, #12]	; (80055e0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	20000090 	.word	0x20000090

080055e4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2243      	movs	r2, #67	; 0x43
 80055f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80055f2:	4b03      	ldr	r3, [pc, #12]	; (8005600 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	2000004c 	.word	0x2000004c

08005604 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2243      	movs	r2, #67	; 0x43
 8005610:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005612:	4b03      	ldr	r3, [pc, #12]	; (8005620 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005614:	4618      	mov	r0, r3
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	200000d4 	.word	0x200000d4

08005624 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	220a      	movs	r2, #10
 8005630:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005632:	4b03      	ldr	r3, [pc, #12]	; (8005640 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005634:	4618      	mov	r0, r3
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	20000008 	.word	0x20000008

08005644 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800564e:	2302      	movs	r3, #2
 8005650:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d005      	beq.n	8005664 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005664:	7bfb      	ldrb	r3, [r7, #15]
}
 8005666:	4618      	mov	r0, r3
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8005672:	b480      	push	{r7}
 8005674:	b087      	sub	sp, #28
 8005676:	af00      	add	r7, sp, #0
 8005678:	60f8      	str	r0, [r7, #12]
 800567a:	60b9      	str	r1, [r7, #8]
 800567c:	4613      	mov	r3, r2
 800567e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005686:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005690:	88fa      	ldrh	r2, [r7, #6]
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	371c      	adds	r7, #28
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b085      	sub	sp, #20
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80056b6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b084      	sub	sp, #16
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80056dc:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d01c      	beq.n	8005722 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d115      	bne.n	800571e <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005710:	b29b      	uxth	r3, r3
 8005712:	2181      	movs	r1, #129	; 0x81
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f002 f900 	bl	800791a <USBD_LL_Transmit>

      return USBD_OK;
 800571a:	2300      	movs	r3, #0
 800571c:	e002      	b.n	8005724 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005722:	2302      	movs	r3, #2
  }
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800573a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005742:	2b00      	cmp	r3, #0
 8005744:	d017      	beq.n	8005776 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	7c1b      	ldrb	r3, [r3, #16]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d109      	bne.n	8005762 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005754:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005758:	2101      	movs	r1, #1
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f002 f900 	bl	8007960 <USBD_LL_PrepareReceive>
 8005760:	e007      	b.n	8005772 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005768:	2340      	movs	r3, #64	; 0x40
 800576a:	2101      	movs	r1, #1
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f002 f8f7 	bl	8007960 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005772:	2300      	movs	r3, #0
 8005774:	e000      	b.n	8005778 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005776:	2302      	movs	r3, #2
  }
}
 8005778:	4618      	mov	r0, r3
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	4613      	mov	r3, r2
 800578c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005794:	2302      	movs	r3, #2
 8005796:	e01a      	b.n	80057ce <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	79fa      	ldrb	r2, [r7, #7]
 80057c4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f001 ff72 	bl	80076b0 <USBD_LL_Init>

  return USBD_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b085      	sub	sp, #20
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80057e0:	2300      	movs	r3, #0
 80057e2:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d006      	beq.n	80057f8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80057f2:	2300      	movs	r3, #0
 80057f4:	73fb      	strb	r3, [r7, #15]
 80057f6:	e001      	b.n	80057fc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80057f8:	2302      	movs	r3, #2
 80057fa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b082      	sub	sp, #8
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f001 ff98 	bl	8007748 <USBD_LL_Start>

  return USBD_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3708      	adds	r7, #8
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8005822:	b480      	push	{r7}
 8005824:	b083      	sub	sp, #12
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	460b      	mov	r3, r1
 8005842:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8005844:	2302      	movs	r3, #2
 8005846:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00c      	beq.n	800586c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	78fa      	ldrb	r2, [r7, #3]
 800585c:	4611      	mov	r1, r2
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	4798      	blx	r3
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005868:	2300      	movs	r3, #0
 800586a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800586c:	7bfb      	ldrb	r3, [r7, #15]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b082      	sub	sp, #8
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	460b      	mov	r3, r1
 8005880:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	78fa      	ldrb	r2, [r7, #3]
 800588c:	4611      	mov	r1, r2
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	4798      	blx	r3
  return USBD_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3708      	adds	r7, #8
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80058ac:	6839      	ldr	r1, [r7, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 fe94 	bl	80065dc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80058c2:	461a      	mov	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80058d0:	f003 031f 	and.w	r3, r3, #31
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d00c      	beq.n	80058f2 <USBD_LL_SetupStage+0x56>
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d302      	bcc.n	80058e2 <USBD_LL_SetupStage+0x46>
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d010      	beq.n	8005902 <USBD_LL_SetupStage+0x66>
 80058e0:	e017      	b.n	8005912 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80058e8:	4619      	mov	r1, r3
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fa04 	bl	8005cf8 <USBD_StdDevReq>
    break;
 80058f0:	e01a      	b.n	8005928 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80058f8:	4619      	mov	r1, r3
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fa66 	bl	8005dcc <USBD_StdItfReq>
    break;
 8005900:	e012      	b.n	8005928 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005908:	4619      	mov	r1, r3
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 faa4 	bl	8005e58 <USBD_StdEPReq>
    break;
 8005910:	e00a      	b.n	8005928 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8005918:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800591c:	b2db      	uxtb	r3, r3
 800591e:	4619      	mov	r1, r3
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f001 ff71 	bl	8007808 <USBD_LL_StallEP>
    break;
 8005926:	bf00      	nop
  }

  return USBD_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b086      	sub	sp, #24
 8005936:	af00      	add	r7, sp, #0
 8005938:	60f8      	str	r0, [r7, #12]
 800593a:	460b      	mov	r3, r1
 800593c:	607a      	str	r2, [r7, #4]
 800593e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8005940:	7afb      	ldrb	r3, [r7, #11]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d14b      	bne.n	80059de <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800594c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8005954:	2b03      	cmp	r3, #3
 8005956:	d134      	bne.n	80059c2 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	68da      	ldr	r2, [r3, #12]
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	429a      	cmp	r2, r3
 8005962:	d919      	bls.n	8005998 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	68da      	ldr	r2, [r3, #12]
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	1ad2      	subs	r2, r2, r3
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800597a:	429a      	cmp	r2, r3
 800597c:	d203      	bcs.n	8005986 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8005982:	b29b      	uxth	r3, r3
 8005984:	e002      	b.n	800598c <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800598a:	b29b      	uxth	r3, r3
 800598c:	461a      	mov	r2, r3
 800598e:	6879      	ldr	r1, [r7, #4]
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f000 ff17 	bl	80067c4 <USBD_CtlContinueRx>
 8005996:	e038      	b.n	8005a0a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00a      	beq.n	80059ba <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80059aa:	2b03      	cmp	r3, #3
 80059ac:	d105      	bne.n	80059ba <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f000 ff14 	bl	80067e8 <USBD_CtlSendStatus>
 80059c0:	e023      	b.n	8005a0a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80059c8:	2b05      	cmp	r3, #5
 80059ca:	d11e      	bne.n	8005a0a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80059d4:	2100      	movs	r1, #0
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f001 ff16 	bl	8007808 <USBD_LL_StallEP>
 80059dc:	e015      	b.n	8005a0a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00d      	beq.n	8005a06 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80059f0:	2b03      	cmp	r3, #3
 80059f2:	d108      	bne.n	8005a06 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	7afa      	ldrb	r2, [r7, #11]
 80059fe:	4611      	mov	r1, r2
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	4798      	blx	r3
 8005a04:	e001      	b.n	8005a0a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005a06:	2302      	movs	r3, #2
 8005a08:	e000      	b.n	8005a0c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3718      	adds	r7, #24
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	607a      	str	r2, [r7, #4]
 8005a20:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8005a22:	7afb      	ldrb	r3, [r7, #11]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d17f      	bne.n	8005b28 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	3314      	adds	r3, #20
 8005a2c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d15c      	bne.n	8005af2 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d915      	bls.n	8005a70 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	68da      	ldr	r2, [r3, #12]
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	1ad2      	subs	r2, r2, r3
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	461a      	mov	r2, r3
 8005a5a:	6879      	ldr	r1, [r7, #4]
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 fe81 	bl	8006764 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005a62:	2300      	movs	r3, #0
 8005a64:	2200      	movs	r2, #0
 8005a66:	2100      	movs	r1, #0
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f001 ff79 	bl	8007960 <USBD_LL_PrepareReceive>
 8005a6e:	e04e      	b.n	8005b0e <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	6912      	ldr	r2, [r2, #16]
 8005a78:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a7c:	fb02 f201 	mul.w	r2, r2, r1
 8005a80:	1a9b      	subs	r3, r3, r2
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d11c      	bne.n	8005ac0 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	689a      	ldr	r2, [r3, #8]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d316      	bcc.n	8005ac0 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	689a      	ldr	r2, [r3, #8]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d20f      	bcs.n	8005ac0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f000 fe5d 	bl	8006764 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f001 ff51 	bl	8007960 <USBD_LL_PrepareReceive>
 8005abe:	e026      	b.n	8005b0e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00a      	beq.n	8005ae2 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005ad2:	2b03      	cmp	r3, #3
 8005ad4:	d105      	bne.n	8005ae2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005ae2:	2180      	movs	r1, #128	; 0x80
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f001 fe8f 	bl	8007808 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f000 fe8f 	bl	800680e <USBD_CtlReceiveStatus>
 8005af0:	e00d      	b.n	8005b0e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8005af8:	2b04      	cmp	r3, #4
 8005afa:	d004      	beq.n	8005b06 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d103      	bne.n	8005b0e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005b06:	2180      	movs	r1, #128	; 0x80
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f001 fe7d 	bl	8007808 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d11d      	bne.n	8005b54 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f7ff fe82 	bl	8005822 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8005b26:	e015      	b.n	8005b54 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00d      	beq.n	8005b50 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8005b3a:	2b03      	cmp	r3, #3
 8005b3c:	d108      	bne.n	8005b50 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	7afa      	ldrb	r2, [r7, #11]
 8005b48:	4611      	mov	r1, r2
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	4798      	blx	r3
 8005b4e:	e001      	b.n	8005b54 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005b50:	2302      	movs	r3, #2
 8005b52:	e000      	b.n	8005b56 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3718      	adds	r7, #24
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b082      	sub	sp, #8
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b66:	2340      	movs	r3, #64	; 0x40
 8005b68:	2200      	movs	r2, #0
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f001 fe06 	bl	800777e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2240      	movs	r2, #64	; 0x40
 8005b7e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b82:	2340      	movs	r3, #64	; 0x40
 8005b84:	2200      	movs	r2, #0
 8005b86:	2180      	movs	r1, #128	; 0x80
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f001 fdf8 	bl	800777e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2240      	movs	r2, #64	; 0x40
 8005b98:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d009      	beq.n	8005bd6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	6852      	ldr	r2, [r2, #4]
 8005bce:	b2d2      	uxtb	r2, r2
 8005bd0:	4611      	mov	r1, r2
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	4798      	blx	r3
  }

  return USBD_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	460b      	mov	r3, r1
 8005bea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	78fa      	ldrb	r2, [r7, #3]
 8005bf0:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2204      	movs	r2, #4
 8005c18:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b083      	sub	sp, #12
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	d10b      	bne.n	8005c76 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d005      	beq.n	8005c76 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	460b      	mov	r3, r1
 8005c8a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr

08005cca <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b082      	sub	sp, #8
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	6852      	ldr	r2, [r2, #4]
 8005ce6:	b2d2      	uxtb	r2, r2
 8005ce8:	4611      	mov	r1, r2
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	4798      	blx	r3

  return USBD_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d0e:	2b20      	cmp	r3, #32
 8005d10:	d004      	beq.n	8005d1c <USBD_StdDevReq+0x24>
 8005d12:	2b40      	cmp	r3, #64	; 0x40
 8005d14:	d002      	beq.n	8005d1c <USBD_StdDevReq+0x24>
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d008      	beq.n	8005d2c <USBD_StdDevReq+0x34>
 8005d1a:	e04c      	b.n	8005db6 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	6839      	ldr	r1, [r7, #0]
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	4798      	blx	r3
    break;
 8005d2a:	e049      	b.n	8005dc0 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	785b      	ldrb	r3, [r3, #1]
 8005d30:	2b09      	cmp	r3, #9
 8005d32:	d83a      	bhi.n	8005daa <USBD_StdDevReq+0xb2>
 8005d34:	a201      	add	r2, pc, #4	; (adr r2, 8005d3c <USBD_StdDevReq+0x44>)
 8005d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3a:	bf00      	nop
 8005d3c:	08005d8d 	.word	0x08005d8d
 8005d40:	08005da1 	.word	0x08005da1
 8005d44:	08005dab 	.word	0x08005dab
 8005d48:	08005d97 	.word	0x08005d97
 8005d4c:	08005dab 	.word	0x08005dab
 8005d50:	08005d6f 	.word	0x08005d6f
 8005d54:	08005d65 	.word	0x08005d65
 8005d58:	08005dab 	.word	0x08005dab
 8005d5c:	08005d83 	.word	0x08005d83
 8005d60:	08005d79 	.word	0x08005d79
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8005d64:	6839      	ldr	r1, [r7, #0]
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f9d2 	bl	8006110 <USBD_GetDescriptor>
      break;
 8005d6c:	e022      	b.n	8005db4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8005d6e:	6839      	ldr	r1, [r7, #0]
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 fac7 	bl	8006304 <USBD_SetAddress>
      break;
 8005d76:	e01d      	b.n	8005db4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8005d78:	6839      	ldr	r1, [r7, #0]
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 fb04 	bl	8006388 <USBD_SetConfig>
      break;
 8005d80:	e018      	b.n	8005db4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8005d82:	6839      	ldr	r1, [r7, #0]
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fb8d 	bl	80064a4 <USBD_GetConfig>
      break;
 8005d8a:	e013      	b.n	8005db4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fbbc 	bl	800650c <USBD_GetStatus>
      break;
 8005d94:	e00e      	b.n	8005db4 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8005d96:	6839      	ldr	r1, [r7, #0]
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 fbea 	bl	8006572 <USBD_SetFeature>
      break;
 8005d9e:	e009      	b.n	8005db4 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8005da0:	6839      	ldr	r1, [r7, #0]
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 fbf9 	bl	800659a <USBD_ClrFeature>
      break;
 8005da8:	e004      	b.n	8005db4 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8005daa:	6839      	ldr	r1, [r7, #0]
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 fc52 	bl	8006656 <USBD_CtlError>
      break;
 8005db2:	bf00      	nop
    }
    break;
 8005db4:	e004      	b.n	8005dc0 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8005db6:	6839      	ldr	r1, [r7, #0]
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fc4c 	bl	8006656 <USBD_CtlError>
    break;
 8005dbe:	bf00      	nop
  }

  return ret;
 8005dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop

08005dcc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005de2:	2b20      	cmp	r3, #32
 8005de4:	d003      	beq.n	8005dee <USBD_StdItfReq+0x22>
 8005de6:	2b40      	cmp	r3, #64	; 0x40
 8005de8:	d001      	beq.n	8005dee <USBD_StdItfReq+0x22>
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d12a      	bne.n	8005e44 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005df4:	3b01      	subs	r3, #1
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d81d      	bhi.n	8005e36 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	889b      	ldrh	r3, [r3, #4]
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d813      	bhi.n	8005e2c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	6839      	ldr	r1, [r7, #0]
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	4798      	blx	r3
 8005e12:	4603      	mov	r3, r0
 8005e14:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	88db      	ldrh	r3, [r3, #6]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d110      	bne.n	8005e40 <USBD_StdItfReq+0x74>
 8005e1e:	7bfb      	ldrb	r3, [r7, #15]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10d      	bne.n	8005e40 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fcdf 	bl	80067e8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8005e2a:	e009      	b.n	8005e40 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8005e2c:	6839      	ldr	r1, [r7, #0]
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fc11 	bl	8006656 <USBD_CtlError>
      break;
 8005e34:	e004      	b.n	8005e40 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8005e36:	6839      	ldr	r1, [r7, #0]
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 fc0c 	bl	8006656 <USBD_CtlError>
      break;
 8005e3e:	e000      	b.n	8005e42 <USBD_StdItfReq+0x76>
      break;
 8005e40:	bf00      	nop
    }
    break;
 8005e42:	e004      	b.n	8005e4e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005e44:	6839      	ldr	r1, [r7, #0]
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fc05 	bl	8006656 <USBD_CtlError>
    break;
 8005e4c:	bf00      	nop
  }

  return USBD_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	889b      	ldrh	r3, [r3, #4]
 8005e6a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e74:	2b20      	cmp	r3, #32
 8005e76:	d004      	beq.n	8005e82 <USBD_StdEPReq+0x2a>
 8005e78:	2b40      	cmp	r3, #64	; 0x40
 8005e7a:	d002      	beq.n	8005e82 <USBD_StdEPReq+0x2a>
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d008      	beq.n	8005e92 <USBD_StdEPReq+0x3a>
 8005e80:	e13b      	b.n	80060fa <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	6839      	ldr	r1, [r7, #0]
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	4798      	blx	r3
    break;
 8005e90:	e138      	b.n	8006104 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e9a:	2b20      	cmp	r3, #32
 8005e9c:	d10a      	bne.n	8005eb4 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	6839      	ldr	r1, [r7, #0]
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	4798      	blx	r3
 8005eac:	4603      	mov	r3, r0
 8005eae:	73fb      	strb	r3, [r7, #15]

      return ret;
 8005eb0:	7bfb      	ldrb	r3, [r7, #15]
 8005eb2:	e128      	b.n	8006106 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	785b      	ldrb	r3, [r3, #1]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d03e      	beq.n	8005f3a <USBD_StdEPReq+0xe2>
 8005ebc:	2b03      	cmp	r3, #3
 8005ebe:	d002      	beq.n	8005ec6 <USBD_StdEPReq+0x6e>
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d070      	beq.n	8005fa6 <USBD_StdEPReq+0x14e>
 8005ec4:	e113      	b.n	80060ee <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d002      	beq.n	8005ed6 <USBD_StdEPReq+0x7e>
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d015      	beq.n	8005f00 <USBD_StdEPReq+0xa8>
 8005ed4:	e02b      	b.n	8005f2e <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ed6:	7bbb      	ldrb	r3, [r7, #14]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00c      	beq.n	8005ef6 <USBD_StdEPReq+0x9e>
 8005edc:	7bbb      	ldrb	r3, [r7, #14]
 8005ede:	2b80      	cmp	r3, #128	; 0x80
 8005ee0:	d009      	beq.n	8005ef6 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8005ee2:	7bbb      	ldrb	r3, [r7, #14]
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f001 fc8e 	bl	8007808 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8005eec:	2180      	movs	r1, #128	; 0x80
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f001 fc8a 	bl	8007808 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005ef4:	e020      	b.n	8005f38 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8005ef6:	6839      	ldr	r1, [r7, #0]
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fbac 	bl	8006656 <USBD_CtlError>
        break;
 8005efe:	e01b      	b.n	8005f38 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	885b      	ldrh	r3, [r3, #2]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d10e      	bne.n	8005f26 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005f08:	7bbb      	ldrb	r3, [r7, #14]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00b      	beq.n	8005f26 <USBD_StdEPReq+0xce>
 8005f0e:	7bbb      	ldrb	r3, [r7, #14]
 8005f10:	2b80      	cmp	r3, #128	; 0x80
 8005f12:	d008      	beq.n	8005f26 <USBD_StdEPReq+0xce>
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	88db      	ldrh	r3, [r3, #6]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d104      	bne.n	8005f26 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8005f1c:	7bbb      	ldrb	r3, [r7, #14]
 8005f1e:	4619      	mov	r1, r3
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f001 fc71 	bl	8007808 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 fc5e 	bl	80067e8 <USBD_CtlSendStatus>

        break;
 8005f2c:	e004      	b.n	8005f38 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8005f2e:	6839      	ldr	r1, [r7, #0]
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fb90 	bl	8006656 <USBD_CtlError>
        break;
 8005f36:	bf00      	nop
      }
      break;
 8005f38:	e0de      	b.n	80060f8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d002      	beq.n	8005f4a <USBD_StdEPReq+0xf2>
 8005f44:	2b03      	cmp	r3, #3
 8005f46:	d015      	beq.n	8005f74 <USBD_StdEPReq+0x11c>
 8005f48:	e026      	b.n	8005f98 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f4a:	7bbb      	ldrb	r3, [r7, #14]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00c      	beq.n	8005f6a <USBD_StdEPReq+0x112>
 8005f50:	7bbb      	ldrb	r3, [r7, #14]
 8005f52:	2b80      	cmp	r3, #128	; 0x80
 8005f54:	d009      	beq.n	8005f6a <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8005f56:	7bbb      	ldrb	r3, [r7, #14]
 8005f58:	4619      	mov	r1, r3
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f001 fc54 	bl	8007808 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8005f60:	2180      	movs	r1, #128	; 0x80
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f001 fc50 	bl	8007808 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005f68:	e01c      	b.n	8005fa4 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8005f6a:	6839      	ldr	r1, [r7, #0]
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fb72 	bl	8006656 <USBD_CtlError>
        break;
 8005f72:	e017      	b.n	8005fa4 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	885b      	ldrh	r3, [r3, #2]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d112      	bne.n	8005fa2 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005f7c:	7bbb      	ldrb	r3, [r7, #14]
 8005f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d004      	beq.n	8005f90 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8005f86:	7bbb      	ldrb	r3, [r7, #14]
 8005f88:	4619      	mov	r1, r3
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f001 fc5b 	bl	8007846 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fc29 	bl	80067e8 <USBD_CtlSendStatus>
        }
        break;
 8005f96:	e004      	b.n	8005fa2 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8005f98:	6839      	ldr	r1, [r7, #0]
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fb5b 	bl	8006656 <USBD_CtlError>
        break;
 8005fa0:	e000      	b.n	8005fa4 <USBD_StdEPReq+0x14c>
        break;
 8005fa2:	bf00      	nop
      }
      break;
 8005fa4:	e0a8      	b.n	80060f8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d002      	beq.n	8005fb6 <USBD_StdEPReq+0x15e>
 8005fb0:	2b03      	cmp	r3, #3
 8005fb2:	d031      	beq.n	8006018 <USBD_StdEPReq+0x1c0>
 8005fb4:	e095      	b.n	80060e2 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fb6:	7bbb      	ldrb	r3, [r7, #14]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d007      	beq.n	8005fcc <USBD_StdEPReq+0x174>
 8005fbc:	7bbb      	ldrb	r3, [r7, #14]
 8005fbe:	2b80      	cmp	r3, #128	; 0x80
 8005fc0:	d004      	beq.n	8005fcc <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8005fc2:	6839      	ldr	r1, [r7, #0]
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 fb46 	bl	8006656 <USBD_CtlError>
          break;
 8005fca:	e08f      	b.n	80060ec <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005fcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	da0b      	bge.n	8005fec <USBD_StdEPReq+0x194>
 8005fd4:	7bbb      	ldrb	r3, [r7, #14]
 8005fd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fda:	4613      	mov	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	3310      	adds	r3, #16
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	3304      	adds	r3, #4
 8005fea:	e00a      	b.n	8006002 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8005fec:	7bbb      	ldrb	r3, [r7, #14]
 8005fee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	4413      	add	r3, r2
 8006002:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2200      	movs	r2, #0
 8006008:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	2202      	movs	r2, #2
 800600e:	4619      	mov	r1, r3
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 fb8b 	bl	800672c <USBD_CtlSendData>
          break;
 8006016:	e069      	b.n	80060ec <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8006018:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800601c:	2b00      	cmp	r3, #0
 800601e:	da11      	bge.n	8006044 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006020:	7bbb      	ldrb	r3, [r7, #14]
 8006022:	f003 020f 	and.w	r2, r3, #15
 8006026:	6879      	ldr	r1, [r7, #4]
 8006028:	4613      	mov	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	440b      	add	r3, r1
 8006032:	3318      	adds	r3, #24
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d117      	bne.n	800606a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800603a:	6839      	ldr	r1, [r7, #0]
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 fb0a 	bl	8006656 <USBD_CtlError>
            break;
 8006042:	e053      	b.n	80060ec <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006044:	7bbb      	ldrb	r3, [r7, #14]
 8006046:	f003 020f 	and.w	r2, r3, #15
 800604a:	6879      	ldr	r1, [r7, #4]
 800604c:	4613      	mov	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	440b      	add	r3, r1
 8006056:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d104      	bne.n	800606a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8006060:	6839      	ldr	r1, [r7, #0]
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 faf7 	bl	8006656 <USBD_CtlError>
            break;
 8006068:	e040      	b.n	80060ec <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800606a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800606e:	2b00      	cmp	r3, #0
 8006070:	da0b      	bge.n	800608a <USBD_StdEPReq+0x232>
 8006072:	7bbb      	ldrb	r3, [r7, #14]
 8006074:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006078:	4613      	mov	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4413      	add	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	3310      	adds	r3, #16
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	4413      	add	r3, r2
 8006086:	3304      	adds	r3, #4
 8006088:	e00a      	b.n	80060a0 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800608a:	7bbb      	ldrb	r3, [r7, #14]
 800608c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006090:	4613      	mov	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4413      	add	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	4413      	add	r3, r2
 80060a0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80060a2:	7bbb      	ldrb	r3, [r7, #14]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d002      	beq.n	80060ae <USBD_StdEPReq+0x256>
 80060a8:	7bbb      	ldrb	r3, [r7, #14]
 80060aa:	2b80      	cmp	r3, #128	; 0x80
 80060ac:	d103      	bne.n	80060b6 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	2200      	movs	r2, #0
 80060b2:	601a      	str	r2, [r3, #0]
 80060b4:	e00e      	b.n	80060d4 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80060b6:	7bbb      	ldrb	r3, [r7, #14]
 80060b8:	4619      	mov	r1, r3
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f001 fbe2 	bl	8007884 <USBD_LL_IsStallEP>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	2201      	movs	r2, #1
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	e002      	b.n	80060d4 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2200      	movs	r2, #0
 80060d2:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	2202      	movs	r2, #2
 80060d8:	4619      	mov	r1, r3
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 fb26 	bl	800672c <USBD_CtlSendData>
          break;
 80060e0:	e004      	b.n	80060ec <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 80060e2:	6839      	ldr	r1, [r7, #0]
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fab6 	bl	8006656 <USBD_CtlError>
        break;
 80060ea:	bf00      	nop
      }
      break;
 80060ec:	e004      	b.n	80060f8 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 80060ee:	6839      	ldr	r1, [r7, #0]
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fab0 	bl	8006656 <USBD_CtlError>
      break;
 80060f6:	bf00      	nop
    }
    break;
 80060f8:	e004      	b.n	8006104 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80060fa:	6839      	ldr	r1, [r7, #0]
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 faaa 	bl	8006656 <USBD_CtlError>
    break;
 8006102:	bf00      	nop
  }

  return ret;
 8006104:	7bfb      	ldrb	r3, [r7, #15]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
	...

08006110 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	885b      	ldrh	r3, [r3, #2]
 800611e:	0a1b      	lsrs	r3, r3, #8
 8006120:	b29b      	uxth	r3, r3
 8006122:	3b01      	subs	r3, #1
 8006124:	2b06      	cmp	r3, #6
 8006126:	f200 80c9 	bhi.w	80062bc <USBD_GetDescriptor+0x1ac>
 800612a:	a201      	add	r2, pc, #4	; (adr r2, 8006130 <USBD_GetDescriptor+0x20>)
 800612c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006130:	0800614d 	.word	0x0800614d
 8006134:	08006165 	.word	0x08006165
 8006138:	080061a5 	.word	0x080061a5
 800613c:	080062bd 	.word	0x080062bd
 8006140:	080062bd 	.word	0x080062bd
 8006144:	08006269 	.word	0x08006269
 8006148:	0800628f 	.word	0x0800628f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	7c12      	ldrb	r2, [r2, #16]
 8006158:	f107 010a 	add.w	r1, r7, #10
 800615c:	4610      	mov	r0, r2
 800615e:	4798      	blx	r3
 8006160:	60f8      	str	r0, [r7, #12]
    break;
 8006162:	e0b0      	b.n	80062c6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	7c1b      	ldrb	r3, [r3, #16]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10d      	bne.n	8006188 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006174:	f107 020a 	add.w	r2, r7, #10
 8006178:	4610      	mov	r0, r2
 800617a:	4798      	blx	r3
 800617c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	3301      	adds	r3, #1
 8006182:	2202      	movs	r2, #2
 8006184:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006186:	e09e      	b.n	80062c6 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006190:	f107 020a 	add.w	r2, r7, #10
 8006194:	4610      	mov	r0, r2
 8006196:	4798      	blx	r3
 8006198:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	3301      	adds	r3, #1
 800619e:	2202      	movs	r2, #2
 80061a0:	701a      	strb	r2, [r3, #0]
    break;
 80061a2:	e090      	b.n	80062c6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	885b      	ldrh	r3, [r3, #2]
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b05      	cmp	r3, #5
 80061ac:	d856      	bhi.n	800625c <USBD_GetDescriptor+0x14c>
 80061ae:	a201      	add	r2, pc, #4	; (adr r2, 80061b4 <USBD_GetDescriptor+0xa4>)
 80061b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b4:	080061cd 	.word	0x080061cd
 80061b8:	080061e5 	.word	0x080061e5
 80061bc:	080061fd 	.word	0x080061fd
 80061c0:	08006215 	.word	0x08006215
 80061c4:	0800622d 	.word	0x0800622d
 80061c8:	08006245 	.word	0x08006245
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	7c12      	ldrb	r2, [r2, #16]
 80061d8:	f107 010a 	add.w	r1, r7, #10
 80061dc:	4610      	mov	r0, r2
 80061de:	4798      	blx	r3
 80061e0:	60f8      	str	r0, [r7, #12]
      break;
 80061e2:	e040      	b.n	8006266 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	7c12      	ldrb	r2, [r2, #16]
 80061f0:	f107 010a 	add.w	r1, r7, #10
 80061f4:	4610      	mov	r0, r2
 80061f6:	4798      	blx	r3
 80061f8:	60f8      	str	r0, [r7, #12]
      break;
 80061fa:	e034      	b.n	8006266 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	7c12      	ldrb	r2, [r2, #16]
 8006208:	f107 010a 	add.w	r1, r7, #10
 800620c:	4610      	mov	r0, r2
 800620e:	4798      	blx	r3
 8006210:	60f8      	str	r0, [r7, #12]
      break;
 8006212:	e028      	b.n	8006266 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	7c12      	ldrb	r2, [r2, #16]
 8006220:	f107 010a 	add.w	r1, r7, #10
 8006224:	4610      	mov	r0, r2
 8006226:	4798      	blx	r3
 8006228:	60f8      	str	r0, [r7, #12]
      break;
 800622a:	e01c      	b.n	8006266 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	7c12      	ldrb	r2, [r2, #16]
 8006238:	f107 010a 	add.w	r1, r7, #10
 800623c:	4610      	mov	r0, r2
 800623e:	4798      	blx	r3
 8006240:	60f8      	str	r0, [r7, #12]
      break;
 8006242:	e010      	b.n	8006266 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	7c12      	ldrb	r2, [r2, #16]
 8006250:	f107 010a 	add.w	r1, r7, #10
 8006254:	4610      	mov	r0, r2
 8006256:	4798      	blx	r3
 8006258:	60f8      	str	r0, [r7, #12]
      break;
 800625a:	e004      	b.n	8006266 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800625c:	6839      	ldr	r1, [r7, #0]
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f9f9 	bl	8006656 <USBD_CtlError>
      return;
 8006264:	e04b      	b.n	80062fe <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8006266:	e02e      	b.n	80062c6 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	7c1b      	ldrb	r3, [r3, #16]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d109      	bne.n	8006284 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006278:	f107 020a 	add.w	r2, r7, #10
 800627c:	4610      	mov	r0, r2
 800627e:	4798      	blx	r3
 8006280:	60f8      	str	r0, [r7, #12]
      break;
 8006282:	e020      	b.n	80062c6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006284:	6839      	ldr	r1, [r7, #0]
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f9e5 	bl	8006656 <USBD_CtlError>
      return;
 800628c:	e037      	b.n	80062fe <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	7c1b      	ldrb	r3, [r3, #16]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10d      	bne.n	80062b2 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800629c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629e:	f107 020a 	add.w	r2, r7, #10
 80062a2:	4610      	mov	r0, r2
 80062a4:	4798      	blx	r3
 80062a6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	3301      	adds	r3, #1
 80062ac:	2207      	movs	r2, #7
 80062ae:	701a      	strb	r2, [r3, #0]
      break;
 80062b0:	e009      	b.n	80062c6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80062b2:	6839      	ldr	r1, [r7, #0]
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f9ce 	bl	8006656 <USBD_CtlError>
      return;
 80062ba:	e020      	b.n	80062fe <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80062bc:	6839      	ldr	r1, [r7, #0]
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f9c9 	bl	8006656 <USBD_CtlError>
    return;
 80062c4:	e01b      	b.n	80062fe <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80062c6:	897b      	ldrh	r3, [r7, #10]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d011      	beq.n	80062f0 <USBD_GetDescriptor+0x1e0>
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	88db      	ldrh	r3, [r3, #6]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00d      	beq.n	80062f0 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	88da      	ldrh	r2, [r3, #6]
 80062d8:	897b      	ldrh	r3, [r7, #10]
 80062da:	4293      	cmp	r3, r2
 80062dc:	bf28      	it	cs
 80062de:	4613      	movcs	r3, r2
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80062e4:	897b      	ldrh	r3, [r7, #10]
 80062e6:	461a      	mov	r2, r3
 80062e8:	68f9      	ldr	r1, [r7, #12]
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fa1e 	bl	800672c <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	88db      	ldrh	r3, [r3, #6]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d102      	bne.n	80062fe <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fa75 	bl	80067e8 <USBD_CtlSendStatus>
  }
}
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	889b      	ldrh	r3, [r3, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d130      	bne.n	8006378 <USBD_SetAddress+0x74>
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	88db      	ldrh	r3, [r3, #6]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d12c      	bne.n	8006378 <USBD_SetAddress+0x74>
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	885b      	ldrh	r3, [r3, #2]
 8006322:	2b7f      	cmp	r3, #127	; 0x7f
 8006324:	d828      	bhi.n	8006378 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	885b      	ldrh	r3, [r3, #2]
 800632a:	b2db      	uxtb	r3, r3
 800632c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006330:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006338:	2b03      	cmp	r3, #3
 800633a:	d104      	bne.n	8006346 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f989 	bl	8006656 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006344:	e01c      	b.n	8006380 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	7bfa      	ldrb	r2, [r7, #15]
 800634a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800634e:	7bfb      	ldrb	r3, [r7, #15]
 8006350:	4619      	mov	r1, r3
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f001 fac2 	bl	80078dc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 fa45 	bl	80067e8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800635e:	7bfb      	ldrb	r3, [r7, #15]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d004      	beq.n	800636e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2202      	movs	r2, #2
 8006368:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800636c:	e008      	b.n	8006380 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006376:	e003      	b.n	8006380 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006378:	6839      	ldr	r1, [r7, #0]
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f96b 	bl	8006656 <USBD_CtlError>
  }
}
 8006380:	bf00      	nop
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	885b      	ldrh	r3, [r3, #2]
 8006396:	b2da      	uxtb	r2, r3
 8006398:	4b41      	ldr	r3, [pc, #260]	; (80064a0 <USBD_SetConfig+0x118>)
 800639a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800639c:	4b40      	ldr	r3, [pc, #256]	; (80064a0 <USBD_SetConfig+0x118>)
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d904      	bls.n	80063ae <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80063a4:	6839      	ldr	r1, [r7, #0]
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f955 	bl	8006656 <USBD_CtlError>
 80063ac:	e075      	b.n	800649a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d002      	beq.n	80063be <USBD_SetConfig+0x36>
 80063b8:	2b03      	cmp	r3, #3
 80063ba:	d023      	beq.n	8006404 <USBD_SetConfig+0x7c>
 80063bc:	e062      	b.n	8006484 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80063be:	4b38      	ldr	r3, [pc, #224]	; (80064a0 <USBD_SetConfig+0x118>)
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d01a      	beq.n	80063fc <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80063c6:	4b36      	ldr	r3, [pc, #216]	; (80064a0 <USBD_SetConfig+0x118>)
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	461a      	mov	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2203      	movs	r2, #3
 80063d4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80063d8:	4b31      	ldr	r3, [pc, #196]	; (80064a0 <USBD_SetConfig+0x118>)
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	4619      	mov	r1, r3
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7ff fa2a 	bl	8005838 <USBD_SetClassConfig>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d104      	bne.n	80063f4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80063ea:	6839      	ldr	r1, [r7, #0]
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 f932 	bl	8006656 <USBD_CtlError>
          return;
 80063f2:	e052      	b.n	800649a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 f9f7 	bl	80067e8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80063fa:	e04e      	b.n	800649a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 f9f3 	bl	80067e8 <USBD_CtlSendStatus>
      break;
 8006402:	e04a      	b.n	800649a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006404:	4b26      	ldr	r3, [pc, #152]	; (80064a0 <USBD_SetConfig+0x118>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d112      	bne.n	8006432 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8006414:	4b22      	ldr	r3, [pc, #136]	; (80064a0 <USBD_SetConfig+0x118>)
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	461a      	mov	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800641e:	4b20      	ldr	r3, [pc, #128]	; (80064a0 <USBD_SetConfig+0x118>)
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	4619      	mov	r1, r3
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7ff fa26 	bl	8005876 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f9dc 	bl	80067e8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8006430:	e033      	b.n	800649a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8006432:	4b1b      	ldr	r3, [pc, #108]	; (80064a0 <USBD_SetConfig+0x118>)
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	461a      	mov	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	429a      	cmp	r2, r3
 800643e:	d01d      	beq.n	800647c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	b2db      	uxtb	r3, r3
 8006446:	4619      	mov	r1, r3
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f7ff fa14 	bl	8005876 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800644e:	4b14      	ldr	r3, [pc, #80]	; (80064a0 <USBD_SetConfig+0x118>)
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	461a      	mov	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006458:	4b11      	ldr	r3, [pc, #68]	; (80064a0 <USBD_SetConfig+0x118>)
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	4619      	mov	r1, r3
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7ff f9ea 	bl	8005838 <USBD_SetClassConfig>
 8006464:	4603      	mov	r3, r0
 8006466:	2b02      	cmp	r3, #2
 8006468:	d104      	bne.n	8006474 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800646a:	6839      	ldr	r1, [r7, #0]
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f8f2 	bl	8006656 <USBD_CtlError>
          return;
 8006472:	e012      	b.n	800649a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f9b7 	bl	80067e8 <USBD_CtlSendStatus>
      break;
 800647a:	e00e      	b.n	800649a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f9b3 	bl	80067e8 <USBD_CtlSendStatus>
      break;
 8006482:	e00a      	b.n	800649a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8006484:	6839      	ldr	r1, [r7, #0]
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f8e5 	bl	8006656 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800648c:	4b04      	ldr	r3, [pc, #16]	; (80064a0 <USBD_SetConfig+0x118>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	4619      	mov	r1, r3
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7ff f9ef 	bl	8005876 <USBD_ClrClassConfig>
      break;
 8006498:	bf00      	nop
    }
  }
}
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	200001fc 	.word	0x200001fc

080064a4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	88db      	ldrh	r3, [r3, #6]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d004      	beq.n	80064c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80064b6:	6839      	ldr	r1, [r7, #0]
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f8cc 	bl	8006656 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80064be:	e021      	b.n	8006504 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	db17      	blt.n	80064fa <USBD_GetConfig+0x56>
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	dd02      	ble.n	80064d4 <USBD_GetConfig+0x30>
 80064ce:	2b03      	cmp	r3, #3
 80064d0:	d00b      	beq.n	80064ea <USBD_GetConfig+0x46>
 80064d2:	e012      	b.n	80064fa <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	3308      	adds	r3, #8
 80064de:	2201      	movs	r2, #1
 80064e0:	4619      	mov	r1, r3
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f922 	bl	800672c <USBD_CtlSendData>
      break;
 80064e8:	e00c      	b.n	8006504 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	3304      	adds	r3, #4
 80064ee:	2201      	movs	r2, #1
 80064f0:	4619      	mov	r1, r3
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f91a 	bl	800672c <USBD_CtlSendData>
      break;
 80064f8:	e004      	b.n	8006504 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80064fa:	6839      	ldr	r1, [r7, #0]
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 f8aa 	bl	8006656 <USBD_CtlError>
      break;
 8006502:	bf00      	nop
}
 8006504:	bf00      	nop
 8006506:	3708      	adds	r7, #8
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800651c:	3b01      	subs	r3, #1
 800651e:	2b02      	cmp	r3, #2
 8006520:	d81e      	bhi.n	8006560 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	88db      	ldrh	r3, [r3, #6]
 8006526:	2b02      	cmp	r3, #2
 8006528:	d004      	beq.n	8006534 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800652a:	6839      	ldr	r1, [r7, #0]
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f892 	bl	8006656 <USBD_CtlError>
      break;
 8006532:	e01a      	b.n	800656a <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8006540:	2b00      	cmp	r3, #0
 8006542:	d005      	beq.n	8006550 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	f043 0202 	orr.w	r2, r3, #2
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	330c      	adds	r3, #12
 8006554:	2202      	movs	r2, #2
 8006556:	4619      	mov	r1, r3
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 f8e7 	bl	800672c <USBD_CtlSendData>
    break;
 800655e:	e004      	b.n	800656a <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8006560:	6839      	ldr	r1, [r7, #0]
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f877 	bl	8006656 <USBD_CtlError>
    break;
 8006568:	bf00      	nop
  }
}
 800656a:	bf00      	nop
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b082      	sub	sp, #8
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	885b      	ldrh	r3, [r3, #2]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d106      	bne.n	8006592 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f92b 	bl	80067e8 <USBD_CtlSendStatus>
  }

}
 8006592:	bf00      	nop
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b082      	sub	sp, #8
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
 80065a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80065aa:	3b01      	subs	r3, #1
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d80b      	bhi.n	80065c8 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	885b      	ldrh	r3, [r3, #2]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d10c      	bne.n	80065d2 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 f911 	bl	80067e8 <USBD_CtlSendStatus>
    }
    break;
 80065c6:	e004      	b.n	80065d2 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80065c8:	6839      	ldr	r1, [r7, #0]
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f843 	bl	8006656 <USBD_CtlError>
    break;
 80065d0:	e000      	b.n	80065d4 <USBD_ClrFeature+0x3a>
    break;
 80065d2:	bf00      	nop
  }
}
 80065d4:	bf00      	nop
 80065d6:	3708      	adds	r7, #8
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	781a      	ldrb	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	785a      	ldrb	r2, [r3, #1]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	3302      	adds	r3, #2
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	3303      	adds	r3, #3
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	b29b      	uxth	r3, r3
 8006606:	021b      	lsls	r3, r3, #8
 8006608:	b29b      	uxth	r3, r3
 800660a:	4413      	add	r3, r2
 800660c:	b29a      	uxth	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	3304      	adds	r3, #4
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	b29a      	uxth	r2, r3
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	3305      	adds	r3, #5
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	b29b      	uxth	r3, r3
 8006622:	021b      	lsls	r3, r3, #8
 8006624:	b29b      	uxth	r3, r3
 8006626:	4413      	add	r3, r2
 8006628:	b29a      	uxth	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	3306      	adds	r3, #6
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	b29a      	uxth	r2, r3
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	3307      	adds	r3, #7
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	b29b      	uxth	r3, r3
 800663e:	021b      	lsls	r3, r3, #8
 8006640:	b29b      	uxth	r3, r3
 8006642:	4413      	add	r3, r2
 8006644:	b29a      	uxth	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	80da      	strh	r2, [r3, #6]

}
 800664a:	bf00      	nop
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006656:	b580      	push	{r7, lr}
 8006658:	b082      	sub	sp, #8
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8006660:	2180      	movs	r1, #128	; 0x80
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f001 f8d0 	bl	8007808 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8006668:	2100      	movs	r1, #0
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f001 f8cc 	bl	8007808 <USBD_LL_StallEP>
}
 8006670:	bf00      	nop
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006684:	2300      	movs	r3, #0
 8006686:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d032      	beq.n	80066f4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f000 f834 	bl	80066fc <USBD_GetLen>
 8006694:	4603      	mov	r3, r0
 8006696:	3301      	adds	r3, #1
 8006698:	b29b      	uxth	r3, r3
 800669a:	005b      	lsls	r3, r3, #1
 800669c:	b29a      	uxth	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80066a2:	7dfb      	ldrb	r3, [r7, #23]
 80066a4:	1c5a      	adds	r2, r3, #1
 80066a6:	75fa      	strb	r2, [r7, #23]
 80066a8:	461a      	mov	r2, r3
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	4413      	add	r3, r2
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	7812      	ldrb	r2, [r2, #0]
 80066b2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80066b4:	7dfb      	ldrb	r3, [r7, #23]
 80066b6:	1c5a      	adds	r2, r3, #1
 80066b8:	75fa      	strb	r2, [r7, #23]
 80066ba:	461a      	mov	r2, r3
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	4413      	add	r3, r2
 80066c0:	2203      	movs	r2, #3
 80066c2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80066c4:	e012      	b.n	80066ec <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	1c5a      	adds	r2, r3, #1
 80066ca:	60fa      	str	r2, [r7, #12]
 80066cc:	7dfa      	ldrb	r2, [r7, #23]
 80066ce:	1c51      	adds	r1, r2, #1
 80066d0:	75f9      	strb	r1, [r7, #23]
 80066d2:	4611      	mov	r1, r2
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	440a      	add	r2, r1
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80066dc:	7dfb      	ldrb	r3, [r7, #23]
 80066de:	1c5a      	adds	r2, r3, #1
 80066e0:	75fa      	strb	r2, [r7, #23]
 80066e2:	461a      	mov	r2, r3
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	4413      	add	r3, r2
 80066e8:	2200      	movs	r2, #0
 80066ea:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1e8      	bne.n	80066c6 <USBD_GetString+0x4e>
    }
  }
}
 80066f4:	bf00      	nop
 80066f6:	3718      	adds	r7, #24
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8006704:	2300      	movs	r3, #0
 8006706:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8006708:	e005      	b.n	8006716 <USBD_GetLen+0x1a>
    {
        len++;
 800670a:	7bfb      	ldrb	r3, [r7, #15]
 800670c:	3301      	adds	r3, #1
 800670e:	73fb      	strb	r3, [r7, #15]
        buf++;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	3301      	adds	r3, #1
 8006714:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1f5      	bne.n	800670a <USBD_GetLen+0xe>
    }

    return len;
 800671e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006720:	4618      	mov	r0, r3
 8006722:	3714      	adds	r7, #20
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	4613      	mov	r3, r2
 8006738:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2202      	movs	r2, #2
 800673e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8006742:	88fa      	ldrh	r2, [r7, #6]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006748:	88fa      	ldrh	r2, [r7, #6]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800674e:	88fb      	ldrh	r3, [r7, #6]
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	2100      	movs	r1, #0
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f001 f8e0 	bl	800791a <USBD_LL_Transmit>

  return USBD_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	4613      	mov	r3, r2
 8006770:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8006772:	88fb      	ldrh	r3, [r7, #6]
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	2100      	movs	r1, #0
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f001 f8ce 	bl	800791a <USBD_LL_Transmit>

  return USBD_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	4613      	mov	r3, r2
 8006794:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2203      	movs	r2, #3
 800679a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800679e:	88fa      	ldrh	r2, [r7, #6]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 80067a6:	88fa      	ldrh	r2, [r7, #6]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80067ae:	88fb      	ldrh	r3, [r7, #6]
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	2100      	movs	r1, #0
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f001 f8d3 	bl	8007960 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	4613      	mov	r3, r2
 80067d0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80067d2:	88fb      	ldrh	r3, [r7, #6]
 80067d4:	68ba      	ldr	r2, [r7, #8]
 80067d6:	2100      	movs	r1, #0
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f001 f8c1 	bl	8007960 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2204      	movs	r2, #4
 80067f4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80067f8:	2300      	movs	r3, #0
 80067fa:	2200      	movs	r2, #0
 80067fc:	2100      	movs	r1, #0
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f001 f88b 	bl	800791a <USBD_LL_Transmit>

  return USBD_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b082      	sub	sp, #8
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2205      	movs	r2, #5
 800681a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800681e:	2300      	movs	r3, #0
 8006820:	2200      	movs	r2, #0
 8006822:	2100      	movs	r1, #0
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f001 f89b 	bl	8007960 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3708      	adds	r7, #8
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
   uint8_t MACAddr[6] ;

  heth.Instance = ETH;
 800683a:	4b17      	ldr	r3, [pc, #92]	; (8006898 <MX_ETH_Init+0x64>)
 800683c:	4a17      	ldr	r2, [pc, #92]	; (800689c <MX_ETH_Init+0x68>)
 800683e:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8006840:	4b15      	ldr	r3, [pc, #84]	; (8006898 <MX_ETH_Init+0x64>)
 8006842:	2201      	movs	r2, #1
 8006844:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8006846:	4b14      	ldr	r3, [pc, #80]	; (8006898 <MX_ETH_Init+0x64>)
 8006848:	2200      	movs	r2, #0
 800684a:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800684c:	2300      	movs	r3, #0
 800684e:	703b      	strb	r3, [r7, #0]
  MACAddr[1] = 0x80;
 8006850:	2380      	movs	r3, #128	; 0x80
 8006852:	707b      	strb	r3, [r7, #1]
  MACAddr[2] = 0xE1;
 8006854:	23e1      	movs	r3, #225	; 0xe1
 8006856:	70bb      	strb	r3, [r7, #2]
  MACAddr[3] = 0x00;
 8006858:	2300      	movs	r3, #0
 800685a:	70fb      	strb	r3, [r7, #3]
  MACAddr[4] = 0x00;
 800685c:	2300      	movs	r3, #0
 800685e:	713b      	strb	r3, [r7, #4]
  MACAddr[5] = 0x00;
 8006860:	2300      	movs	r3, #0
 8006862:	717b      	strb	r3, [r7, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8006864:	4a0c      	ldr	r2, [pc, #48]	; (8006898 <MX_ETH_Init+0x64>)
 8006866:	463b      	mov	r3, r7
 8006868:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800686a:	4b0b      	ldr	r3, [pc, #44]	; (8006898 <MX_ETH_Init+0x64>)
 800686c:	2200      	movs	r2, #0
 800686e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8006870:	4b09      	ldr	r3, [pc, #36]	; (8006898 <MX_ETH_Init+0x64>)
 8006872:	2200      	movs	r2, #0
 8006874:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8006876:	4b08      	ldr	r3, [pc, #32]	; (8006898 <MX_ETH_Init+0x64>)
 8006878:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800687c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800687e:	4806      	ldr	r0, [pc, #24]	; (8006898 <MX_ETH_Init+0x64>)
 8006880:	f7fa f804 	bl	800088c <HAL_ETH_Init>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d001      	beq.n	800688e <MX_ETH_Init+0x5a>
  {
    Error_Handler();
 800688a:	f000 faf9 	bl	8006e80 <Error_Handler>
  }

}
 800688e:	bf00      	nop
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	200004ac 	.word	0x200004ac
 800689c:	40028000 	.word	0x40028000

080068a0 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b08e      	sub	sp, #56	; 0x38
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068ac:	2200      	movs	r2, #0
 80068ae:	601a      	str	r2, [r3, #0]
 80068b0:	605a      	str	r2, [r3, #4]
 80068b2:	609a      	str	r2, [r3, #8]
 80068b4:	60da      	str	r2, [r3, #12]
 80068b6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a55      	ldr	r2, [pc, #340]	; (8006a14 <HAL_ETH_MspInit+0x174>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	f040 80a4 	bne.w	8006a0c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80068c4:	2300      	movs	r3, #0
 80068c6:	623b      	str	r3, [r7, #32]
 80068c8:	4b53      	ldr	r3, [pc, #332]	; (8006a18 <HAL_ETH_MspInit+0x178>)
 80068ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068cc:	4a52      	ldr	r2, [pc, #328]	; (8006a18 <HAL_ETH_MspInit+0x178>)
 80068ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80068d2:	6313      	str	r3, [r2, #48]	; 0x30
 80068d4:	4b50      	ldr	r3, [pc, #320]	; (8006a18 <HAL_ETH_MspInit+0x178>)
 80068d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068dc:	623b      	str	r3, [r7, #32]
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	2300      	movs	r3, #0
 80068e2:	61fb      	str	r3, [r7, #28]
 80068e4:	4b4c      	ldr	r3, [pc, #304]	; (8006a18 <HAL_ETH_MspInit+0x178>)
 80068e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e8:	4a4b      	ldr	r2, [pc, #300]	; (8006a18 <HAL_ETH_MspInit+0x178>)
 80068ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80068ee:	6313      	str	r3, [r2, #48]	; 0x30
 80068f0:	4b49      	ldr	r3, [pc, #292]	; (8006a18 <HAL_ETH_MspInit+0x178>)
 80068f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80068f8:	61fb      	str	r3, [r7, #28]
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	2300      	movs	r3, #0
 80068fe:	61bb      	str	r3, [r7, #24]
 8006900:	4b45      	ldr	r3, [pc, #276]	; (8006a18 <HAL_ETH_MspInit+0x178>)
 8006902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006904:	4a44      	ldr	r2, [pc, #272]	; (8006a18 <HAL_ETH_MspInit+0x178>)
 8006906:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800690a:	6313      	str	r3, [r2, #48]	; 0x30
 800690c:	4b42      	ldr	r3, [pc, #264]	; (8006a18 <HAL_ETH_MspInit+0x178>)
 800690e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006914:	61bb      	str	r3, [r7, #24]
 8006916:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006918:	2300      	movs	r3, #0
 800691a:	617b      	str	r3, [r7, #20]
 800691c:	4b3e      	ldr	r3, [pc, #248]	; (8006a18 <HAL_ETH_MspInit+0x178>)
 800691e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006920:	4a3d      	ldr	r2, [pc, #244]	; (8006a18 <HAL_ETH_MspInit+0x178>)
 8006922:	f043 0304 	orr.w	r3, r3, #4
 8006926:	6313      	str	r3, [r2, #48]	; 0x30
 8006928:	4b3b      	ldr	r3, [pc, #236]	; (8006a18 <HAL_ETH_MspInit+0x178>)
 800692a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692c:	f003 0304 	and.w	r3, r3, #4
 8006930:	617b      	str	r3, [r7, #20]
 8006932:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006934:	2300      	movs	r3, #0
 8006936:	613b      	str	r3, [r7, #16]
 8006938:	4b37      	ldr	r3, [pc, #220]	; (8006a18 <HAL_ETH_MspInit+0x178>)
 800693a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693c:	4a36      	ldr	r2, [pc, #216]	; (8006a18 <HAL_ETH_MspInit+0x178>)
 800693e:	f043 0301 	orr.w	r3, r3, #1
 8006942:	6313      	str	r3, [r2, #48]	; 0x30
 8006944:	4b34      	ldr	r3, [pc, #208]	; (8006a18 <HAL_ETH_MspInit+0x178>)
 8006946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	613b      	str	r3, [r7, #16]
 800694e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006950:	2300      	movs	r3, #0
 8006952:	60fb      	str	r3, [r7, #12]
 8006954:	4b30      	ldr	r3, [pc, #192]	; (8006a18 <HAL_ETH_MspInit+0x178>)
 8006956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006958:	4a2f      	ldr	r2, [pc, #188]	; (8006a18 <HAL_ETH_MspInit+0x178>)
 800695a:	f043 0302 	orr.w	r3, r3, #2
 800695e:	6313      	str	r3, [r2, #48]	; 0x30
 8006960:	4b2d      	ldr	r3, [pc, #180]	; (8006a18 <HAL_ETH_MspInit+0x178>)
 8006962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006964:	f003 0302 	and.w	r3, r3, #2
 8006968:	60fb      	str	r3, [r7, #12]
 800696a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800696c:	2300      	movs	r3, #0
 800696e:	60bb      	str	r3, [r7, #8]
 8006970:	4b29      	ldr	r3, [pc, #164]	; (8006a18 <HAL_ETH_MspInit+0x178>)
 8006972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006974:	4a28      	ldr	r2, [pc, #160]	; (8006a18 <HAL_ETH_MspInit+0x178>)
 8006976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800697a:	6313      	str	r3, [r2, #48]	; 0x30
 800697c:	4b26      	ldr	r3, [pc, #152]	; (8006a18 <HAL_ETH_MspInit+0x178>)
 800697e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006984:	60bb      	str	r3, [r7, #8]
 8006986:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006988:	2332      	movs	r3, #50	; 0x32
 800698a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800698c:	2302      	movs	r3, #2
 800698e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006990:	2300      	movs	r3, #0
 8006992:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006994:	2303      	movs	r3, #3
 8006996:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006998:	230b      	movs	r3, #11
 800699a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800699c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069a0:	4619      	mov	r1, r3
 80069a2:	481e      	ldr	r0, [pc, #120]	; (8006a1c <HAL_ETH_MspInit+0x17c>)
 80069a4:	f7fa fbe0 	bl	8001168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80069a8:	2386      	movs	r3, #134	; 0x86
 80069aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069ac:	2302      	movs	r3, #2
 80069ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069b0:	2300      	movs	r3, #0
 80069b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069b4:	2303      	movs	r3, #3
 80069b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80069b8:	230b      	movs	r3, #11
 80069ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069c0:	4619      	mov	r1, r3
 80069c2:	4817      	ldr	r0, [pc, #92]	; (8006a20 <HAL_ETH_MspInit+0x180>)
 80069c4:	f7fa fbd0 	bl	8001168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80069c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80069cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069ce:	2302      	movs	r3, #2
 80069d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069d2:	2300      	movs	r3, #0
 80069d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069d6:	2303      	movs	r3, #3
 80069d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80069da:	230b      	movs	r3, #11
 80069dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80069de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069e2:	4619      	mov	r1, r3
 80069e4:	480f      	ldr	r0, [pc, #60]	; (8006a24 <HAL_ETH_MspInit+0x184>)
 80069e6:	f7fa fbbf 	bl	8001168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80069ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80069ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069f0:	2302      	movs	r3, #2
 80069f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069f4:	2300      	movs	r3, #0
 80069f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069f8:	2303      	movs	r3, #3
 80069fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80069fc:	230b      	movs	r3, #11
 80069fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a04:	4619      	mov	r1, r3
 8006a06:	4808      	ldr	r0, [pc, #32]	; (8006a28 <HAL_ETH_MspInit+0x188>)
 8006a08:	f7fa fbae 	bl	8001168 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006a0c:	bf00      	nop
 8006a0e:	3738      	adds	r7, #56	; 0x38
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	40028000 	.word	0x40028000
 8006a18:	40023800 	.word	0x40023800
 8006a1c:	40020800 	.word	0x40020800
 8006a20:	40020000 	.word	0x40020000
 8006a24:	40020400 	.word	0x40020400
 8006a28:	40021800 	.word	0x40021800

08006a2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b08c      	sub	sp, #48	; 0x30
 8006a30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a32:	f107 031c 	add.w	r3, r7, #28
 8006a36:	2200      	movs	r2, #0
 8006a38:	601a      	str	r2, [r3, #0]
 8006a3a:	605a      	str	r2, [r3, #4]
 8006a3c:	609a      	str	r2, [r3, #8]
 8006a3e:	60da      	str	r2, [r3, #12]
 8006a40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a42:	2300      	movs	r3, #0
 8006a44:	61bb      	str	r3, [r7, #24]
 8006a46:	4b56      	ldr	r3, [pc, #344]	; (8006ba0 <MX_GPIO_Init+0x174>)
 8006a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4a:	4a55      	ldr	r2, [pc, #340]	; (8006ba0 <MX_GPIO_Init+0x174>)
 8006a4c:	f043 0304 	orr.w	r3, r3, #4
 8006a50:	6313      	str	r3, [r2, #48]	; 0x30
 8006a52:	4b53      	ldr	r3, [pc, #332]	; (8006ba0 <MX_GPIO_Init+0x174>)
 8006a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a56:	f003 0304 	and.w	r3, r3, #4
 8006a5a:	61bb      	str	r3, [r7, #24]
 8006a5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006a5e:	2300      	movs	r3, #0
 8006a60:	617b      	str	r3, [r7, #20]
 8006a62:	4b4f      	ldr	r3, [pc, #316]	; (8006ba0 <MX_GPIO_Init+0x174>)
 8006a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a66:	4a4e      	ldr	r2, [pc, #312]	; (8006ba0 <MX_GPIO_Init+0x174>)
 8006a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8006a6e:	4b4c      	ldr	r3, [pc, #304]	; (8006ba0 <MX_GPIO_Init+0x174>)
 8006a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a76:	617b      	str	r3, [r7, #20]
 8006a78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	613b      	str	r3, [r7, #16]
 8006a7e:	4b48      	ldr	r3, [pc, #288]	; (8006ba0 <MX_GPIO_Init+0x174>)
 8006a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a82:	4a47      	ldr	r2, [pc, #284]	; (8006ba0 <MX_GPIO_Init+0x174>)
 8006a84:	f043 0301 	orr.w	r3, r3, #1
 8006a88:	6313      	str	r3, [r2, #48]	; 0x30
 8006a8a:	4b45      	ldr	r3, [pc, #276]	; (8006ba0 <MX_GPIO_Init+0x174>)
 8006a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8e:	f003 0301 	and.w	r3, r3, #1
 8006a92:	613b      	str	r3, [r7, #16]
 8006a94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a96:	2300      	movs	r3, #0
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	4b41      	ldr	r3, [pc, #260]	; (8006ba0 <MX_GPIO_Init+0x174>)
 8006a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9e:	4a40      	ldr	r2, [pc, #256]	; (8006ba0 <MX_GPIO_Init+0x174>)
 8006aa0:	f043 0302 	orr.w	r3, r3, #2
 8006aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8006aa6:	4b3e      	ldr	r3, [pc, #248]	; (8006ba0 <MX_GPIO_Init+0x174>)
 8006aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aaa:	f003 0302 	and.w	r3, r3, #2
 8006aae:	60fb      	str	r3, [r7, #12]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	60bb      	str	r3, [r7, #8]
 8006ab6:	4b3a      	ldr	r3, [pc, #232]	; (8006ba0 <MX_GPIO_Init+0x174>)
 8006ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aba:	4a39      	ldr	r2, [pc, #228]	; (8006ba0 <MX_GPIO_Init+0x174>)
 8006abc:	f043 0308 	orr.w	r3, r3, #8
 8006ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ac2:	4b37      	ldr	r3, [pc, #220]	; (8006ba0 <MX_GPIO_Init+0x174>)
 8006ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac6:	f003 0308 	and.w	r3, r3, #8
 8006aca:	60bb      	str	r3, [r7, #8]
 8006acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006ace:	2300      	movs	r3, #0
 8006ad0:	607b      	str	r3, [r7, #4]
 8006ad2:	4b33      	ldr	r3, [pc, #204]	; (8006ba0 <MX_GPIO_Init+0x174>)
 8006ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad6:	4a32      	ldr	r2, [pc, #200]	; (8006ba0 <MX_GPIO_Init+0x174>)
 8006ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006adc:	6313      	str	r3, [r2, #48]	; 0x30
 8006ade:	4b30      	ldr	r3, [pc, #192]	; (8006ba0 <MX_GPIO_Init+0x174>)
 8006ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae6:	607b      	str	r3, [r7, #4]
 8006ae8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8006aea:	2200      	movs	r2, #0
 8006aec:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8006af0:	482c      	ldr	r0, [pc, #176]	; (8006ba4 <MX_GPIO_Init+0x178>)
 8006af2:	f7fa fce3 	bl	80014bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8006af6:	2200      	movs	r2, #0
 8006af8:	2140      	movs	r1, #64	; 0x40
 8006afa:	482b      	ldr	r0, [pc, #172]	; (8006ba8 <MX_GPIO_Init+0x17c>)
 8006afc:	f7fa fcde 	bl	80014bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8006b00:	2200      	movs	r2, #0
 8006b02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b06:	4829      	ldr	r0, [pc, #164]	; (8006bac <MX_GPIO_Init+0x180>)
 8006b08:	f7fa fcd8 	bl	80014bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8006b0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006b12:	4b27      	ldr	r3, [pc, #156]	; (8006bb0 <MX_GPIO_Init+0x184>)
 8006b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b16:	2300      	movs	r3, #0
 8006b18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8006b1a:	f107 031c 	add.w	r3, r7, #28
 8006b1e:	4619      	mov	r1, r3
 8006b20:	4822      	ldr	r0, [pc, #136]	; (8006bac <MX_GPIO_Init+0x180>)
 8006b22:	f7fa fb21 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8006b26:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8006b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b30:	2300      	movs	r3, #0
 8006b32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b34:	2300      	movs	r3, #0
 8006b36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b38:	f107 031c 	add.w	r3, r7, #28
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	4819      	ldr	r0, [pc, #100]	; (8006ba4 <MX_GPIO_Init+0x178>)
 8006b40:	f7fa fb12 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8006b44:	2340      	movs	r3, #64	; 0x40
 8006b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b50:	2300      	movs	r3, #0
 8006b52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8006b54:	f107 031c 	add.w	r3, r7, #28
 8006b58:	4619      	mov	r1, r3
 8006b5a:	4813      	ldr	r0, [pc, #76]	; (8006ba8 <MX_GPIO_Init+0x17c>)
 8006b5c:	f7fa fb04 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8006b60:	2380      	movs	r3, #128	; 0x80
 8006b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b64:	2300      	movs	r3, #0
 8006b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8006b6c:	f107 031c 	add.w	r3, r7, #28
 8006b70:	4619      	mov	r1, r3
 8006b72:	480d      	ldr	r0, [pc, #52]	; (8006ba8 <MX_GPIO_Init+0x17c>)
 8006b74:	f7fa faf8 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8006b78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b82:	2300      	movs	r3, #0
 8006b84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b86:	2300      	movs	r3, #0
 8006b88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8006b8a:	f107 031c 	add.w	r3, r7, #28
 8006b8e:	4619      	mov	r1, r3
 8006b90:	4806      	ldr	r0, [pc, #24]	; (8006bac <MX_GPIO_Init+0x180>)
 8006b92:	f7fa fae9 	bl	8001168 <HAL_GPIO_Init>

}
 8006b96:	bf00      	nop
 8006b98:	3730      	adds	r7, #48	; 0x30
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	40023800 	.word	0x40023800
 8006ba4:	40020400 	.word	0x40020400
 8006ba8:	40021800 	.word	0x40021800
 8006bac:	40020800 	.word	0x40020800
 8006bb0:	10110000 	.word	0x10110000

08006bb4 <HAL_UART_RxCpltCallback>:
uint8_t rx_data;
uint8_t rx_buffer[40];
uint8_t char_buffer[2];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a2d      	ldr	r2, [pc, #180]	; (8006c78 <HAL_UART_RxCpltCallback+0xc4>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d153      	bne.n	8006c6e <HAL_UART_RxCpltCallback+0xba>
	{
		if (rx_index == 0)
 8006bc6:	4b2d      	ldr	r3, [pc, #180]	; (8006c7c <HAL_UART_RxCpltCallback+0xc8>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10d      	bne.n	8006bea <HAL_UART_RxCpltCallback+0x36>
		{
			for (int i = 0; i < 20; i++)
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60fb      	str	r3, [r7, #12]
 8006bd2:	e007      	b.n	8006be4 <HAL_UART_RxCpltCallback+0x30>
			{
				rx_buffer[i] = 0;
 8006bd4:	4a2a      	ldr	r2, [pc, #168]	; (8006c80 <HAL_UART_RxCpltCallback+0xcc>)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	4413      	add	r3, r2
 8006bda:	2200      	movs	r2, #0
 8006bdc:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 20; i++)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3301      	adds	r3, #1
 8006be2:	60fb      	str	r3, [r7, #12]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2b13      	cmp	r3, #19
 8006be8:	ddf4      	ble.n	8006bd4 <HAL_UART_RxCpltCallback+0x20>
			}
		}

		// Calling CDC_Transmit_FS in usbd_cdc_if

		char_buffer[0] = rx_data;
 8006bea:	4b26      	ldr	r3, [pc, #152]	; (8006c84 <HAL_UART_RxCpltCallback+0xd0>)
 8006bec:	781a      	ldrb	r2, [r3, #0]
 8006bee:	4b26      	ldr	r3, [pc, #152]	; (8006c88 <HAL_UART_RxCpltCallback+0xd4>)
 8006bf0:	701a      	strb	r2, [r3, #0]
		if (rx_data !=13 )			// if the charcter received is other than 'enter' ascii 13, save the data in buffer
 8006bf2:	4b24      	ldr	r3, [pc, #144]	; (8006c84 <HAL_UART_RxCpltCallback+0xd0>)
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	2b0d      	cmp	r3, #13
 8006bf8:	d00f      	beq.n	8006c1a <HAL_UART_RxCpltCallback+0x66>
		{
			rx_buffer[rx_index++] = rx_data;
 8006bfa:	4b20      	ldr	r3, [pc, #128]	; (8006c7c <HAL_UART_RxCpltCallback+0xc8>)
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	1c5a      	adds	r2, r3, #1
 8006c00:	b2d1      	uxtb	r1, r2
 8006c02:	4a1e      	ldr	r2, [pc, #120]	; (8006c7c <HAL_UART_RxCpltCallback+0xc8>)
 8006c04:	7011      	strb	r1, [r2, #0]
 8006c06:	461a      	mov	r2, r3
 8006c08:	4b1e      	ldr	r3, [pc, #120]	; (8006c84 <HAL_UART_RxCpltCallback+0xd0>)
 8006c0a:	7819      	ldrb	r1, [r3, #0]
 8006c0c:	4b1c      	ldr	r3, [pc, #112]	; (8006c80 <HAL_UART_RxCpltCallback+0xcc>)
 8006c0e:	5499      	strb	r1, [r3, r2]

			// Calling CDC_Transmit_FS in usbd_cdc_if
			CDC_Transmit_FS(char_buffer, 1);
 8006c10:	2101      	movs	r1, #1
 8006c12:	481d      	ldr	r0, [pc, #116]	; (8006c88 <HAL_UART_RxCpltCallback+0xd4>)
 8006c14:	f000 fb8c 	bl	8007330 <CDC_Transmit_FS>
 8006c18:	e024      	b.n	8006c64 <HAL_UART_RxCpltCallback+0xb0>
		}
		else
		{
			char_buffer[1] = 0x0A;     // New line
 8006c1a:	4b1b      	ldr	r3, [pc, #108]	; (8006c88 <HAL_UART_RxCpltCallback+0xd4>)
 8006c1c:	220a      	movs	r2, #10
 8006c1e:	705a      	strb	r2, [r3, #1]

			rx_buffer[rx_index++] = rx_data;
 8006c20:	4b16      	ldr	r3, [pc, #88]	; (8006c7c <HAL_UART_RxCpltCallback+0xc8>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	1c5a      	adds	r2, r3, #1
 8006c26:	b2d1      	uxtb	r1, r2
 8006c28:	4a14      	ldr	r2, [pc, #80]	; (8006c7c <HAL_UART_RxCpltCallback+0xc8>)
 8006c2a:	7011      	strb	r1, [r2, #0]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	4b15      	ldr	r3, [pc, #84]	; (8006c84 <HAL_UART_RxCpltCallback+0xd0>)
 8006c30:	7819      	ldrb	r1, [r3, #0]
 8006c32:	4b13      	ldr	r3, [pc, #76]	; (8006c80 <HAL_UART_RxCpltCallback+0xcc>)
 8006c34:	5499      	strb	r1, [r3, r2]
			rx_buffer[rx_index++] = 0x0A;
 8006c36:	4b11      	ldr	r3, [pc, #68]	; (8006c7c <HAL_UART_RxCpltCallback+0xc8>)
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	1c5a      	adds	r2, r3, #1
 8006c3c:	b2d1      	uxtb	r1, r2
 8006c3e:	4a0f      	ldr	r2, [pc, #60]	; (8006c7c <HAL_UART_RxCpltCallback+0xc8>)
 8006c40:	7011      	strb	r1, [r2, #0]
 8006c42:	461a      	mov	r2, r3
 8006c44:	4b0e      	ldr	r3, [pc, #56]	; (8006c80 <HAL_UART_RxCpltCallback+0xcc>)
 8006c46:	210a      	movs	r1, #10
 8006c48:	5499      	strb	r1, [r3, r2]
			rx_index = 0;
 8006c4a:	4b0c      	ldr	r3, [pc, #48]	; (8006c7c <HAL_UART_RxCpltCallback+0xc8>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, rx_buffer, sizeof(rx_buffer), 200);    // transmit the data via uart
 8006c50:	23c8      	movs	r3, #200	; 0xc8
 8006c52:	2228      	movs	r2, #40	; 0x28
 8006c54:	490a      	ldr	r1, [pc, #40]	; (8006c80 <HAL_UART_RxCpltCallback+0xcc>)
 8006c56:	480d      	ldr	r0, [pc, #52]	; (8006c8c <HAL_UART_RxCpltCallback+0xd8>)
 8006c58:	f7fc fa6b 	bl	8003132 <HAL_UART_Transmit>

			// Calling CDC_Transmit_FS in usbd_cdc_if
			CDC_Transmit_FS(char_buffer, 2);
 8006c5c:	2102      	movs	r1, #2
 8006c5e:	480a      	ldr	r0, [pc, #40]	; (8006c88 <HAL_UART_RxCpltCallback+0xd4>)
 8006c60:	f000 fb66 	bl	8007330 <CDC_Transmit_FS>

		}

        HAL_UART_Receive_IT(&huart3, &rx_data,1);   // receive data (one character only)
 8006c64:	2201      	movs	r2, #1
 8006c66:	4907      	ldr	r1, [pc, #28]	; (8006c84 <HAL_UART_RxCpltCallback+0xd0>)
 8006c68:	4808      	ldr	r0, [pc, #32]	; (8006c8c <HAL_UART_RxCpltCallback+0xd8>)
 8006c6a:	f7fc fafb 	bl	8003264 <HAL_UART_Receive_IT>
	}


}
 8006c6e:	bf00      	nop
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	40004800 	.word	0x40004800
 8006c7c:	20000205 	.word	0x20000205
 8006c80:	2000055c 	.word	0x2000055c
 8006c84:	2000058e 	.word	0x2000058e
 8006c88:	200004f4 	.word	0x200004f4
 8006c8c:	20000590 	.word	0x20000590

08006c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006c90:	b5b0      	push	{r4, r5, r7, lr}
 8006c92:	b098      	sub	sp, #96	; 0x60
 8006c94:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006c96:	f7f9 fc31 	bl	80004fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006c9a:	f000 f887 	bl	8006dac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006c9e:	f7ff fec5 	bl	8006a2c <MX_GPIO_Init>
  MX_ETH_Init();
 8006ca2:	f7ff fdc7 	bl	8006834 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8006ca6:	f000 f9c5 	bl	8007034 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8006caa:	f000 fa3d 	bl	8007128 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 2 */

   __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);  // This will enable UART Receive interrupt
 8006cae:	4b36      	ldr	r3, [pc, #216]	; (8006d88 <main+0xf8>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68da      	ldr	r2, [r3, #12]
 8006cb4:	4b34      	ldr	r3, [pc, #208]	; (8006d88 <main+0xf8>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f042 0220 	orr.w	r2, r2, #32
 8006cbc:	60da      	str	r2, [r3, #12]

   HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	4932      	ldr	r1, [pc, #200]	; (8006d8c <main+0xfc>)
 8006cc2:	4831      	ldr	r0, [pc, #196]	; (8006d88 <main+0xf8>)
 8006cc4:	f7fc face 	bl	8003264 <HAL_UART_Receive_IT>

    uint8_t HiMsgUART[] = "Hello UART, CDC is waiting to receive!\r\n";
 8006cc8:	4b31      	ldr	r3, [pc, #196]	; (8006d90 <main+0x100>)
 8006cca:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8006cce:	461d      	mov	r5, r3
 8006cd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006cd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cd8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006cdc:	c403      	stmia	r4!, {r0, r1}
 8006cde:	7022      	strb	r2, [r4, #0]
    uint8_t HiMsgCDC[] = "Hello CDC, UART is waiting to receive!\r\n";
 8006ce0:	4b2c      	ldr	r3, [pc, #176]	; (8006d94 <main+0x104>)
 8006ce2:	1d3c      	adds	r4, r7, #4
 8006ce4:	461d      	mov	r5, r3
 8006ce6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006cec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006cf2:	c403      	stmia	r4!, {r0, r1}
 8006cf4:	7022      	strb	r2, [r4, #0]
	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */


	  if (MessageSent == 0)
 8006cf6:	4b28      	ldr	r3, [pc, #160]	; (8006d98 <main+0x108>)
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d12c      	bne.n	8006d58 <main+0xc8>
	  {
		  // Toggle LEDs to signal that program is running
          for (int i = 0; i < 5; i++)
 8006cfe:	2300      	movs	r3, #0
 8006d00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d02:	e011      	b.n	8006d28 <main+0x98>
          {
        	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8006d04:	2180      	movs	r1, #128	; 0x80
 8006d06:	4825      	ldr	r0, [pc, #148]	; (8006d9c <main+0x10c>)
 8006d08:	f7fa fbf1 	bl	80014ee <HAL_GPIO_TogglePin>
		  	  HAL_Delay(200);
 8006d0c:	20c8      	movs	r0, #200	; 0xc8
 8006d0e:	f7f9 fc67 	bl	80005e0 <HAL_Delay>
		  	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8006d12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006d16:	4821      	ldr	r0, [pc, #132]	; (8006d9c <main+0x10c>)
 8006d18:	f7fa fbe9 	bl	80014ee <HAL_GPIO_TogglePin>
		  	  HAL_Delay(200);
 8006d1c:	20c8      	movs	r0, #200	; 0xc8
 8006d1e:	f7f9 fc5f 	bl	80005e0 <HAL_Delay>
          for (int i = 0; i < 5; i++)
 8006d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d24:	3301      	adds	r3, #1
 8006d26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d2a:	2b04      	cmp	r3, #4
 8006d2c:	ddea      	ble.n	8006d04 <main+0x74>
          }

		  // Calling HAL_UART_Transmit in stm32f4xx_hal_uart.c
		  HAL_UART_Transmit(&huart3,HiMsgUART,sizeof(HiMsgUART),100);// Sending in normal mode
 8006d2e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8006d32:	2364      	movs	r3, #100	; 0x64
 8006d34:	2229      	movs	r2, #41	; 0x29
 8006d36:	4814      	ldr	r0, [pc, #80]	; (8006d88 <main+0xf8>)
 8006d38:	f7fc f9fb 	bl	8003132 <HAL_UART_Transmit>

		  // Calling CDC_Transmit_FS in usbd_cdc_if
		  CDC_Transmit_FS(HiMsgCDC, strlen((const char*)HiMsgCDC));
 8006d3c:	1d3b      	adds	r3, r7, #4
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7f9 fa54 	bl	80001ec <strlen>
 8006d44:	4603      	mov	r3, r0
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	1d3b      	adds	r3, r7, #4
 8006d4a:	4611      	mov	r1, r2
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f000 faef 	bl	8007330 <CDC_Transmit_FS>

		  MessageSent = 1;
 8006d52:	4b11      	ldr	r3, [pc, #68]	; (8006d98 <main+0x108>)
 8006d54:	2201      	movs	r2, #1
 8006d56:	701a      	strb	r2, [r3, #0]
	  }

	  cnt = VCP_retrieveInputData(ReadBuffer, &Len);
 8006d58:	4911      	ldr	r1, [pc, #68]	; (8006da0 <main+0x110>)
 8006d5a:	4812      	ldr	r0, [pc, #72]	; (8006da4 <main+0x114>)
 8006d5c:	f000 fb0e 	bl	800737c <VCP_retrieveInputData>
 8006d60:	4603      	mov	r3, r0
 8006d62:	b2da      	uxtb	r2, r3
 8006d64:	4b10      	ldr	r3, [pc, #64]	; (8006da8 <main+0x118>)
 8006d66:	701a      	strb	r2, [r3, #0]

	//  HAL_UART_Receive(&huart3, receiveData, 10, 100);

	  if (Len > 0)
 8006d68:	4b0d      	ldr	r3, [pc, #52]	; (8006da0 <main+0x110>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d0c2      	beq.n	8006cf6 <main+0x66>
	  {
		  HAL_UART_Transmit(&huart3,ReadBuffer,sizeof(ReadBuffer),Len);// Sending in normal mode
 8006d70:	4b0b      	ldr	r3, [pc, #44]	; (8006da0 <main+0x110>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2264      	movs	r2, #100	; 0x64
 8006d76:	490b      	ldr	r1, [pc, #44]	; (8006da4 <main+0x114>)
 8006d78:	4803      	ldr	r0, [pc, #12]	; (8006d88 <main+0xf8>)
 8006d7a:	f7fc f9da 	bl	8003132 <HAL_UART_Transmit>
		  Len = 0;
 8006d7e:	4b08      	ldr	r3, [pc, #32]	; (8006da0 <main+0x110>)
 8006d80:	2200      	movs	r2, #0
 8006d82:	601a      	str	r2, [r3, #0]
	  if (MessageSent == 0)
 8006d84:	e7b7      	b.n	8006cf6 <main+0x66>
 8006d86:	bf00      	nop
 8006d88:	20000590 	.word	0x20000590
 8006d8c:	2000058e 	.word	0x2000058e
 8006d90:	08007ebc 	.word	0x08007ebc
 8006d94:	08007ee8 	.word	0x08007ee8
 8006d98:	200001fd 	.word	0x200001fd
 8006d9c:	40020400 	.word	0x40020400
 8006da0:	20000200 	.word	0x20000200
 8006da4:	200004f8 	.word	0x200004f8
 8006da8:	20000204 	.word	0x20000204

08006dac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b094      	sub	sp, #80	; 0x50
 8006db0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006db2:	f107 0320 	add.w	r3, r7, #32
 8006db6:	2230      	movs	r2, #48	; 0x30
 8006db8:	2100      	movs	r1, #0
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 ffaf 	bl	8007d1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006dc0:	f107 030c 	add.w	r3, r7, #12
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	601a      	str	r2, [r3, #0]
 8006dc8:	605a      	str	r2, [r3, #4]
 8006dca:	609a      	str	r2, [r3, #8]
 8006dcc:	60da      	str	r2, [r3, #12]
 8006dce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	60bb      	str	r3, [r7, #8]
 8006dd4:	4b28      	ldr	r3, [pc, #160]	; (8006e78 <SystemClock_Config+0xcc>)
 8006dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd8:	4a27      	ldr	r2, [pc, #156]	; (8006e78 <SystemClock_Config+0xcc>)
 8006dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dde:	6413      	str	r3, [r2, #64]	; 0x40
 8006de0:	4b25      	ldr	r3, [pc, #148]	; (8006e78 <SystemClock_Config+0xcc>)
 8006de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006de8:	60bb      	str	r3, [r7, #8]
 8006dea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006dec:	2300      	movs	r3, #0
 8006dee:	607b      	str	r3, [r7, #4]
 8006df0:	4b22      	ldr	r3, [pc, #136]	; (8006e7c <SystemClock_Config+0xd0>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a21      	ldr	r2, [pc, #132]	; (8006e7c <SystemClock_Config+0xd0>)
 8006df6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dfa:	6013      	str	r3, [r2, #0]
 8006dfc:	4b1f      	ldr	r3, [pc, #124]	; (8006e7c <SystemClock_Config+0xd0>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006e04:	607b      	str	r3, [r7, #4]
 8006e06:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8006e0c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8006e10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006e12:	2302      	movs	r3, #2
 8006e14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006e16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006e1c:	2304      	movs	r3, #4
 8006e1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8006e20:	23a8      	movs	r3, #168	; 0xa8
 8006e22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006e24:	2302      	movs	r3, #2
 8006e26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8006e28:	2307      	movs	r3, #7
 8006e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006e2c:	f107 0320 	add.w	r3, r7, #32
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7fb fd01 	bl	8002838 <HAL_RCC_OscConfig>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d001      	beq.n	8006e40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006e3c:	f000 f820 	bl	8006e80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006e40:	230f      	movs	r3, #15
 8006e42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006e44:	2302      	movs	r3, #2
 8006e46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006e4c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006e50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006e52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e56:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006e58:	f107 030c 	add.w	r3, r7, #12
 8006e5c:	2105      	movs	r1, #5
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fb ff2c 	bl	8002cbc <HAL_RCC_ClockConfig>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8006e6a:	f000 f809 	bl	8006e80 <Error_Handler>
  }
}
 8006e6e:	bf00      	nop
 8006e70:	3750      	adds	r7, #80	; 0x50
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	40023800 	.word	0x40023800
 8006e7c:	40007000 	.word	0x40007000

08006e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006e80:	b480      	push	{r7}
 8006e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006e84:	bf00      	nop
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
	...

08006e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e96:	2300      	movs	r3, #0
 8006e98:	607b      	str	r3, [r7, #4]
 8006e9a:	4b10      	ldr	r3, [pc, #64]	; (8006edc <HAL_MspInit+0x4c>)
 8006e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e9e:	4a0f      	ldr	r2, [pc, #60]	; (8006edc <HAL_MspInit+0x4c>)
 8006ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8006ea6:	4b0d      	ldr	r3, [pc, #52]	; (8006edc <HAL_MspInit+0x4c>)
 8006ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006eae:	607b      	str	r3, [r7, #4]
 8006eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	603b      	str	r3, [r7, #0]
 8006eb6:	4b09      	ldr	r3, [pc, #36]	; (8006edc <HAL_MspInit+0x4c>)
 8006eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eba:	4a08      	ldr	r2, [pc, #32]	; (8006edc <HAL_MspInit+0x4c>)
 8006ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8006ec2:	4b06      	ldr	r3, [pc, #24]	; (8006edc <HAL_MspInit+0x4c>)
 8006ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eca:	603b      	str	r3, [r7, #0]
 8006ecc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006ece:	bf00      	nop
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	40023800 	.word	0x40023800

08006ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006ee4:	bf00      	nop
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006ef2:	e7fe      	b.n	8006ef2 <HardFault_Handler+0x4>

08006ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006ef8:	e7fe      	b.n	8006ef8 <MemManage_Handler+0x4>

08006efa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006efa:	b480      	push	{r7}
 8006efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006efe:	e7fe      	b.n	8006efe <BusFault_Handler+0x4>

08006f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006f00:	b480      	push	{r7}
 8006f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006f04:	e7fe      	b.n	8006f04 <UsageFault_Handler+0x4>

08006f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006f06:	b480      	push	{r7}
 8006f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006f0a:	bf00      	nop
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006f14:	b480      	push	{r7}
 8006f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006f18:	bf00      	nop
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr

08006f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006f22:	b480      	push	{r7}
 8006f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006f26:	bf00      	nop
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006f34:	f7f9 fb34 	bl	80005a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006f38:	bf00      	nop
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006f40:	4804      	ldr	r0, [pc, #16]	; (8006f54 <USART3_IRQHandler+0x18>)
 8006f42:	f7fc f9e5 	bl	8003310 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  HAL_UART_Receive_IT(&huart3, rec_Data, 10);
 8006f46:	220a      	movs	r2, #10
 8006f48:	4903      	ldr	r1, [pc, #12]	; (8006f58 <USART3_IRQHandler+0x1c>)
 8006f4a:	4802      	ldr	r0, [pc, #8]	; (8006f54 <USART3_IRQHandler+0x18>)
 8006f4c:	f7fc f98a 	bl	8003264 <HAL_UART_Receive_IT>

  /* USER CODE END USART3_IRQn 1 */
}
 8006f50:	bf00      	nop
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	20000590 	.word	0x20000590
 8006f58:	20000584 	.word	0x20000584

08006f5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8006f60:	4802      	ldr	r0, [pc, #8]	; (8006f6c <OTG_FS_IRQHandler+0x10>)
 8006f62:	f7fa fc2f 	bl	80017c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8006f66:	bf00      	nop
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	200008f0 	.word	0x200008f0

08006f70 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006f78:	4b11      	ldr	r3, [pc, #68]	; (8006fc0 <_sbrk+0x50>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d102      	bne.n	8006f86 <_sbrk+0x16>
		heap_end = &end;
 8006f80:	4b0f      	ldr	r3, [pc, #60]	; (8006fc0 <_sbrk+0x50>)
 8006f82:	4a10      	ldr	r2, [pc, #64]	; (8006fc4 <_sbrk+0x54>)
 8006f84:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006f86:	4b0e      	ldr	r3, [pc, #56]	; (8006fc0 <_sbrk+0x50>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006f8c:	4b0c      	ldr	r3, [pc, #48]	; (8006fc0 <_sbrk+0x50>)
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4413      	add	r3, r2
 8006f94:	466a      	mov	r2, sp
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d907      	bls.n	8006faa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006f9a:	f000 fe7b 	bl	8007c94 <__errno>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	230c      	movs	r3, #12
 8006fa2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8006fa8:	e006      	b.n	8006fb8 <_sbrk+0x48>
	}

	heap_end += incr;
 8006faa:	4b05      	ldr	r3, [pc, #20]	; (8006fc0 <_sbrk+0x50>)
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	4a03      	ldr	r2, [pc, #12]	; (8006fc0 <_sbrk+0x50>)
 8006fb4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	20000208 	.word	0x20000208
 8006fc4:	20000f00 	.word	0x20000f00

08006fc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006fcc:	4b16      	ldr	r3, [pc, #88]	; (8007028 <SystemInit+0x60>)
 8006fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fd2:	4a15      	ldr	r2, [pc, #84]	; (8007028 <SystemInit+0x60>)
 8006fd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006fd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006fdc:	4b13      	ldr	r3, [pc, #76]	; (800702c <SystemInit+0x64>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a12      	ldr	r2, [pc, #72]	; (800702c <SystemInit+0x64>)
 8006fe2:	f043 0301 	orr.w	r3, r3, #1
 8006fe6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006fe8:	4b10      	ldr	r3, [pc, #64]	; (800702c <SystemInit+0x64>)
 8006fea:	2200      	movs	r2, #0
 8006fec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006fee:	4b0f      	ldr	r3, [pc, #60]	; (800702c <SystemInit+0x64>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a0e      	ldr	r2, [pc, #56]	; (800702c <SystemInit+0x64>)
 8006ff4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006ff8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ffc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006ffe:	4b0b      	ldr	r3, [pc, #44]	; (800702c <SystemInit+0x64>)
 8007000:	4a0b      	ldr	r2, [pc, #44]	; (8007030 <SystemInit+0x68>)
 8007002:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007004:	4b09      	ldr	r3, [pc, #36]	; (800702c <SystemInit+0x64>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a08      	ldr	r2, [pc, #32]	; (800702c <SystemInit+0x64>)
 800700a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800700e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007010:	4b06      	ldr	r3, [pc, #24]	; (800702c <SystemInit+0x64>)
 8007012:	2200      	movs	r2, #0
 8007014:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007016:	4b04      	ldr	r3, [pc, #16]	; (8007028 <SystemInit+0x60>)
 8007018:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800701c:	609a      	str	r2, [r3, #8]
#endif
}
 800701e:	bf00      	nop
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr
 8007028:	e000ed00 	.word	0xe000ed00
 800702c:	40023800 	.word	0x40023800
 8007030:	24003010 	.word	0x24003010

08007034 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8007038:	4b11      	ldr	r3, [pc, #68]	; (8007080 <MX_USART3_UART_Init+0x4c>)
 800703a:	4a12      	ldr	r2, [pc, #72]	; (8007084 <MX_USART3_UART_Init+0x50>)
 800703c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800703e:	4b10      	ldr	r3, [pc, #64]	; (8007080 <MX_USART3_UART_Init+0x4c>)
 8007040:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8007044:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007046:	4b0e      	ldr	r3, [pc, #56]	; (8007080 <MX_USART3_UART_Init+0x4c>)
 8007048:	2200      	movs	r2, #0
 800704a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800704c:	4b0c      	ldr	r3, [pc, #48]	; (8007080 <MX_USART3_UART_Init+0x4c>)
 800704e:	2200      	movs	r2, #0
 8007050:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007052:	4b0b      	ldr	r3, [pc, #44]	; (8007080 <MX_USART3_UART_Init+0x4c>)
 8007054:	2200      	movs	r2, #0
 8007056:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007058:	4b09      	ldr	r3, [pc, #36]	; (8007080 <MX_USART3_UART_Init+0x4c>)
 800705a:	220c      	movs	r2, #12
 800705c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800705e:	4b08      	ldr	r3, [pc, #32]	; (8007080 <MX_USART3_UART_Init+0x4c>)
 8007060:	2200      	movs	r2, #0
 8007062:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007064:	4b06      	ldr	r3, [pc, #24]	; (8007080 <MX_USART3_UART_Init+0x4c>)
 8007066:	2200      	movs	r2, #0
 8007068:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800706a:	4805      	ldr	r0, [pc, #20]	; (8007080 <MX_USART3_UART_Init+0x4c>)
 800706c:	f7fc f814 	bl	8003098 <HAL_UART_Init>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8007076:	f7ff ff03 	bl	8006e80 <Error_Handler>
  }

}
 800707a:	bf00      	nop
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	20000590 	.word	0x20000590
 8007084:	40004800 	.word	0x40004800

08007088 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b08a      	sub	sp, #40	; 0x28
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007090:	f107 0314 	add.w	r3, r7, #20
 8007094:	2200      	movs	r2, #0
 8007096:	601a      	str	r2, [r3, #0]
 8007098:	605a      	str	r2, [r3, #4]
 800709a:	609a      	str	r2, [r3, #8]
 800709c:	60da      	str	r2, [r3, #12]
 800709e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a1d      	ldr	r2, [pc, #116]	; (800711c <HAL_UART_MspInit+0x94>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d134      	bne.n	8007114 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80070aa:	2300      	movs	r3, #0
 80070ac:	613b      	str	r3, [r7, #16]
 80070ae:	4b1c      	ldr	r3, [pc, #112]	; (8007120 <HAL_UART_MspInit+0x98>)
 80070b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b2:	4a1b      	ldr	r2, [pc, #108]	; (8007120 <HAL_UART_MspInit+0x98>)
 80070b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070b8:	6413      	str	r3, [r2, #64]	; 0x40
 80070ba:	4b19      	ldr	r3, [pc, #100]	; (8007120 <HAL_UART_MspInit+0x98>)
 80070bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070c2:	613b      	str	r3, [r7, #16]
 80070c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80070c6:	2300      	movs	r3, #0
 80070c8:	60fb      	str	r3, [r7, #12]
 80070ca:	4b15      	ldr	r3, [pc, #84]	; (8007120 <HAL_UART_MspInit+0x98>)
 80070cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ce:	4a14      	ldr	r2, [pc, #80]	; (8007120 <HAL_UART_MspInit+0x98>)
 80070d0:	f043 0308 	orr.w	r3, r3, #8
 80070d4:	6313      	str	r3, [r2, #48]	; 0x30
 80070d6:	4b12      	ldr	r3, [pc, #72]	; (8007120 <HAL_UART_MspInit+0x98>)
 80070d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070da:	f003 0308 	and.w	r3, r3, #8
 80070de:	60fb      	str	r3, [r7, #12]
 80070e0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80070e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80070e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070e8:	2302      	movs	r3, #2
 80070ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80070ec:	2301      	movs	r3, #1
 80070ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070f0:	2303      	movs	r3, #3
 80070f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80070f4:	2307      	movs	r3, #7
 80070f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80070f8:	f107 0314 	add.w	r3, r7, #20
 80070fc:	4619      	mov	r1, r3
 80070fe:	4809      	ldr	r0, [pc, #36]	; (8007124 <HAL_UART_MspInit+0x9c>)
 8007100:	f7fa f832 	bl	8001168 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8007104:	2200      	movs	r2, #0
 8007106:	2100      	movs	r1, #0
 8007108:	2027      	movs	r0, #39	; 0x27
 800710a:	f7f9 fb66 	bl	80007da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800710e:	2027      	movs	r0, #39	; 0x27
 8007110:	f7f9 fb7f 	bl	8000812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8007114:	bf00      	nop
 8007116:	3728      	adds	r7, #40	; 0x28
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	40004800 	.word	0x40004800
 8007120:	40023800 	.word	0x40023800
 8007124:	40020c00 	.word	0x40020c00

08007128 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800712c:	2200      	movs	r2, #0
 800712e:	4912      	ldr	r1, [pc, #72]	; (8007178 <MX_USB_DEVICE_Init+0x50>)
 8007130:	4812      	ldr	r0, [pc, #72]	; (800717c <MX_USB_DEVICE_Init+0x54>)
 8007132:	f7fe fb25 	bl	8005780 <USBD_Init>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d001      	beq.n	8007140 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800713c:	f7ff fea0 	bl	8006e80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007140:	490f      	ldr	r1, [pc, #60]	; (8007180 <MX_USB_DEVICE_Init+0x58>)
 8007142:	480e      	ldr	r0, [pc, #56]	; (800717c <MX_USB_DEVICE_Init+0x54>)
 8007144:	f7fe fb47 	bl	80057d6 <USBD_RegisterClass>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d001      	beq.n	8007152 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800714e:	f7ff fe97 	bl	8006e80 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007152:	490c      	ldr	r1, [pc, #48]	; (8007184 <MX_USB_DEVICE_Init+0x5c>)
 8007154:	4809      	ldr	r0, [pc, #36]	; (800717c <MX_USB_DEVICE_Init+0x54>)
 8007156:	f7fe fa75 	bl	8005644 <USBD_CDC_RegisterInterface>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d001      	beq.n	8007164 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007160:	f7ff fe8e 	bl	8006e80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007164:	4805      	ldr	r0, [pc, #20]	; (800717c <MX_USB_DEVICE_Init+0x54>)
 8007166:	f7fe fb50 	bl	800580a <USBD_Start>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d001      	beq.n	8007174 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007170:	f7ff fe86 	bl	8006e80 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007174:	bf00      	nop
 8007176:	bd80      	pop	{r7, pc}
 8007178:	2000012c 	.word	0x2000012c
 800717c:	200005d0 	.word	0x200005d0
 8007180:	20000014 	.word	0x20000014
 8007184:	2000011c 	.word	0x2000011c

08007188 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	af00      	add	r7, sp, #0
  /* Set Application Buffers */
//  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
//  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);

  // Version from rwmao
  hUsbDevice_0 = &hUsbDeviceFS;
 800718c:	4b0b      	ldr	r3, [pc, #44]	; (80071bc <CDC_Init_FS+0x34>)
 800718e:	4a0c      	ldr	r2, [pc, #48]	; (80071c0 <CDC_Init_FS+0x38>)
 8007190:	601a      	str	r2, [r3, #0]
    /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(hUsbDevice_0, UserTxBufferFS, 0);
 8007192:	4b0a      	ldr	r3, [pc, #40]	; (80071bc <CDC_Init_FS+0x34>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2200      	movs	r2, #0
 8007198:	490a      	ldr	r1, [pc, #40]	; (80071c4 <CDC_Init_FS+0x3c>)
 800719a:	4618      	mov	r0, r3
 800719c:	f7fe fa69 	bl	8005672 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(hUsbDevice_0, UserRxBufferFS);
 80071a0:	4b06      	ldr	r3, [pc, #24]	; (80071bc <CDC_Init_FS+0x34>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4908      	ldr	r1, [pc, #32]	; (80071c8 <CDC_Init_FS+0x40>)
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fe fa7d 	bl	80056a6 <USBD_CDC_SetRxBuffer>

  //Added by RoSchmi
   USBD_CDC_ReceivePacket(hUsbDevice_0);
 80071ac:	4b03      	ldr	r3, [pc, #12]	; (80071bc <CDC_Init_FS+0x34>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7fe fabb 	bl	800572c <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 80071b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	2000086c 	.word	0x2000086c
 80071c0:	200005d0 	.word	0x200005d0
 80071c4:	200008b0 	.word	0x200008b0
 80071c8:	20000870 	.word	0x20000870

080071cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80071cc:	b480      	push	{r7}
 80071ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80071d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	4603      	mov	r3, r0
 80071e4:	6039      	str	r1, [r7, #0]
 80071e6:	71fb      	strb	r3, [r7, #7]
 80071e8:	4613      	mov	r3, r2
 80071ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80071ec:	79fb      	ldrb	r3, [r7, #7]
 80071ee:	2b23      	cmp	r3, #35	; 0x23
 80071f0:	d84a      	bhi.n	8007288 <CDC_Control_FS+0xac>
 80071f2:	a201      	add	r2, pc, #4	; (adr r2, 80071f8 <CDC_Control_FS+0x1c>)
 80071f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f8:	08007289 	.word	0x08007289
 80071fc:	08007289 	.word	0x08007289
 8007200:	08007289 	.word	0x08007289
 8007204:	08007289 	.word	0x08007289
 8007208:	08007289 	.word	0x08007289
 800720c:	08007289 	.word	0x08007289
 8007210:	08007289 	.word	0x08007289
 8007214:	08007289 	.word	0x08007289
 8007218:	08007289 	.word	0x08007289
 800721c:	08007289 	.word	0x08007289
 8007220:	08007289 	.word	0x08007289
 8007224:	08007289 	.word	0x08007289
 8007228:	08007289 	.word	0x08007289
 800722c:	08007289 	.word	0x08007289
 8007230:	08007289 	.word	0x08007289
 8007234:	08007289 	.word	0x08007289
 8007238:	08007289 	.word	0x08007289
 800723c:	08007289 	.word	0x08007289
 8007240:	08007289 	.word	0x08007289
 8007244:	08007289 	.word	0x08007289
 8007248:	08007289 	.word	0x08007289
 800724c:	08007289 	.word	0x08007289
 8007250:	08007289 	.word	0x08007289
 8007254:	08007289 	.word	0x08007289
 8007258:	08007289 	.word	0x08007289
 800725c:	08007289 	.word	0x08007289
 8007260:	08007289 	.word	0x08007289
 8007264:	08007289 	.word	0x08007289
 8007268:	08007289 	.word	0x08007289
 800726c:	08007289 	.word	0x08007289
 8007270:	08007289 	.word	0x08007289
 8007274:	08007289 	.word	0x08007289
 8007278:	08007289 	.word	0x08007289
 800727c:	08007289 	.word	0x08007289
 8007280:	08007289 	.word	0x08007289
 8007284:	08007289 	.word	0x08007289
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007288:	bf00      	nop
  }

  return (USBD_OK);
 800728a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800728c:	4618      	mov	r0, r3
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */ // CDC_Receive_FS is a callback function. When data were received, the system calls this function. The received data can be accessed via Buf,and *Len
	s_RxBuffers.IsCommandDataReceived=1;
 80072a2:	4b1f      	ldr	r3, [pc, #124]	; (8007320 <CDC_Receive_FS+0x88>)
 80072a4:	2201      	movs	r2, #1
 80072a6:	721a      	strb	r2, [r3, #8]
	//indicates data were received
	s_RxBuffers.CommandsLens[s_RxBuffers.pos_receive]=*Len;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	4b1c      	ldr	r3, [pc, #112]	; (8007320 <CDC_Receive_FS+0x88>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	b2d1      	uxtb	r1, r2
 80072b2:	4a1b      	ldr	r2, [pc, #108]	; (8007320 <CDC_Receive_FS+0x88>)
 80072b4:	4413      	add	r3, r2
 80072b6:	460a      	mov	r2, r1
 80072b8:	f883 2289 	strb.w	r2, [r3, #649]	; 0x289
	// only set the length, data was directly saved to buffer           ?????????
	// (this didn't work for me, so I copied the content)
	memcpy(s_RxBuffers.UserRxBufferFS[s_RxBuffers.pos_receive], UserRxBufferFS, *Len);
 80072bc:	4b18      	ldr	r3, [pc, #96]	; (8007320 <CDC_Receive_FS+0x88>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	019b      	lsls	r3, r3, #6
 80072c2:	3308      	adds	r3, #8
 80072c4:	4a16      	ldr	r2, [pc, #88]	; (8007320 <CDC_Receive_FS+0x88>)
 80072c6:	4413      	add	r3, r2
 80072c8:	1c58      	adds	r0, r3, #1
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	461a      	mov	r2, r3
 80072d0:	4914      	ldr	r1, [pc, #80]	; (8007324 <CDC_Receive_FS+0x8c>)
 80072d2:	f000 fd19 	bl	8007d08 <memcpy>

	s_RxBuffers.pos_receive++;
 80072d6:	4b12      	ldr	r3, [pc, #72]	; (8007320 <CDC_Receive_FS+0x88>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	3301      	adds	r3, #1
 80072dc:	4a10      	ldr	r2, [pc, #64]	; (8007320 <CDC_Receive_FS+0x88>)
 80072de:	6013      	str	r3, [r2, #0]
	//move to next position to receive data
	if(s_RxBuffers.pos_receive >= MaxCommandsInBuffer)
 80072e0:	4b0f      	ldr	r3, [pc, #60]	; (8007320 <CDC_Receive_FS+0x88>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2b09      	cmp	r3, #9
 80072e6:	dd02      	ble.n	80072ee <CDC_Receive_FS+0x56>
	//reach the last buffer, need to rewind to 0
	{
	    s_RxBuffers.pos_receive=0;
 80072e8:	4b0d      	ldr	r3, [pc, #52]	; (8007320 <CDC_Receive_FS+0x88>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	601a      	str	r2, [r3, #0]
	}
	//prepare to receive the next data
	USBD_CDC_SetRxBuffer(hUsbDevice_0, s_RxBuffers.UserRxBufferFS[s_RxBuffers.pos_receive]);
 80072ee:	4b0e      	ldr	r3, [pc, #56]	; (8007328 <CDC_Receive_FS+0x90>)
 80072f0:	6818      	ldr	r0, [r3, #0]
 80072f2:	4b0b      	ldr	r3, [pc, #44]	; (8007320 <CDC_Receive_FS+0x88>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	019b      	lsls	r3, r3, #6
 80072f8:	3308      	adds	r3, #8
 80072fa:	4a09      	ldr	r2, [pc, #36]	; (8007320 <CDC_Receive_FS+0x88>)
 80072fc:	4413      	add	r3, r2
 80072fe:	3301      	adds	r3, #1
 8007300:	4619      	mov	r1, r3
 8007302:	f7fe f9d0 	bl	80056a6 <USBD_CDC_SetRxBuffer>
	//Set the buffer to receive incoming data

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007306:	6879      	ldr	r1, [r7, #4]
 8007308:	4808      	ldr	r0, [pc, #32]	; (800732c <CDC_Receive_FS+0x94>)
 800730a:	f7fe f9cc 	bl	80056a6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800730e:	4807      	ldr	r0, [pc, #28]	; (800732c <CDC_Receive_FS+0x94>)
 8007310:	f7fe fa0c 	bl	800572c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007314:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007316:	4618      	mov	r0, r3
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	2000020c 	.word	0x2000020c
 8007324:	20000870 	.word	0x20000870
 8007328:	2000086c 	.word	0x2000086c
 800732c:	200005d0 	.word	0x200005d0

08007330 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	460b      	mov	r3, r1
 800733a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800733c:	2300      	movs	r3, #0
 800733e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007340:	4b0d      	ldr	r3, [pc, #52]	; (8007378 <CDC_Transmit_FS+0x48>)
 8007342:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007346:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007352:	2301      	movs	r3, #1
 8007354:	e00b      	b.n	800736e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007356:	887b      	ldrh	r3, [r7, #2]
 8007358:	461a      	mov	r2, r3
 800735a:	6879      	ldr	r1, [r7, #4]
 800735c:	4806      	ldr	r0, [pc, #24]	; (8007378 <CDC_Transmit_FS+0x48>)
 800735e:	f7fe f988 	bl	8005672 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007362:	4805      	ldr	r0, [pc, #20]	; (8007378 <CDC_Transmit_FS+0x48>)
 8007364:	f7fe f9b3 	bl	80056ce <USBD_CDC_TransmitPacket>
 8007368:	4603      	mov	r3, r0
 800736a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800736c:	7bfb      	ldrb	r3, [r7, #15]
}
 800736e:	4618      	mov	r0, r3
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	200005d0 	.word	0x200005d0

0800737c <VCP_retrieveInputData>:
* @param Buf: Buffer of data to be received
* @param Len: Number of data received (in bytes)
* @retval 0 means no data was received.
*/
int8_t VCP_retrieveInputData(uint8_t* Buf, uint32_t *Len)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
	if(s_RxBuffers.IsCommandDataReceived==0)
 8007386:	4b1f      	ldr	r3, [pc, #124]	; (8007404 <VCP_retrieveInputData+0x88>)
 8007388:	7a1b      	ldrb	r3, [r3, #8]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d101      	bne.n	8007392 <VCP_retrieveInputData+0x16>
		return 0;
 800738e:	2300      	movs	r3, #0
 8007390:	e033      	b.n	80073fa <VCP_retrieveInputData+0x7e>
//no data received
int index=s_RxBuffers.pos_process;
 8007392:	4b1c      	ldr	r3, [pc, #112]	; (8007404 <VCP_retrieveInputData+0x88>)
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	60fb      	str	r3, [r7, #12]
*Len=s_RxBuffers.CommandsLens[index];
 8007398:	4a1a      	ldr	r2, [pc, #104]	; (8007404 <VCP_retrieveInputData+0x88>)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	4413      	add	r3, r2
 800739e:	f203 2389 	addw	r3, r3, #649	; 0x289
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	461a      	mov	r2, r3
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	601a      	str	r2, [r3, #0]
//return the length
// UserRxBufferFS
memcpy(Buf,s_RxBuffers.UserRxBufferFS[index],*Len);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	019b      	lsls	r3, r3, #6
 80073ae:	3308      	adds	r3, #8
 80073b0:	4a14      	ldr	r2, [pc, #80]	; (8007404 <VCP_retrieveInputData+0x88>)
 80073b2:	4413      	add	r3, r2
 80073b4:	1c59      	adds	r1, r3, #1
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	461a      	mov	r2, r3
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fca3 	bl	8007d08 <memcpy>
Buf[*Len]=
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	4413      	add	r3, r2
 80073ca:	2200      	movs	r2, #0
 80073cc:	701a      	strb	r2, [r3, #0]
'\0'
;
//testing only. make sure there is ending char in the returned command string
//check if all data were processed.
s_RxBuffers.pos_process++;
 80073ce:	4b0d      	ldr	r3, [pc, #52]	; (8007404 <VCP_retrieveInputData+0x88>)
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	3301      	adds	r3, #1
 80073d4:	4a0b      	ldr	r2, [pc, #44]	; (8007404 <VCP_retrieveInputData+0x88>)
 80073d6:	6053      	str	r3, [r2, #4]
if
(s_RxBuffers.pos_process>=MaxCommandsInBuffer)
 80073d8:	4b0a      	ldr	r3, [pc, #40]	; (8007404 <VCP_retrieveInputData+0x88>)
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	2b09      	cmp	r3, #9
 80073de:	dd02      	ble.n	80073e6 <VCP_retrieveInputData+0x6a>
//reach the last buffer, need to rewind to 0
{
s_RxBuffers.pos_process=0;
 80073e0:	4b08      	ldr	r3, [pc, #32]	; (8007404 <VCP_retrieveInputData+0x88>)
 80073e2:	2200      	movs	r2, #0
 80073e4:	605a      	str	r2, [r3, #4]
}
if
(s_RxBuffers.pos_process==s_RxBuffers.pos_receive)s_RxBuffers.IsCommandDataReceived=0;
 80073e6:	4b07      	ldr	r3, [pc, #28]	; (8007404 <VCP_retrieveInputData+0x88>)
 80073e8:	685a      	ldr	r2, [r3, #4]
 80073ea:	4b06      	ldr	r3, [pc, #24]	; (8007404 <VCP_retrieveInputData+0x88>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d102      	bne.n	80073f8 <VCP_retrieveInputData+0x7c>
 80073f2:	4b04      	ldr	r3, [pc, #16]	; (8007404 <VCP_retrieveInputData+0x88>)
 80073f4:	2200      	movs	r2, #0
 80073f6:	721a      	strb	r2, [r3, #8]
//check if all data were processed
return
1;
 80073f8:	2301      	movs	r3, #1
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	2000020c 	.word	0x2000020c

08007408 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b08a      	sub	sp, #40	; 0x28
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007410:	f107 0314 	add.w	r3, r7, #20
 8007414:	2200      	movs	r2, #0
 8007416:	601a      	str	r2, [r3, #0]
 8007418:	605a      	str	r2, [r3, #4]
 800741a:	609a      	str	r2, [r3, #8]
 800741c:	60da      	str	r2, [r3, #12]
 800741e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007428:	d147      	bne.n	80074ba <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800742a:	2300      	movs	r3, #0
 800742c:	613b      	str	r3, [r7, #16]
 800742e:	4b25      	ldr	r3, [pc, #148]	; (80074c4 <HAL_PCD_MspInit+0xbc>)
 8007430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007432:	4a24      	ldr	r2, [pc, #144]	; (80074c4 <HAL_PCD_MspInit+0xbc>)
 8007434:	f043 0301 	orr.w	r3, r3, #1
 8007438:	6313      	str	r3, [r2, #48]	; 0x30
 800743a:	4b22      	ldr	r3, [pc, #136]	; (80074c4 <HAL_PCD_MspInit+0xbc>)
 800743c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743e:	f003 0301 	and.w	r3, r3, #1
 8007442:	613b      	str	r3, [r7, #16]
 8007444:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8007446:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800744a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800744c:	2302      	movs	r3, #2
 800744e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007450:	2300      	movs	r3, #0
 8007452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007454:	2303      	movs	r3, #3
 8007456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007458:	230a      	movs	r3, #10
 800745a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800745c:	f107 0314 	add.w	r3, r7, #20
 8007460:	4619      	mov	r1, r3
 8007462:	4819      	ldr	r0, [pc, #100]	; (80074c8 <HAL_PCD_MspInit+0xc0>)
 8007464:	f7f9 fe80 	bl	8001168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8007468:	f44f 7300 	mov.w	r3, #512	; 0x200
 800746c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800746e:	2300      	movs	r3, #0
 8007470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007472:	2300      	movs	r3, #0
 8007474:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8007476:	f107 0314 	add.w	r3, r7, #20
 800747a:	4619      	mov	r1, r3
 800747c:	4812      	ldr	r0, [pc, #72]	; (80074c8 <HAL_PCD_MspInit+0xc0>)
 800747e:	f7f9 fe73 	bl	8001168 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007482:	4b10      	ldr	r3, [pc, #64]	; (80074c4 <HAL_PCD_MspInit+0xbc>)
 8007484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007486:	4a0f      	ldr	r2, [pc, #60]	; (80074c4 <HAL_PCD_MspInit+0xbc>)
 8007488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800748c:	6353      	str	r3, [r2, #52]	; 0x34
 800748e:	2300      	movs	r3, #0
 8007490:	60fb      	str	r3, [r7, #12]
 8007492:	4b0c      	ldr	r3, [pc, #48]	; (80074c4 <HAL_PCD_MspInit+0xbc>)
 8007494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007496:	4a0b      	ldr	r2, [pc, #44]	; (80074c4 <HAL_PCD_MspInit+0xbc>)
 8007498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800749c:	6453      	str	r3, [r2, #68]	; 0x44
 800749e:	4b09      	ldr	r3, [pc, #36]	; (80074c4 <HAL_PCD_MspInit+0xbc>)
 80074a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074a6:	60fb      	str	r3, [r7, #12]
 80074a8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80074aa:	2200      	movs	r2, #0
 80074ac:	2100      	movs	r1, #0
 80074ae:	2043      	movs	r0, #67	; 0x43
 80074b0:	f7f9 f993 	bl	80007da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80074b4:	2043      	movs	r0, #67	; 0x43
 80074b6:	f7f9 f9ac 	bl	8000812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80074ba:	bf00      	nop
 80074bc:	3728      	adds	r7, #40	; 0x28
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	40023800 	.word	0x40023800
 80074c8:	40020000 	.word	0x40020000

080074cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80074e0:	4619      	mov	r1, r3
 80074e2:	4610      	mov	r0, r2
 80074e4:	f7fe f9da 	bl	800589c <USBD_LL_SetupStage>
}
 80074e8:	bf00      	nop
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	460b      	mov	r3, r1
 80074fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007502:	78fa      	ldrb	r2, [r7, #3]
 8007504:	6879      	ldr	r1, [r7, #4]
 8007506:	4613      	mov	r3, r2
 8007508:	00db      	lsls	r3, r3, #3
 800750a:	1a9b      	subs	r3, r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	440b      	add	r3, r1
 8007510:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	78fb      	ldrb	r3, [r7, #3]
 8007518:	4619      	mov	r1, r3
 800751a:	f7fe fa0a 	bl	8005932 <USBD_LL_DataOutStage>
}
 800751e:	bf00      	nop
 8007520:	3708      	adds	r7, #8
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b082      	sub	sp, #8
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
 800752e:	460b      	mov	r3, r1
 8007530:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007538:	78fa      	ldrb	r2, [r7, #3]
 800753a:	6879      	ldr	r1, [r7, #4]
 800753c:	4613      	mov	r3, r2
 800753e:	00db      	lsls	r3, r3, #3
 8007540:	1a9b      	subs	r3, r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	440b      	add	r3, r1
 8007546:	3348      	adds	r3, #72	; 0x48
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	78fb      	ldrb	r3, [r7, #3]
 800754c:	4619      	mov	r1, r3
 800754e:	f7fe fa61 	bl	8005a14 <USBD_LL_DataInStage>
}
 8007552:	bf00      	nop
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b082      	sub	sp, #8
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007568:	4618      	mov	r0, r3
 800756a:	f7fe fb6f 	bl	8005c4c <USBD_LL_SOF>
}
 800756e:	bf00      	nop
 8007570:	3708      	adds	r7, #8
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007576:	b580      	push	{r7, lr}
 8007578:	b084      	sub	sp, #16
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800757e:	2301      	movs	r3, #1
 8007580:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d102      	bne.n	8007590 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800758a:	2300      	movs	r3, #0
 800758c:	73fb      	strb	r3, [r7, #15]
 800758e:	e008      	b.n	80075a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	2b02      	cmp	r3, #2
 8007596:	d102      	bne.n	800759e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007598:	2301      	movs	r3, #1
 800759a:	73fb      	strb	r3, [r7, #15]
 800759c:	e001      	b.n	80075a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800759e:	f7ff fc6f 	bl	8006e80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075a8:	7bfa      	ldrb	r2, [r7, #15]
 80075aa:	4611      	mov	r1, r2
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7fe fb17 	bl	8005be0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7fe fad0 	bl	8005b5e <USBD_LL_Reset>
}
 80075be:	bf00      	nop
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
	...

080075c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7fe fb12 	bl	8005c00 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	6812      	ldr	r2, [r2, #0]
 80075ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80075ee:	f043 0301 	orr.w	r3, r3, #1
 80075f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a1b      	ldr	r3, [r3, #32]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d005      	beq.n	8007608 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80075fc:	4b04      	ldr	r3, [pc, #16]	; (8007610 <HAL_PCD_SuspendCallback+0x48>)
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	4a03      	ldr	r2, [pc, #12]	; (8007610 <HAL_PCD_SuspendCallback+0x48>)
 8007602:	f043 0306 	orr.w	r3, r3, #6
 8007606:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007608:	bf00      	nop
 800760a:	3708      	adds	r7, #8
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	e000ed00 	.word	0xe000ed00

08007614 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007622:	4618      	mov	r0, r3
 8007624:	f7fe fb01 	bl	8005c2a <USBD_LL_Resume>
}
 8007628:	bf00      	nop
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	460b      	mov	r3, r1
 800763a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007642:	78fa      	ldrb	r2, [r7, #3]
 8007644:	4611      	mov	r1, r2
 8007646:	4618      	mov	r0, r3
 8007648:	f7fe fb27 	bl	8005c9a <USBD_LL_IsoOUTIncomplete>
}
 800764c:	bf00      	nop
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	460b      	mov	r3, r1
 800765e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007666:	78fa      	ldrb	r2, [r7, #3]
 8007668:	4611      	mov	r1, r2
 800766a:	4618      	mov	r0, r3
 800766c:	f7fe fb08 	bl	8005c80 <USBD_LL_IsoINIncomplete>
}
 8007670:	bf00      	nop
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007686:	4618      	mov	r0, r3
 8007688:	f7fe fb14 	bl	8005cb4 <USBD_LL_DevConnected>
}
 800768c:	bf00      	nop
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7fe fb11 	bl	8005cca <USBD_LL_DevDisconnected>
}
 80076a8:	bf00      	nop
 80076aa:	3708      	adds	r7, #8
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d13c      	bne.n	800773a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80076c0:	4a20      	ldr	r2, [pc, #128]	; (8007744 <USBD_LL_Init+0x94>)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a1e      	ldr	r2, [pc, #120]	; (8007744 <USBD_LL_Init+0x94>)
 80076cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80076d0:	4b1c      	ldr	r3, [pc, #112]	; (8007744 <USBD_LL_Init+0x94>)
 80076d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80076d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80076d8:	4b1a      	ldr	r3, [pc, #104]	; (8007744 <USBD_LL_Init+0x94>)
 80076da:	2204      	movs	r2, #4
 80076dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80076de:	4b19      	ldr	r3, [pc, #100]	; (8007744 <USBD_LL_Init+0x94>)
 80076e0:	2202      	movs	r2, #2
 80076e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80076e4:	4b17      	ldr	r3, [pc, #92]	; (8007744 <USBD_LL_Init+0x94>)
 80076e6:	2200      	movs	r2, #0
 80076e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80076ea:	4b16      	ldr	r3, [pc, #88]	; (8007744 <USBD_LL_Init+0x94>)
 80076ec:	2202      	movs	r2, #2
 80076ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80076f0:	4b14      	ldr	r3, [pc, #80]	; (8007744 <USBD_LL_Init+0x94>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80076f6:	4b13      	ldr	r3, [pc, #76]	; (8007744 <USBD_LL_Init+0x94>)
 80076f8:	2200      	movs	r2, #0
 80076fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80076fc:	4b11      	ldr	r3, [pc, #68]	; (8007744 <USBD_LL_Init+0x94>)
 80076fe:	2200      	movs	r2, #0
 8007700:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007702:	4b10      	ldr	r3, [pc, #64]	; (8007744 <USBD_LL_Init+0x94>)
 8007704:	2200      	movs	r2, #0
 8007706:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007708:	4b0e      	ldr	r3, [pc, #56]	; (8007744 <USBD_LL_Init+0x94>)
 800770a:	2200      	movs	r2, #0
 800770c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800770e:	480d      	ldr	r0, [pc, #52]	; (8007744 <USBD_LL_Init+0x94>)
 8007710:	f7f9 ff08 	bl	8001524 <HAL_PCD_Init>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d001      	beq.n	800771e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800771a:	f7ff fbb1 	bl	8006e80 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800771e:	2180      	movs	r1, #128	; 0x80
 8007720:	4808      	ldr	r0, [pc, #32]	; (8007744 <USBD_LL_Init+0x94>)
 8007722:	f7fb f86c 	bl	80027fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007726:	2240      	movs	r2, #64	; 0x40
 8007728:	2100      	movs	r1, #0
 800772a:	4806      	ldr	r0, [pc, #24]	; (8007744 <USBD_LL_Init+0x94>)
 800772c:	f7fb f820 	bl	8002770 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007730:	2280      	movs	r2, #128	; 0x80
 8007732:	2101      	movs	r1, #1
 8007734:	4803      	ldr	r0, [pc, #12]	; (8007744 <USBD_LL_Init+0x94>)
 8007736:	f7fb f81b 	bl	8002770 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	200008f0 	.word	0x200008f0

08007748 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007750:	2300      	movs	r3, #0
 8007752:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007754:	2300      	movs	r3, #0
 8007756:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800775e:	4618      	mov	r0, r3
 8007760:	f7f9 fffd 	bl	800175e <HAL_PCD_Start>
 8007764:	4603      	mov	r3, r0
 8007766:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8007768:	7bfb      	ldrb	r3, [r7, #15]
 800776a:	4618      	mov	r0, r3
 800776c:	f000 f92e 	bl	80079cc <USBD_Get_USB_Status>
 8007770:	4603      	mov	r3, r0
 8007772:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007774:	7bbb      	ldrb	r3, [r7, #14]
}
 8007776:	4618      	mov	r0, r3
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b084      	sub	sp, #16
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
 8007786:	4608      	mov	r0, r1
 8007788:	4611      	mov	r1, r2
 800778a:	461a      	mov	r2, r3
 800778c:	4603      	mov	r3, r0
 800778e:	70fb      	strb	r3, [r7, #3]
 8007790:	460b      	mov	r3, r1
 8007792:	70bb      	strb	r3, [r7, #2]
 8007794:	4613      	mov	r3, r2
 8007796:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007798:	2300      	movs	r3, #0
 800779a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800779c:	2300      	movs	r3, #0
 800779e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80077a6:	78bb      	ldrb	r3, [r7, #2]
 80077a8:	883a      	ldrh	r2, [r7, #0]
 80077aa:	78f9      	ldrb	r1, [r7, #3]
 80077ac:	f7fa fbd2 	bl	8001f54 <HAL_PCD_EP_Open>
 80077b0:	4603      	mov	r3, r0
 80077b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
 80077b6:	4618      	mov	r0, r3
 80077b8:	f000 f908 	bl	80079cc <USBD_Get_USB_Status>
 80077bc:	4603      	mov	r3, r0
 80077be:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80077c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b084      	sub	sp, #16
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
 80077d2:	460b      	mov	r3, r1
 80077d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077d6:	2300      	movs	r3, #0
 80077d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80077e4:	78fa      	ldrb	r2, [r7, #3]
 80077e6:	4611      	mov	r1, r2
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7fa fc1b 	bl	8002024 <HAL_PCD_EP_Close>
 80077ee:	4603      	mov	r3, r0
 80077f0:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80077f2:	7bfb      	ldrb	r3, [r7, #15]
 80077f4:	4618      	mov	r0, r3
 80077f6:	f000 f8e9 	bl	80079cc <USBD_Get_USB_Status>
 80077fa:	4603      	mov	r3, r0
 80077fc:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80077fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	460b      	mov	r3, r1
 8007812:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007814:	2300      	movs	r3, #0
 8007816:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007818:	2300      	movs	r3, #0
 800781a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007822:	78fa      	ldrb	r2, [r7, #3]
 8007824:	4611      	mov	r1, r2
 8007826:	4618      	mov	r0, r3
 8007828:	f7fa fcf3 	bl	8002212 <HAL_PCD_EP_SetStall>
 800782c:	4603      	mov	r3, r0
 800782e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007830:	7bfb      	ldrb	r3, [r7, #15]
 8007832:	4618      	mov	r0, r3
 8007834:	f000 f8ca 	bl	80079cc <USBD_Get_USB_Status>
 8007838:	4603      	mov	r3, r0
 800783a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800783c:	7bbb      	ldrb	r3, [r7, #14]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b084      	sub	sp, #16
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
 800784e:	460b      	mov	r3, r1
 8007850:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007852:	2300      	movs	r3, #0
 8007854:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007856:	2300      	movs	r3, #0
 8007858:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007860:	78fa      	ldrb	r2, [r7, #3]
 8007862:	4611      	mov	r1, r2
 8007864:	4618      	mov	r0, r3
 8007866:	f7fa fd38 	bl	80022da <HAL_PCD_EP_ClrStall>
 800786a:	4603      	mov	r3, r0
 800786c:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800786e:	7bfb      	ldrb	r3, [r7, #15]
 8007870:	4618      	mov	r0, r3
 8007872:	f000 f8ab 	bl	80079cc <USBD_Get_USB_Status>
 8007876:	4603      	mov	r3, r0
 8007878:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800787a:	7bbb      	ldrb	r3, [r7, #14]
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	460b      	mov	r3, r1
 800788e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007896:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007898:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800789c:	2b00      	cmp	r3, #0
 800789e:	da0b      	bge.n	80078b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80078a0:	78fb      	ldrb	r3, [r7, #3]
 80078a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078a6:	68f9      	ldr	r1, [r7, #12]
 80078a8:	4613      	mov	r3, r2
 80078aa:	00db      	lsls	r3, r3, #3
 80078ac:	1a9b      	subs	r3, r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	440b      	add	r3, r1
 80078b2:	333e      	adds	r3, #62	; 0x3e
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	e00b      	b.n	80078d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80078b8:	78fb      	ldrb	r3, [r7, #3]
 80078ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078be:	68f9      	ldr	r1, [r7, #12]
 80078c0:	4613      	mov	r3, r2
 80078c2:	00db      	lsls	r3, r3, #3
 80078c4:	1a9b      	subs	r3, r3, r2
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	440b      	add	r3, r1
 80078ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80078ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3714      	adds	r7, #20
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	460b      	mov	r3, r1
 80078e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078e8:	2300      	movs	r3, #0
 80078ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80078f6:	78fa      	ldrb	r2, [r7, #3]
 80078f8:	4611      	mov	r1, r2
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7fa fb05 	bl	8001f0a <HAL_PCD_SetAddress>
 8007900:	4603      	mov	r3, r0
 8007902:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007904:	7bfb      	ldrb	r3, [r7, #15]
 8007906:	4618      	mov	r0, r3
 8007908:	f000 f860 	bl	80079cc <USBD_Get_USB_Status>
 800790c:	4603      	mov	r3, r0
 800790e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8007910:	7bbb      	ldrb	r3, [r7, #14]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b086      	sub	sp, #24
 800791e:	af00      	add	r7, sp, #0
 8007920:	60f8      	str	r0, [r7, #12]
 8007922:	607a      	str	r2, [r7, #4]
 8007924:	461a      	mov	r2, r3
 8007926:	460b      	mov	r3, r1
 8007928:	72fb      	strb	r3, [r7, #11]
 800792a:	4613      	mov	r3, r2
 800792c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007932:	2300      	movs	r3, #0
 8007934:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800793c:	893b      	ldrh	r3, [r7, #8]
 800793e:	7af9      	ldrb	r1, [r7, #11]
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	f7fa fc1c 	bl	800217e <HAL_PCD_EP_Transmit>
 8007946:	4603      	mov	r3, r0
 8007948:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800794a:	7dfb      	ldrb	r3, [r7, #23]
 800794c:	4618      	mov	r0, r3
 800794e:	f000 f83d 	bl	80079cc <USBD_Get_USB_Status>
 8007952:	4603      	mov	r3, r0
 8007954:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8007956:	7dbb      	ldrb	r3, [r7, #22]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3718      	adds	r7, #24
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	607a      	str	r2, [r7, #4]
 800796a:	461a      	mov	r2, r3
 800796c:	460b      	mov	r3, r1
 800796e:	72fb      	strb	r3, [r7, #11]
 8007970:	4613      	mov	r3, r2
 8007972:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007974:	2300      	movs	r3, #0
 8007976:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007978:	2300      	movs	r3, #0
 800797a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007982:	893b      	ldrh	r3, [r7, #8]
 8007984:	7af9      	ldrb	r1, [r7, #11]
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	f7fa fb96 	bl	80020b8 <HAL_PCD_EP_Receive>
 800798c:	4603      	mov	r3, r0
 800798e:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8007990:	7dfb      	ldrb	r3, [r7, #23]
 8007992:	4618      	mov	r0, r3
 8007994:	f000 f81a 	bl	80079cc <USBD_Get_USB_Status>
 8007998:	4603      	mov	r3, r0
 800799a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800799c:	7dbb      	ldrb	r3, [r7, #22]
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3718      	adds	r7, #24
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b082      	sub	sp, #8
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
 80079ae:	460b      	mov	r3, r1
 80079b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80079b8:	78fa      	ldrb	r2, [r7, #3]
 80079ba:	4611      	mov	r1, r2
 80079bc:	4618      	mov	r0, r3
 80079be:	f7fa fbc6 	bl	800214e <HAL_PCD_EP_GetRxCount>
 80079c2:	4603      	mov	r3, r0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	4603      	mov	r3, r0
 80079d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079d6:	2300      	movs	r3, #0
 80079d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80079da:	79fb      	ldrb	r3, [r7, #7]
 80079dc:	2b03      	cmp	r3, #3
 80079de:	d817      	bhi.n	8007a10 <USBD_Get_USB_Status+0x44>
 80079e0:	a201      	add	r2, pc, #4	; (adr r2, 80079e8 <USBD_Get_USB_Status+0x1c>)
 80079e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e6:	bf00      	nop
 80079e8:	080079f9 	.word	0x080079f9
 80079ec:	080079ff 	.word	0x080079ff
 80079f0:	08007a05 	.word	0x08007a05
 80079f4:	08007a0b 	.word	0x08007a0b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80079f8:	2300      	movs	r3, #0
 80079fa:	73fb      	strb	r3, [r7, #15]
    break;
 80079fc:	e00b      	b.n	8007a16 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80079fe:	2302      	movs	r3, #2
 8007a00:	73fb      	strb	r3, [r7, #15]
    break;
 8007a02:	e008      	b.n	8007a16 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007a04:	2301      	movs	r3, #1
 8007a06:	73fb      	strb	r3, [r7, #15]
    break;
 8007a08:	e005      	b.n	8007a16 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007a0a:	2302      	movs	r3, #2
 8007a0c:	73fb      	strb	r3, [r7, #15]
    break;
 8007a0e:	e002      	b.n	8007a16 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007a10:	2302      	movs	r3, #2
 8007a12:	73fb      	strb	r3, [r7, #15]
    break;
 8007a14:	bf00      	nop
  }
  return usb_status;
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	6039      	str	r1, [r7, #0]
 8007a2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	2212      	movs	r2, #18
 8007a34:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a36:	4b03      	ldr	r3, [pc, #12]	; (8007a44 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr
 8007a44:	20000148 	.word	0x20000148

08007a48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	4603      	mov	r3, r0
 8007a50:	6039      	str	r1, [r7, #0]
 8007a52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	2204      	movs	r2, #4
 8007a58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a5a:	4b03      	ldr	r3, [pc, #12]	; (8007a68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr
 8007a68:	2000015c 	.word	0x2000015c

08007a6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	4603      	mov	r3, r0
 8007a74:	6039      	str	r1, [r7, #0]
 8007a76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a78:	79fb      	ldrb	r3, [r7, #7]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d105      	bne.n	8007a8a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a7e:	683a      	ldr	r2, [r7, #0]
 8007a80:	4907      	ldr	r1, [pc, #28]	; (8007aa0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a82:	4808      	ldr	r0, [pc, #32]	; (8007aa4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a84:	f7fe fdf8 	bl	8006678 <USBD_GetString>
 8007a88:	e004      	b.n	8007a94 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a8a:	683a      	ldr	r2, [r7, #0]
 8007a8c:	4904      	ldr	r1, [pc, #16]	; (8007aa0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a8e:	4805      	ldr	r0, [pc, #20]	; (8007aa4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a90:	f7fe fdf2 	bl	8006678 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a94:	4b02      	ldr	r3, [pc, #8]	; (8007aa0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	20000cf8 	.word	0x20000cf8
 8007aa4:	08007f14 	.word	0x08007f14

08007aa8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	4603      	mov	r3, r0
 8007ab0:	6039      	str	r1, [r7, #0]
 8007ab2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007ab4:	683a      	ldr	r2, [r7, #0]
 8007ab6:	4904      	ldr	r1, [pc, #16]	; (8007ac8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007ab8:	4804      	ldr	r0, [pc, #16]	; (8007acc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007aba:	f7fe fddd 	bl	8006678 <USBD_GetString>
  return USBD_StrDesc;
 8007abe:	4b02      	ldr	r3, [pc, #8]	; (8007ac8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	20000cf8 	.word	0x20000cf8
 8007acc:	08007f2c 	.word	0x08007f2c

08007ad0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	6039      	str	r1, [r7, #0]
 8007ada:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	221a      	movs	r2, #26
 8007ae0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007ae2:	f000 f843 	bl	8007b6c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007ae6:	4b02      	ldr	r3, [pc, #8]	; (8007af0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	20000160 	.word	0x20000160

08007af4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	4603      	mov	r3, r0
 8007afc:	6039      	str	r1, [r7, #0]
 8007afe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b00:	79fb      	ldrb	r3, [r7, #7]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d105      	bne.n	8007b12 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b06:	683a      	ldr	r2, [r7, #0]
 8007b08:	4907      	ldr	r1, [pc, #28]	; (8007b28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b0a:	4808      	ldr	r0, [pc, #32]	; (8007b2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b0c:	f7fe fdb4 	bl	8006678 <USBD_GetString>
 8007b10:	e004      	b.n	8007b1c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	4904      	ldr	r1, [pc, #16]	; (8007b28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b16:	4805      	ldr	r0, [pc, #20]	; (8007b2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b18:	f7fe fdae 	bl	8006678 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b1c:	4b02      	ldr	r3, [pc, #8]	; (8007b28 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3708      	adds	r7, #8
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	20000cf8 	.word	0x20000cf8
 8007b2c:	08007f40 	.word	0x08007f40

08007b30 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	4603      	mov	r3, r0
 8007b38:	6039      	str	r1, [r7, #0]
 8007b3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b3c:	79fb      	ldrb	r3, [r7, #7]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d105      	bne.n	8007b4e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b42:	683a      	ldr	r2, [r7, #0]
 8007b44:	4907      	ldr	r1, [pc, #28]	; (8007b64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b46:	4808      	ldr	r0, [pc, #32]	; (8007b68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b48:	f7fe fd96 	bl	8006678 <USBD_GetString>
 8007b4c:	e004      	b.n	8007b58 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b4e:	683a      	ldr	r2, [r7, #0]
 8007b50:	4904      	ldr	r1, [pc, #16]	; (8007b64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b52:	4805      	ldr	r0, [pc, #20]	; (8007b68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b54:	f7fe fd90 	bl	8006678 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b58:	4b02      	ldr	r3, [pc, #8]	; (8007b64 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	20000cf8 	.word	0x20000cf8
 8007b68:	08007f4c 	.word	0x08007f4c

08007b6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007b72:	4b0f      	ldr	r3, [pc, #60]	; (8007bb0 <Get_SerialNum+0x44>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007b78:	4b0e      	ldr	r3, [pc, #56]	; (8007bb4 <Get_SerialNum+0x48>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007b7e:	4b0e      	ldr	r3, [pc, #56]	; (8007bb8 <Get_SerialNum+0x4c>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4413      	add	r3, r2
 8007b8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d009      	beq.n	8007ba6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007b92:	2208      	movs	r2, #8
 8007b94:	4909      	ldr	r1, [pc, #36]	; (8007bbc <Get_SerialNum+0x50>)
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f000 f814 	bl	8007bc4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007b9c:	2204      	movs	r2, #4
 8007b9e:	4908      	ldr	r1, [pc, #32]	; (8007bc0 <Get_SerialNum+0x54>)
 8007ba0:	68b8      	ldr	r0, [r7, #8]
 8007ba2:	f000 f80f 	bl	8007bc4 <IntToUnicode>
  }
}
 8007ba6:	bf00      	nop
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	1fff7a10 	.word	0x1fff7a10
 8007bb4:	1fff7a14 	.word	0x1fff7a14
 8007bb8:	1fff7a18 	.word	0x1fff7a18
 8007bbc:	20000162 	.word	0x20000162
 8007bc0:	20000172 	.word	0x20000172

08007bc4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b087      	sub	sp, #28
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	75fb      	strb	r3, [r7, #23]
 8007bda:	e027      	b.n	8007c2c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	0f1b      	lsrs	r3, r3, #28
 8007be0:	2b09      	cmp	r3, #9
 8007be2:	d80b      	bhi.n	8007bfc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	0f1b      	lsrs	r3, r3, #28
 8007be8:	b2da      	uxtb	r2, r3
 8007bea:	7dfb      	ldrb	r3, [r7, #23]
 8007bec:	005b      	lsls	r3, r3, #1
 8007bee:	4619      	mov	r1, r3
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	440b      	add	r3, r1
 8007bf4:	3230      	adds	r2, #48	; 0x30
 8007bf6:	b2d2      	uxtb	r2, r2
 8007bf8:	701a      	strb	r2, [r3, #0]
 8007bfa:	e00a      	b.n	8007c12 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	0f1b      	lsrs	r3, r3, #28
 8007c00:	b2da      	uxtb	r2, r3
 8007c02:	7dfb      	ldrb	r3, [r7, #23]
 8007c04:	005b      	lsls	r3, r3, #1
 8007c06:	4619      	mov	r1, r3
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	440b      	add	r3, r1
 8007c0c:	3237      	adds	r2, #55	; 0x37
 8007c0e:	b2d2      	uxtb	r2, r2
 8007c10:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	011b      	lsls	r3, r3, #4
 8007c16:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c18:	7dfb      	ldrb	r3, [r7, #23]
 8007c1a:	005b      	lsls	r3, r3, #1
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	68ba      	ldr	r2, [r7, #8]
 8007c20:	4413      	add	r3, r2
 8007c22:	2200      	movs	r2, #0
 8007c24:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c26:	7dfb      	ldrb	r3, [r7, #23]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	75fb      	strb	r3, [r7, #23]
 8007c2c:	7dfa      	ldrb	r2, [r7, #23]
 8007c2e:	79fb      	ldrb	r3, [r7, #7]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d3d3      	bcc.n	8007bdc <IntToUnicode+0x18>
  }
}
 8007c34:	bf00      	nop
 8007c36:	371c      	adds	r7, #28
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8007c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007c78 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007c44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007c46:	e003      	b.n	8007c50 <LoopCopyDataInit>

08007c48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007c48:	4b0c      	ldr	r3, [pc, #48]	; (8007c7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007c4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007c4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007c4e:	3104      	adds	r1, #4

08007c50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007c50:	480b      	ldr	r0, [pc, #44]	; (8007c80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007c52:	4b0c      	ldr	r3, [pc, #48]	; (8007c84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007c54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007c56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007c58:	d3f6      	bcc.n	8007c48 <CopyDataInit>
  ldr  r2, =_sbss
 8007c5a:	4a0b      	ldr	r2, [pc, #44]	; (8007c88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007c5c:	e002      	b.n	8007c64 <LoopFillZerobss>

08007c5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007c5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007c60:	f842 3b04 	str.w	r3, [r2], #4

08007c64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007c64:	4b09      	ldr	r3, [pc, #36]	; (8007c8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007c66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007c68:	d3f9      	bcc.n	8007c5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007c6a:	f7ff f9ad 	bl	8006fc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007c6e:	f000 f817 	bl	8007ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007c72:	f7ff f80d 	bl	8006c90 <main>
  bx  lr    
 8007c76:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8007c78:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8007c7c:	08007f84 	.word	0x08007f84
  ldr  r0, =_sdata
 8007c80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007c84:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8007c88:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8007c8c:	20000efc 	.word	0x20000efc

08007c90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007c90:	e7fe      	b.n	8007c90 <ADC_IRQHandler>
	...

08007c94 <__errno>:
 8007c94:	4b01      	ldr	r3, [pc, #4]	; (8007c9c <__errno+0x8>)
 8007c96:	6818      	ldr	r0, [r3, #0]
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	2000017c 	.word	0x2000017c

08007ca0 <__libc_init_array>:
 8007ca0:	b570      	push	{r4, r5, r6, lr}
 8007ca2:	4e0d      	ldr	r6, [pc, #52]	; (8007cd8 <__libc_init_array+0x38>)
 8007ca4:	4c0d      	ldr	r4, [pc, #52]	; (8007cdc <__libc_init_array+0x3c>)
 8007ca6:	1ba4      	subs	r4, r4, r6
 8007ca8:	10a4      	asrs	r4, r4, #2
 8007caa:	2500      	movs	r5, #0
 8007cac:	42a5      	cmp	r5, r4
 8007cae:	d109      	bne.n	8007cc4 <__libc_init_array+0x24>
 8007cb0:	4e0b      	ldr	r6, [pc, #44]	; (8007ce0 <__libc_init_array+0x40>)
 8007cb2:	4c0c      	ldr	r4, [pc, #48]	; (8007ce4 <__libc_init_array+0x44>)
 8007cb4:	f000 f8f6 	bl	8007ea4 <_init>
 8007cb8:	1ba4      	subs	r4, r4, r6
 8007cba:	10a4      	asrs	r4, r4, #2
 8007cbc:	2500      	movs	r5, #0
 8007cbe:	42a5      	cmp	r5, r4
 8007cc0:	d105      	bne.n	8007cce <__libc_init_array+0x2e>
 8007cc2:	bd70      	pop	{r4, r5, r6, pc}
 8007cc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007cc8:	4798      	blx	r3
 8007cca:	3501      	adds	r5, #1
 8007ccc:	e7ee      	b.n	8007cac <__libc_init_array+0xc>
 8007cce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007cd2:	4798      	blx	r3
 8007cd4:	3501      	adds	r5, #1
 8007cd6:	e7f2      	b.n	8007cbe <__libc_init_array+0x1e>
 8007cd8:	08007f7c 	.word	0x08007f7c
 8007cdc:	08007f7c 	.word	0x08007f7c
 8007ce0:	08007f7c 	.word	0x08007f7c
 8007ce4:	08007f80 	.word	0x08007f80

08007ce8 <malloc>:
 8007ce8:	4b02      	ldr	r3, [pc, #8]	; (8007cf4 <malloc+0xc>)
 8007cea:	4601      	mov	r1, r0
 8007cec:	6818      	ldr	r0, [r3, #0]
 8007cee:	f000 b86d 	b.w	8007dcc <_malloc_r>
 8007cf2:	bf00      	nop
 8007cf4:	2000017c 	.word	0x2000017c

08007cf8 <free>:
 8007cf8:	4b02      	ldr	r3, [pc, #8]	; (8007d04 <free+0xc>)
 8007cfa:	4601      	mov	r1, r0
 8007cfc:	6818      	ldr	r0, [r3, #0]
 8007cfe:	f000 b817 	b.w	8007d30 <_free_r>
 8007d02:	bf00      	nop
 8007d04:	2000017c 	.word	0x2000017c

08007d08 <memcpy>:
 8007d08:	b510      	push	{r4, lr}
 8007d0a:	1e43      	subs	r3, r0, #1
 8007d0c:	440a      	add	r2, r1
 8007d0e:	4291      	cmp	r1, r2
 8007d10:	d100      	bne.n	8007d14 <memcpy+0xc>
 8007d12:	bd10      	pop	{r4, pc}
 8007d14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d1c:	e7f7      	b.n	8007d0e <memcpy+0x6>

08007d1e <memset>:
 8007d1e:	4402      	add	r2, r0
 8007d20:	4603      	mov	r3, r0
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d100      	bne.n	8007d28 <memset+0xa>
 8007d26:	4770      	bx	lr
 8007d28:	f803 1b01 	strb.w	r1, [r3], #1
 8007d2c:	e7f9      	b.n	8007d22 <memset+0x4>
	...

08007d30 <_free_r>:
 8007d30:	b538      	push	{r3, r4, r5, lr}
 8007d32:	4605      	mov	r5, r0
 8007d34:	2900      	cmp	r1, #0
 8007d36:	d045      	beq.n	8007dc4 <_free_r+0x94>
 8007d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d3c:	1f0c      	subs	r4, r1, #4
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	bfb8      	it	lt
 8007d42:	18e4      	addlt	r4, r4, r3
 8007d44:	f000 f8ac 	bl	8007ea0 <__malloc_lock>
 8007d48:	4a1f      	ldr	r2, [pc, #124]	; (8007dc8 <_free_r+0x98>)
 8007d4a:	6813      	ldr	r3, [r2, #0]
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	b933      	cbnz	r3, 8007d5e <_free_r+0x2e>
 8007d50:	6063      	str	r3, [r4, #4]
 8007d52:	6014      	str	r4, [r2, #0]
 8007d54:	4628      	mov	r0, r5
 8007d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d5a:	f000 b8a2 	b.w	8007ea2 <__malloc_unlock>
 8007d5e:	42a3      	cmp	r3, r4
 8007d60:	d90c      	bls.n	8007d7c <_free_r+0x4c>
 8007d62:	6821      	ldr	r1, [r4, #0]
 8007d64:	1862      	adds	r2, r4, r1
 8007d66:	4293      	cmp	r3, r2
 8007d68:	bf04      	itt	eq
 8007d6a:	681a      	ldreq	r2, [r3, #0]
 8007d6c:	685b      	ldreq	r3, [r3, #4]
 8007d6e:	6063      	str	r3, [r4, #4]
 8007d70:	bf04      	itt	eq
 8007d72:	1852      	addeq	r2, r2, r1
 8007d74:	6022      	streq	r2, [r4, #0]
 8007d76:	6004      	str	r4, [r0, #0]
 8007d78:	e7ec      	b.n	8007d54 <_free_r+0x24>
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	685a      	ldr	r2, [r3, #4]
 8007d7e:	b10a      	cbz	r2, 8007d84 <_free_r+0x54>
 8007d80:	42a2      	cmp	r2, r4
 8007d82:	d9fa      	bls.n	8007d7a <_free_r+0x4a>
 8007d84:	6819      	ldr	r1, [r3, #0]
 8007d86:	1858      	adds	r0, r3, r1
 8007d88:	42a0      	cmp	r0, r4
 8007d8a:	d10b      	bne.n	8007da4 <_free_r+0x74>
 8007d8c:	6820      	ldr	r0, [r4, #0]
 8007d8e:	4401      	add	r1, r0
 8007d90:	1858      	adds	r0, r3, r1
 8007d92:	4282      	cmp	r2, r0
 8007d94:	6019      	str	r1, [r3, #0]
 8007d96:	d1dd      	bne.n	8007d54 <_free_r+0x24>
 8007d98:	6810      	ldr	r0, [r2, #0]
 8007d9a:	6852      	ldr	r2, [r2, #4]
 8007d9c:	605a      	str	r2, [r3, #4]
 8007d9e:	4401      	add	r1, r0
 8007da0:	6019      	str	r1, [r3, #0]
 8007da2:	e7d7      	b.n	8007d54 <_free_r+0x24>
 8007da4:	d902      	bls.n	8007dac <_free_r+0x7c>
 8007da6:	230c      	movs	r3, #12
 8007da8:	602b      	str	r3, [r5, #0]
 8007daa:	e7d3      	b.n	8007d54 <_free_r+0x24>
 8007dac:	6820      	ldr	r0, [r4, #0]
 8007dae:	1821      	adds	r1, r4, r0
 8007db0:	428a      	cmp	r2, r1
 8007db2:	bf04      	itt	eq
 8007db4:	6811      	ldreq	r1, [r2, #0]
 8007db6:	6852      	ldreq	r2, [r2, #4]
 8007db8:	6062      	str	r2, [r4, #4]
 8007dba:	bf04      	itt	eq
 8007dbc:	1809      	addeq	r1, r1, r0
 8007dbe:	6021      	streq	r1, [r4, #0]
 8007dc0:	605c      	str	r4, [r3, #4]
 8007dc2:	e7c7      	b.n	8007d54 <_free_r+0x24>
 8007dc4:	bd38      	pop	{r3, r4, r5, pc}
 8007dc6:	bf00      	nop
 8007dc8:	200004a0 	.word	0x200004a0

08007dcc <_malloc_r>:
 8007dcc:	b570      	push	{r4, r5, r6, lr}
 8007dce:	1ccd      	adds	r5, r1, #3
 8007dd0:	f025 0503 	bic.w	r5, r5, #3
 8007dd4:	3508      	adds	r5, #8
 8007dd6:	2d0c      	cmp	r5, #12
 8007dd8:	bf38      	it	cc
 8007dda:	250c      	movcc	r5, #12
 8007ddc:	2d00      	cmp	r5, #0
 8007dde:	4606      	mov	r6, r0
 8007de0:	db01      	blt.n	8007de6 <_malloc_r+0x1a>
 8007de2:	42a9      	cmp	r1, r5
 8007de4:	d903      	bls.n	8007dee <_malloc_r+0x22>
 8007de6:	230c      	movs	r3, #12
 8007de8:	6033      	str	r3, [r6, #0]
 8007dea:	2000      	movs	r0, #0
 8007dec:	bd70      	pop	{r4, r5, r6, pc}
 8007dee:	f000 f857 	bl	8007ea0 <__malloc_lock>
 8007df2:	4a21      	ldr	r2, [pc, #132]	; (8007e78 <_malloc_r+0xac>)
 8007df4:	6814      	ldr	r4, [r2, #0]
 8007df6:	4621      	mov	r1, r4
 8007df8:	b991      	cbnz	r1, 8007e20 <_malloc_r+0x54>
 8007dfa:	4c20      	ldr	r4, [pc, #128]	; (8007e7c <_malloc_r+0xb0>)
 8007dfc:	6823      	ldr	r3, [r4, #0]
 8007dfe:	b91b      	cbnz	r3, 8007e08 <_malloc_r+0x3c>
 8007e00:	4630      	mov	r0, r6
 8007e02:	f000 f83d 	bl	8007e80 <_sbrk_r>
 8007e06:	6020      	str	r0, [r4, #0]
 8007e08:	4629      	mov	r1, r5
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	f000 f838 	bl	8007e80 <_sbrk_r>
 8007e10:	1c43      	adds	r3, r0, #1
 8007e12:	d124      	bne.n	8007e5e <_malloc_r+0x92>
 8007e14:	230c      	movs	r3, #12
 8007e16:	6033      	str	r3, [r6, #0]
 8007e18:	4630      	mov	r0, r6
 8007e1a:	f000 f842 	bl	8007ea2 <__malloc_unlock>
 8007e1e:	e7e4      	b.n	8007dea <_malloc_r+0x1e>
 8007e20:	680b      	ldr	r3, [r1, #0]
 8007e22:	1b5b      	subs	r3, r3, r5
 8007e24:	d418      	bmi.n	8007e58 <_malloc_r+0x8c>
 8007e26:	2b0b      	cmp	r3, #11
 8007e28:	d90f      	bls.n	8007e4a <_malloc_r+0x7e>
 8007e2a:	600b      	str	r3, [r1, #0]
 8007e2c:	50cd      	str	r5, [r1, r3]
 8007e2e:	18cc      	adds	r4, r1, r3
 8007e30:	4630      	mov	r0, r6
 8007e32:	f000 f836 	bl	8007ea2 <__malloc_unlock>
 8007e36:	f104 000b 	add.w	r0, r4, #11
 8007e3a:	1d23      	adds	r3, r4, #4
 8007e3c:	f020 0007 	bic.w	r0, r0, #7
 8007e40:	1ac3      	subs	r3, r0, r3
 8007e42:	d0d3      	beq.n	8007dec <_malloc_r+0x20>
 8007e44:	425a      	negs	r2, r3
 8007e46:	50e2      	str	r2, [r4, r3]
 8007e48:	e7d0      	b.n	8007dec <_malloc_r+0x20>
 8007e4a:	428c      	cmp	r4, r1
 8007e4c:	684b      	ldr	r3, [r1, #4]
 8007e4e:	bf16      	itet	ne
 8007e50:	6063      	strne	r3, [r4, #4]
 8007e52:	6013      	streq	r3, [r2, #0]
 8007e54:	460c      	movne	r4, r1
 8007e56:	e7eb      	b.n	8007e30 <_malloc_r+0x64>
 8007e58:	460c      	mov	r4, r1
 8007e5a:	6849      	ldr	r1, [r1, #4]
 8007e5c:	e7cc      	b.n	8007df8 <_malloc_r+0x2c>
 8007e5e:	1cc4      	adds	r4, r0, #3
 8007e60:	f024 0403 	bic.w	r4, r4, #3
 8007e64:	42a0      	cmp	r0, r4
 8007e66:	d005      	beq.n	8007e74 <_malloc_r+0xa8>
 8007e68:	1a21      	subs	r1, r4, r0
 8007e6a:	4630      	mov	r0, r6
 8007e6c:	f000 f808 	bl	8007e80 <_sbrk_r>
 8007e70:	3001      	adds	r0, #1
 8007e72:	d0cf      	beq.n	8007e14 <_malloc_r+0x48>
 8007e74:	6025      	str	r5, [r4, #0]
 8007e76:	e7db      	b.n	8007e30 <_malloc_r+0x64>
 8007e78:	200004a0 	.word	0x200004a0
 8007e7c:	200004a4 	.word	0x200004a4

08007e80 <_sbrk_r>:
 8007e80:	b538      	push	{r3, r4, r5, lr}
 8007e82:	4c06      	ldr	r4, [pc, #24]	; (8007e9c <_sbrk_r+0x1c>)
 8007e84:	2300      	movs	r3, #0
 8007e86:	4605      	mov	r5, r0
 8007e88:	4608      	mov	r0, r1
 8007e8a:	6023      	str	r3, [r4, #0]
 8007e8c:	f7ff f870 	bl	8006f70 <_sbrk>
 8007e90:	1c43      	adds	r3, r0, #1
 8007e92:	d102      	bne.n	8007e9a <_sbrk_r+0x1a>
 8007e94:	6823      	ldr	r3, [r4, #0]
 8007e96:	b103      	cbz	r3, 8007e9a <_sbrk_r+0x1a>
 8007e98:	602b      	str	r3, [r5, #0]
 8007e9a:	bd38      	pop	{r3, r4, r5, pc}
 8007e9c:	20000ef8 	.word	0x20000ef8

08007ea0 <__malloc_lock>:
 8007ea0:	4770      	bx	lr

08007ea2 <__malloc_unlock>:
 8007ea2:	4770      	bx	lr

08007ea4 <_init>:
 8007ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ea6:	bf00      	nop
 8007ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eaa:	bc08      	pop	{r3}
 8007eac:	469e      	mov	lr, r3
 8007eae:	4770      	bx	lr

08007eb0 <_fini>:
 8007eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb2:	bf00      	nop
 8007eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eb6:	bc08      	pop	{r3}
 8007eb8:	469e      	mov	lr, r3
 8007eba:	4770      	bx	lr
