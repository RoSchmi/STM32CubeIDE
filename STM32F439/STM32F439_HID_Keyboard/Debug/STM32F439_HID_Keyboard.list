
STM32F439_HID_Keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000747c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007628  08007628  00017628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007688  08007688  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  08007688  08007688  00017688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007690  08007690  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007690  08007690  00017690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007694  08007694  00017694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08007698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000968  200001c8  08007860  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b30  08007860  00020b30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001582c  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003251  00000000  00000000  00035a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e98  00000000  00000000  00038c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d00  00000000  00000000  00039b10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000272c5  00000000  00000000  0003a810  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f6ee  00000000  00000000  00061ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dd24f  00000000  00000000  000711c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014e412  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b94  00000000  00000000  0014e490  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200001c8 	.word	0x200001c8
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007610 	.word	0x08007610

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200001cc 	.word	0x200001cc
 80001e8:	08007610 	.word	0x08007610

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004f0:	4b0e      	ldr	r3, [pc, #56]	; (800052c <HAL_Init+0x40>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0d      	ldr	r2, [pc, #52]	; (800052c <HAL_Init+0x40>)
 80004f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004fc:	4b0b      	ldr	r3, [pc, #44]	; (800052c <HAL_Init+0x40>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a0a      	ldr	r2, [pc, #40]	; (800052c <HAL_Init+0x40>)
 8000502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000506:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a07      	ldr	r2, [pc, #28]	; (800052c <HAL_Init+0x40>)
 800050e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000512:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000514:	2003      	movs	r0, #3
 8000516:	f000 f94d 	bl	80007b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051a:	2000      	movs	r0, #0
 800051c:	f000 f808 	bl	8000530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000520:	f006 f9da 	bl	80068d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40023c00 	.word	0x40023c00

08000530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_InitTick+0x54>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <HAL_InitTick+0x58>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	4619      	mov	r1, r3
 8000542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000546:	fbb3 f3f1 	udiv	r3, r3, r1
 800054a:	fbb2 f3f3 	udiv	r3, r2, r3
 800054e:	4618      	mov	r0, r3
 8000550:	f000 f965 	bl	800081e <HAL_SYSTICK_Config>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800055a:	2301      	movs	r3, #1
 800055c:	e00e      	b.n	800057c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2b0f      	cmp	r3, #15
 8000562:	d80a      	bhi.n	800057a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000564:	2200      	movs	r2, #0
 8000566:	6879      	ldr	r1, [r7, #4]
 8000568:	f04f 30ff 	mov.w	r0, #4294967295
 800056c:	f000 f92d 	bl	80007ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000570:	4a06      	ldr	r2, [pc, #24]	; (800058c <HAL_InitTick+0x5c>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	e000      	b.n	800057c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800057a:	2301      	movs	r3, #1
}
 800057c:	4618      	mov	r0, r3
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000110 	.word	0x20000110
 8000588:	20000004 	.word	0x20000004
 800058c:	20000000 	.word	0x20000000

08000590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_IncTick+0x20>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	461a      	mov	r2, r3
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <HAL_IncTick+0x24>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4413      	add	r3, r2
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <HAL_IncTick+0x24>)
 80005a2:	6013      	str	r3, [r2, #0]
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000004 	.word	0x20000004
 80005b4:	200001f4 	.word	0x200001f4

080005b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  return uwTick;
 80005bc:	4b03      	ldr	r3, [pc, #12]	; (80005cc <HAL_GetTick+0x14>)
 80005be:	681b      	ldr	r3, [r3, #0]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	200001f4 	.word	0x200001f4

080005d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005d8:	f7ff ffee 	bl	80005b8 <HAL_GetTick>
 80005dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005e8:	d005      	beq.n	80005f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <HAL_Delay+0x40>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	461a      	mov	r2, r3
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4413      	add	r3, r2
 80005f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005f6:	bf00      	nop
 80005f8:	f7ff ffde 	bl	80005b8 <HAL_GetTick>
 80005fc:	4602      	mov	r2, r0
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	68fa      	ldr	r2, [r7, #12]
 8000604:	429a      	cmp	r2, r3
 8000606:	d8f7      	bhi.n	80005f8 <HAL_Delay+0x28>
  {
  }
}
 8000608:	bf00      	nop
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000004 	.word	0x20000004

08000614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f003 0307 	and.w	r3, r3, #7
 8000622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <__NVIC_SetPriorityGrouping+0x44>)
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000630:	4013      	ands	r3, r2
 8000632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800063c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000646:	4a04      	ldr	r2, [pc, #16]	; (8000658 <__NVIC_SetPriorityGrouping+0x44>)
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	60d3      	str	r3, [r2, #12]
}
 800064c:	bf00      	nop
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <__NVIC_GetPriorityGrouping+0x18>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	0a1b      	lsrs	r3, r3, #8
 8000666:	f003 0307 	and.w	r3, r3, #7
}
 800066a:	4618      	mov	r0, r3
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000686:	2b00      	cmp	r3, #0
 8000688:	db0b      	blt.n	80006a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	f003 021f 	and.w	r2, r3, #31
 8000690:	4907      	ldr	r1, [pc, #28]	; (80006b0 <__NVIC_EnableIRQ+0x38>)
 8000692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000696:	095b      	lsrs	r3, r3, #5
 8000698:	2001      	movs	r0, #1
 800069a:	fa00 f202 	lsl.w	r2, r0, r2
 800069e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	e000e100 	.word	0xe000e100

080006b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	6039      	str	r1, [r7, #0]
 80006be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	db0a      	blt.n	80006de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	490c      	ldr	r1, [pc, #48]	; (8000700 <__NVIC_SetPriority+0x4c>)
 80006ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d2:	0112      	lsls	r2, r2, #4
 80006d4:	b2d2      	uxtb	r2, r2
 80006d6:	440b      	add	r3, r1
 80006d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006dc:	e00a      	b.n	80006f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4908      	ldr	r1, [pc, #32]	; (8000704 <__NVIC_SetPriority+0x50>)
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	f003 030f 	and.w	r3, r3, #15
 80006ea:	3b04      	subs	r3, #4
 80006ec:	0112      	lsls	r2, r2, #4
 80006ee:	b2d2      	uxtb	r2, r2
 80006f0:	440b      	add	r3, r1
 80006f2:	761a      	strb	r2, [r3, #24]
}
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	e000e100 	.word	0xe000e100
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000708:	b480      	push	{r7}
 800070a:	b089      	sub	sp, #36	; 0x24
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	f003 0307 	and.w	r3, r3, #7
 800071a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	f1c3 0307 	rsb	r3, r3, #7
 8000722:	2b04      	cmp	r3, #4
 8000724:	bf28      	it	cs
 8000726:	2304      	movcs	r3, #4
 8000728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	3304      	adds	r3, #4
 800072e:	2b06      	cmp	r3, #6
 8000730:	d902      	bls.n	8000738 <NVIC_EncodePriority+0x30>
 8000732:	69fb      	ldr	r3, [r7, #28]
 8000734:	3b03      	subs	r3, #3
 8000736:	e000      	b.n	800073a <NVIC_EncodePriority+0x32>
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	f04f 32ff 	mov.w	r2, #4294967295
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	fa02 f303 	lsl.w	r3, r2, r3
 8000746:	43da      	mvns	r2, r3
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	401a      	ands	r2, r3
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000750:	f04f 31ff 	mov.w	r1, #4294967295
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	fa01 f303 	lsl.w	r3, r1, r3
 800075a:	43d9      	mvns	r1, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000760:	4313      	orrs	r3, r2
         );
}
 8000762:	4618      	mov	r0, r3
 8000764:	3724      	adds	r7, #36	; 0x24
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
	...

08000770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3b01      	subs	r3, #1
 800077c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000780:	d301      	bcc.n	8000786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000782:	2301      	movs	r3, #1
 8000784:	e00f      	b.n	80007a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000786:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <SysTick_Config+0x40>)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3b01      	subs	r3, #1
 800078c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800078e:	210f      	movs	r1, #15
 8000790:	f04f 30ff 	mov.w	r0, #4294967295
 8000794:	f7ff ff8e 	bl	80006b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <SysTick_Config+0x40>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800079e:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <SysTick_Config+0x40>)
 80007a0:	2207      	movs	r2, #7
 80007a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	e000e010 	.word	0xe000e010

080007b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff ff29 	bl	8000614 <__NVIC_SetPriorityGrouping>
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b086      	sub	sp, #24
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	4603      	mov	r3, r0
 80007d2:	60b9      	str	r1, [r7, #8]
 80007d4:	607a      	str	r2, [r7, #4]
 80007d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007dc:	f7ff ff3e 	bl	800065c <__NVIC_GetPriorityGrouping>
 80007e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	68b9      	ldr	r1, [r7, #8]
 80007e6:	6978      	ldr	r0, [r7, #20]
 80007e8:	f7ff ff8e 	bl	8000708 <NVIC_EncodePriority>
 80007ec:	4602      	mov	r2, r0
 80007ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f2:	4611      	mov	r1, r2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff5d 	bl	80006b4 <__NVIC_SetPriority>
}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	4603      	mov	r3, r0
 800080a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800080c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff31 	bl	8000678 <__NVIC_EnableIRQ>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff ffa2 	bl	8000770 <SysTick_Config>
 800082c:	4603      	mov	r3, r0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000836:	b480      	push	{r7}
 8000838:	b083      	sub	sp, #12
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000844:	b2db      	uxtb	r3, r3
 8000846:	2b02      	cmp	r3, #2
 8000848:	d004      	beq.n	8000854 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2280      	movs	r2, #128	; 0x80
 800084e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000850:	2301      	movs	r3, #1
 8000852:	e00c      	b.n	800086e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2205      	movs	r2, #5
 8000858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f022 0201 	bic.w	r2, r2, #1
 800086a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
	...

0800087c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b088      	sub	sp, #32
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800088c:	4baa      	ldr	r3, [pc, #680]	; (8000b38 <HAL_ETH_Init+0x2bc>)
 800088e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000894:	2300      	movs	r3, #0
 8000896:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d101      	bne.n	80008a2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	e185      	b.n	8000bae <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d106      	bne.n	80008bc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2200      	movs	r2, #0
 80008b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f005 fd6a 	bl	8006390 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008bc:	2300      	movs	r3, #0
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	4b9e      	ldr	r3, [pc, #632]	; (8000b3c <HAL_ETH_Init+0x2c0>)
 80008c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c4:	4a9d      	ldr	r2, [pc, #628]	; (8000b3c <HAL_ETH_Init+0x2c0>)
 80008c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ca:	6453      	str	r3, [r2, #68]	; 0x44
 80008cc:	4b9b      	ldr	r3, [pc, #620]	; (8000b3c <HAL_ETH_Init+0x2c0>)
 80008ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80008d8:	4b99      	ldr	r3, [pc, #612]	; (8000b40 <HAL_ETH_Init+0x2c4>)
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	4a98      	ldr	r2, [pc, #608]	; (8000b40 <HAL_ETH_Init+0x2c4>)
 80008de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80008e2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80008e4:	4b96      	ldr	r3, [pc, #600]	; (8000b40 <HAL_ETH_Init+0x2c4>)
 80008e6:	685a      	ldr	r2, [r3, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6a1b      	ldr	r3, [r3, #32]
 80008ec:	4994      	ldr	r1, [pc, #592]	; (8000b40 <HAL_ETH_Init+0x2c4>)
 80008ee:	4313      	orrs	r3, r2
 80008f0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f042 0201 	orr.w	r2, r2, #1
 8000904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000908:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800090a:	f7ff fe55 	bl	80005b8 <HAL_GetTick>
 800090e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000910:	e011      	b.n	8000936 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000912:	f7ff fe51 	bl	80005b8 <HAL_GetTick>
 8000916:	4602      	mov	r2, r0
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	1ad3      	subs	r3, r2, r3
 800091c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000920:	d909      	bls.n	8000936 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2203      	movs	r2, #3
 8000926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2200      	movs	r2, #0
 800092e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000932:	2303      	movs	r3, #3
 8000934:	e13b      	b.n	8000bae <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1e4      	bne.n	8000912 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	691b      	ldr	r3, [r3, #16]
 800094e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	f023 031c 	bic.w	r3, r3, #28
 8000956:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000958:	f002 fb48 	bl	8002fec <HAL_RCC_GetHCLKFreq>
 800095c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800095e:	69bb      	ldr	r3, [r7, #24]
 8000960:	4a78      	ldr	r2, [pc, #480]	; (8000b44 <HAL_ETH_Init+0x2c8>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d908      	bls.n	8000978 <HAL_ETH_Init+0xfc>
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	4a77      	ldr	r2, [pc, #476]	; (8000b48 <HAL_ETH_Init+0x2cc>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d804      	bhi.n	8000978 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	f043 0308 	orr.w	r3, r3, #8
 8000974:	61fb      	str	r3, [r7, #28]
 8000976:	e027      	b.n	80009c8 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	4a73      	ldr	r2, [pc, #460]	; (8000b48 <HAL_ETH_Init+0x2cc>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d908      	bls.n	8000992 <HAL_ETH_Init+0x116>
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	4a72      	ldr	r2, [pc, #456]	; (8000b4c <HAL_ETH_Init+0x2d0>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d804      	bhi.n	8000992 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	f043 030c 	orr.w	r3, r3, #12
 800098e:	61fb      	str	r3, [r7, #28]
 8000990:	e01a      	b.n	80009c8 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	4a6d      	ldr	r2, [pc, #436]	; (8000b4c <HAL_ETH_Init+0x2d0>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d903      	bls.n	80009a2 <HAL_ETH_Init+0x126>
 800099a:	69bb      	ldr	r3, [r7, #24]
 800099c:	4a6c      	ldr	r2, [pc, #432]	; (8000b50 <HAL_ETH_Init+0x2d4>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d911      	bls.n	80009c6 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80009a2:	69bb      	ldr	r3, [r7, #24]
 80009a4:	4a6a      	ldr	r2, [pc, #424]	; (8000b50 <HAL_ETH_Init+0x2d4>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d908      	bls.n	80009bc <HAL_ETH_Init+0x140>
 80009aa:	69bb      	ldr	r3, [r7, #24]
 80009ac:	4a69      	ldr	r2, [pc, #420]	; (8000b54 <HAL_ETH_Init+0x2d8>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d804      	bhi.n	80009bc <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	61fb      	str	r3, [r7, #28]
 80009ba:	e005      	b.n	80009c8 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	f043 0310 	orr.w	r3, r3, #16
 80009c2:	61fb      	str	r3, [r7, #28]
 80009c4:	e000      	b.n	80009c8 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80009c6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	69fa      	ldr	r2, [r7, #28]
 80009ce:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80009d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009d4:	2100      	movs	r1, #0
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f000 f956 	bl	8000c88 <HAL_ETH_WritePHYRegister>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d00b      	beq.n	80009fa <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80009e6:	6939      	ldr	r1, [r7, #16]
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f000 f9b3 	bl	8000d54 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2201      	movs	r2, #1
 80009f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e0d9      	b.n	8000bae <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80009fa:	20ff      	movs	r0, #255	; 0xff
 80009fc:	f7ff fde8 	bl	80005d0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	f000 80a7 	beq.w	8000b58 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000a0a:	f7ff fdd5 	bl	80005b8 <HAL_GetTick>
 8000a0e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	461a      	mov	r2, r3
 8000a16:	2101      	movs	r1, #1
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f000 f8cd 	bl	8000bb8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000a1e:	f7ff fdcb 	bl	80005b8 <HAL_GetTick>
 8000a22:	4602      	mov	r2, r0
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	1ad3      	subs	r3, r2, r3
 8000a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d90f      	bls.n	8000a50 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000a30:	2301      	movs	r3, #1
 8000a32:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000a34:	6939      	ldr	r1, [r7, #16]
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f000 f98c 	bl	8000d54 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2201      	movs	r2, #1
 8000a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2200      	movs	r2, #0
 8000a48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	e0ae      	b.n	8000bae <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f003 0304 	and.w	r3, r3, #4
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d0da      	beq.n	8000a10 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000a5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a5e:	2100      	movs	r1, #0
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f000 f911 	bl	8000c88 <HAL_ETH_WritePHYRegister>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d00b      	beq.n	8000a84 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000a70:	6939      	ldr	r1, [r7, #16]
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f000 f96e 	bl	8000d54 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000a80:	2301      	movs	r3, #1
 8000a82:	e094      	b.n	8000bae <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000a84:	f7ff fd98 	bl	80005b8 <HAL_GetTick>
 8000a88:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	461a      	mov	r2, r3
 8000a90:	2101      	movs	r1, #1
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f000 f890 	bl	8000bb8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000a98:	f7ff fd8e 	bl	80005b8 <HAL_GetTick>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d90f      	bls.n	8000aca <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000aae:	6939      	ldr	r1, [r7, #16]
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f000 f94f 	bl	8000d54 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2201      	movs	r2, #1
 8000aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	e071      	b.n	8000bae <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	f003 0320 	and.w	r3, r3, #32
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d0da      	beq.n	8000a8a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000ad4:	f107 030c 	add.w	r3, r7, #12
 8000ad8:	461a      	mov	r2, r3
 8000ada:	211f      	movs	r1, #31
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f000 f86b 	bl	8000bb8 <HAL_ETH_ReadPHYRegister>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d00b      	beq.n	8000b00 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000aec:	6939      	ldr	r1, [r7, #16]
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 f930 	bl	8000d54 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2201      	movs	r2, #1
 8000af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000afc:	2301      	movs	r3, #1
 8000afe:	e056      	b.n	8000bae <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f003 0310 	and.w	r3, r3, #16
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d004      	beq.n	8000b14 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	e002      	b.n	8000b1a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2200      	movs	r2, #0
 8000b18:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	f003 0304 	and.w	r3, r3, #4
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d003      	beq.n	8000b2c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	e037      	b.n	8000b9c <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	e032      	b.n	8000b9c <HAL_ETH_Init+0x320>
 8000b36:	bf00      	nop
 8000b38:	03938700 	.word	0x03938700
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40013800 	.word	0x40013800
 8000b44:	01312cff 	.word	0x01312cff
 8000b48:	02160ebf 	.word	0x02160ebf
 8000b4c:	039386ff 	.word	0x039386ff
 8000b50:	05f5e0ff 	.word	0x05f5e0ff
 8000b54:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	08db      	lsrs	r3, r3, #3
 8000b5e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	085b      	lsrs	r3, r3, #1
 8000b66:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	2100      	movs	r1, #0
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f000 f889 	bl	8000c88 <HAL_ETH_WritePHYRegister>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d00b      	beq.n	8000b94 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000b80:	6939      	ldr	r1, [r7, #16]
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f000 f8e6 	bl	8000d54 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	e00c      	b.n	8000bae <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000b94:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000b98:	f7ff fd1a 	bl	80005d0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000b9c:	6939      	ldr	r1, [r7, #16]
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f000 f8d8 	bl	8000d54 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3720      	adds	r7, #32
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop

08000bb8 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	607a      	str	r2, [r7, #4]
 8000bc4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	2b82      	cmp	r3, #130	; 0x82
 8000bd8:	d101      	bne.n	8000bde <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	e050      	b.n	8000c80 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	2282      	movs	r2, #130	; 0x82
 8000be2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	691b      	ldr	r3, [r3, #16]
 8000bec:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	f003 031c 	and.w	r3, r3, #28
 8000bf4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	8a1b      	ldrh	r3, [r3, #16]
 8000bfa:	02db      	lsls	r3, r3, #11
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	697a      	ldr	r2, [r7, #20]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000c04:	897b      	ldrh	r3, [r7, #10]
 8000c06:	019b      	lsls	r3, r3, #6
 8000c08:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000c0c:	697a      	ldr	r2, [r7, #20]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	f023 0302 	bic.w	r3, r3, #2
 8000c18:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	697a      	ldr	r2, [r7, #20]
 8000c28:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000c2a:	f7ff fcc5 	bl	80005b8 <HAL_GetTick>
 8000c2e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000c30:	e015      	b.n	8000c5e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000c32:	f7ff fcc1 	bl	80005b8 <HAL_GetTick>
 8000c36:	4602      	mov	r2, r0
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	1ad3      	subs	r3, r2, r3
 8000c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c40:	d309      	bcc.n	8000c56 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	2201      	movs	r2, #1
 8000c46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8000c52:	2303      	movs	r3, #3
 8000c54:	e014      	b.n	8000c80 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	691b      	ldr	r3, [r3, #16]
 8000c5c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1e4      	bne.n	8000c32 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	461a      	mov	r2, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	2201      	movs	r2, #1
 8000c7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	460b      	mov	r3, r1
 8000c92:	607a      	str	r2, [r7, #4]
 8000c94:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	2b42      	cmp	r3, #66	; 0x42
 8000ca8:	d101      	bne.n	8000cae <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8000caa:	2302      	movs	r3, #2
 8000cac:	e04e      	b.n	8000d4c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	2242      	movs	r2, #66	; 0x42
 8000cb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	691b      	ldr	r3, [r3, #16]
 8000cbc:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	f003 031c 	and.w	r3, r3, #28
 8000cc4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	8a1b      	ldrh	r3, [r3, #16]
 8000cca:	02db      	lsls	r3, r3, #11
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	697a      	ldr	r2, [r7, #20]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000cd4:	897b      	ldrh	r3, [r7, #10]
 8000cd6:	019b      	lsls	r3, r3, #6
 8000cd8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000cdc:	697a      	ldr	r2, [r7, #20]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	f043 0302 	orr.w	r3, r3, #2
 8000ce8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	b29a      	uxth	r2, r3
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000d04:	f7ff fc58 	bl	80005b8 <HAL_GetTick>
 8000d08:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000d0a:	e015      	b.n	8000d38 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000d0c:	f7ff fc54 	bl	80005b8 <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d1a:	d309      	bcc.n	8000d30 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	2200      	movs	r2, #0
 8000d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	e00d      	b.n	8000d4c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	691b      	ldr	r3, [r3, #16]
 8000d36:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d1e4      	bne.n	8000d0c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	2201      	movs	r2, #1
 8000d46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b0b0      	sub	sp, #192	; 0xc0
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d007      	beq.n	8000d7a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d70:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d78:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8000d82:	2300      	movs	r3, #0
 8000d84:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d103      	bne.n	8000da2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8000d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d9e:	663b      	str	r3, [r7, #96]	; 0x60
 8000da0:	e001      	b.n	8000da6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8000da6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000daa:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8000dac:	2300      	movs	r3, #0
 8000dae:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8000db0:	2300      	movs	r3, #0
 8000db2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8000dc0:	2340      	movs	r3, #64	; 0x40
 8000dc2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8000de8:	2300      	movs	r3, #0
 8000dea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8000df4:	2380      	movs	r3, #128	; 0x80
 8000df6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8000e12:	2300      	movs	r3, #0
 8000e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8000e28:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e2c:	4bac      	ldr	r3, [pc, #688]	; (80010e0 <ETH_MACDMAConfig+0x38c>)
 8000e2e:	4013      	ands	r3, r2
 8000e30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8000e34:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8000e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8000e38:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8000e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8000e3c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8000e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8000e40:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8000e46:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8000e48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8000e4a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8000e4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8000e4e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8000e54:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8000e56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8000e58:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8000e5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8000e5c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8000e5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8000e60:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8000e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8000e64:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8000e66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8000e68:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8000e6a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e7c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e88:	2001      	movs	r0, #1
 8000e8a:	f7ff fba1 	bl	80005d0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e96:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000e98:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8000e9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000e9c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8000e9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8000ea0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8000ea2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8000ea6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8000ea8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8000eac:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8000eae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8000eb2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8000eb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8000eb8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8000ebc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8000ec4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000ec6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f7ff fb7c 	bl	80005d0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000ee0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000eea:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000ef4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8000f00:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f04:	f64f 7341 	movw	r3, #65345	; 0xff41
 8000f08:	4013      	ands	r3, r2
 8000f0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8000f0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f12:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8000f14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8000f18:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8000f1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8000f1e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8000f20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8000f24:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8000f26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8000f2a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8000f2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8000f30:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8000f32:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f36:	4313      	orrs	r3, r2
 8000f38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f44:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000f50:	2001      	movs	r0, #1
 8000f52:	f7ff fb3d 	bl	80005d0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f5e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000f60:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8000f64:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f7ff fb28 	bl	80005d0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f88:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8000f8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f92:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8000f98:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f9c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8000faa:	2300      	movs	r3, #0
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8000fb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8000fb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fbc:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8000fbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fc2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8000fc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fde:	3318      	adds	r3, #24
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8000fe6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000fea:	4b3e      	ldr	r3, [pc, #248]	; (80010e4 <ETH_MACDMAConfig+0x390>)
 8000fec:	4013      	ands	r3, r2
 8000fee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000ff2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000ff6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8000ff8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8000ffa:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8000ffc:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8000ffe:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001000:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001002:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001004:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001006:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001008:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800100a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800100e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001010:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001012:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001014:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001018:	4313      	orrs	r3, r2
 800101a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001026:	3318      	adds	r3, #24
 8001028:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800102c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001036:	3318      	adds	r3, #24
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800103e:	2001      	movs	r0, #1
 8001040:	f7ff fac6 	bl	80005d0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800104c:	3318      	adds	r3, #24
 800104e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001052:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001058:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800105a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800105c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800105e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001060:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001064:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001068:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800106a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800106c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800106e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800107c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff fa9f 	bl	80005d0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800109a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800109e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d10f      	bne.n	80010c8 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010b0:	331c      	adds	r3, #28
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80010bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010c4:	331c      	adds	r3, #28
 80010c6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	695b      	ldr	r3, [r3, #20]
 80010cc:	461a      	mov	r2, r3
 80010ce:	2100      	movs	r1, #0
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 f809 	bl	80010e8 <ETH_MACAddressConfig>
}
 80010d6:	bf00      	nop
 80010d8:	37c0      	adds	r7, #192	; 0xc0
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	ff20810f 	.word	0xff20810f
 80010e4:	f8de3f23 	.word	0xf8de3f23

080010e8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b087      	sub	sp, #28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3305      	adds	r3, #5
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	3204      	adds	r2, #4
 8001100:	7812      	ldrb	r2, [r2, #0]
 8001102:	4313      	orrs	r3, r2
 8001104:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <ETH_MACAddressConfig+0x68>)
 800110a:	4413      	add	r3, r2
 800110c:	461a      	mov	r2, r3
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3303      	adds	r3, #3
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	061a      	lsls	r2, r3, #24
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3302      	adds	r3, #2
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	041b      	lsls	r3, r3, #16
 8001122:	431a      	orrs	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3301      	adds	r3, #1
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	021b      	lsls	r3, r3, #8
 800112c:	4313      	orrs	r3, r2
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	7812      	ldrb	r2, [r2, #0]
 8001132:	4313      	orrs	r3, r2
 8001134:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <ETH_MACAddressConfig+0x6c>)
 800113a:	4413      	add	r3, r2
 800113c:	461a      	mov	r2, r3
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	6013      	str	r3, [r2, #0]
}
 8001142:	bf00      	nop
 8001144:	371c      	adds	r7, #28
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40028040 	.word	0x40028040
 8001154:	40028044 	.word	0x40028044

08001158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001158:	b480      	push	{r7}
 800115a:	b089      	sub	sp, #36	; 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
 8001172:	e177      	b.n	8001464 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001174:	2201      	movs	r2, #1
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	429a      	cmp	r2, r3
 800118e:	f040 8166 	bne.w	800145e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b02      	cmp	r3, #2
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x4a>
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b12      	cmp	r3, #18
 80011a0:	d123      	bne.n	80011ea <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	08da      	lsrs	r2, r3, #3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3208      	adds	r2, #8
 80011aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	220f      	movs	r2, #15
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	691a      	ldr	r2, [r3, #16]
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	f003 0307 	and.w	r3, r3, #7
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	08da      	lsrs	r2, r3, #3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3208      	adds	r2, #8
 80011e4:	69b9      	ldr	r1, [r7, #24]
 80011e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	2203      	movs	r2, #3
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0203 	and.w	r2, r3, #3
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d00b      	beq.n	800123e <HAL_GPIO_Init+0xe6>
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b02      	cmp	r3, #2
 800122c:	d007      	beq.n	800123e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001232:	2b11      	cmp	r3, #17
 8001234:	d003      	beq.n	800123e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b12      	cmp	r3, #18
 800123c:	d130      	bne.n	80012a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	2203      	movs	r2, #3
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001274:	2201      	movs	r2, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	091b      	lsrs	r3, r3, #4
 800128a:	f003 0201 	and.w	r2, r3, #1
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	2203      	movs	r2, #3
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80c0 	beq.w	800145e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	4b65      	ldr	r3, [pc, #404]	; (8001478 <HAL_GPIO_Init+0x320>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	4a64      	ldr	r2, [pc, #400]	; (8001478 <HAL_GPIO_Init+0x320>)
 80012e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ec:	6453      	str	r3, [r2, #68]	; 0x44
 80012ee:	4b62      	ldr	r3, [pc, #392]	; (8001478 <HAL_GPIO_Init+0x320>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012fa:	4a60      	ldr	r2, [pc, #384]	; (800147c <HAL_GPIO_Init+0x324>)
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	089b      	lsrs	r3, r3, #2
 8001300:	3302      	adds	r3, #2
 8001302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	220f      	movs	r2, #15
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a57      	ldr	r2, [pc, #348]	; (8001480 <HAL_GPIO_Init+0x328>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d037      	beq.n	8001396 <HAL_GPIO_Init+0x23e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a56      	ldr	r2, [pc, #344]	; (8001484 <HAL_GPIO_Init+0x32c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d031      	beq.n	8001392 <HAL_GPIO_Init+0x23a>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a55      	ldr	r2, [pc, #340]	; (8001488 <HAL_GPIO_Init+0x330>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d02b      	beq.n	800138e <HAL_GPIO_Init+0x236>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a54      	ldr	r2, [pc, #336]	; (800148c <HAL_GPIO_Init+0x334>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d025      	beq.n	800138a <HAL_GPIO_Init+0x232>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a53      	ldr	r2, [pc, #332]	; (8001490 <HAL_GPIO_Init+0x338>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d01f      	beq.n	8001386 <HAL_GPIO_Init+0x22e>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a52      	ldr	r2, [pc, #328]	; (8001494 <HAL_GPIO_Init+0x33c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d019      	beq.n	8001382 <HAL_GPIO_Init+0x22a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a51      	ldr	r2, [pc, #324]	; (8001498 <HAL_GPIO_Init+0x340>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d013      	beq.n	800137e <HAL_GPIO_Init+0x226>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a50      	ldr	r2, [pc, #320]	; (800149c <HAL_GPIO_Init+0x344>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d00d      	beq.n	800137a <HAL_GPIO_Init+0x222>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a4f      	ldr	r2, [pc, #316]	; (80014a0 <HAL_GPIO_Init+0x348>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d007      	beq.n	8001376 <HAL_GPIO_Init+0x21e>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4e      	ldr	r2, [pc, #312]	; (80014a4 <HAL_GPIO_Init+0x34c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d101      	bne.n	8001372 <HAL_GPIO_Init+0x21a>
 800136e:	2309      	movs	r3, #9
 8001370:	e012      	b.n	8001398 <HAL_GPIO_Init+0x240>
 8001372:	230a      	movs	r3, #10
 8001374:	e010      	b.n	8001398 <HAL_GPIO_Init+0x240>
 8001376:	2308      	movs	r3, #8
 8001378:	e00e      	b.n	8001398 <HAL_GPIO_Init+0x240>
 800137a:	2307      	movs	r3, #7
 800137c:	e00c      	b.n	8001398 <HAL_GPIO_Init+0x240>
 800137e:	2306      	movs	r3, #6
 8001380:	e00a      	b.n	8001398 <HAL_GPIO_Init+0x240>
 8001382:	2305      	movs	r3, #5
 8001384:	e008      	b.n	8001398 <HAL_GPIO_Init+0x240>
 8001386:	2304      	movs	r3, #4
 8001388:	e006      	b.n	8001398 <HAL_GPIO_Init+0x240>
 800138a:	2303      	movs	r3, #3
 800138c:	e004      	b.n	8001398 <HAL_GPIO_Init+0x240>
 800138e:	2302      	movs	r3, #2
 8001390:	e002      	b.n	8001398 <HAL_GPIO_Init+0x240>
 8001392:	2301      	movs	r3, #1
 8001394:	e000      	b.n	8001398 <HAL_GPIO_Init+0x240>
 8001396:	2300      	movs	r3, #0
 8001398:	69fa      	ldr	r2, [r7, #28]
 800139a:	f002 0203 	and.w	r2, r2, #3
 800139e:	0092      	lsls	r2, r2, #2
 80013a0:	4093      	lsls	r3, r2
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a8:	4934      	ldr	r1, [pc, #208]	; (800147c <HAL_GPIO_Init+0x324>)
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	089b      	lsrs	r3, r3, #2
 80013ae:	3302      	adds	r3, #2
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013b6:	4b3c      	ldr	r3, [pc, #240]	; (80014a8 <HAL_GPIO_Init+0x350>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013da:	4a33      	ldr	r2, [pc, #204]	; (80014a8 <HAL_GPIO_Init+0x350>)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013e0:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <HAL_GPIO_Init+0x350>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001404:	4a28      	ldr	r2, [pc, #160]	; (80014a8 <HAL_GPIO_Init+0x350>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800140a:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <HAL_GPIO_Init+0x350>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800142e:	4a1e      	ldr	r2, [pc, #120]	; (80014a8 <HAL_GPIO_Init+0x350>)
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001434:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <HAL_GPIO_Init+0x350>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001458:	4a13      	ldr	r2, [pc, #76]	; (80014a8 <HAL_GPIO_Init+0x350>)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3301      	adds	r3, #1
 8001462:	61fb      	str	r3, [r7, #28]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	2b0f      	cmp	r3, #15
 8001468:	f67f ae84 	bls.w	8001174 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800146c:	bf00      	nop
 800146e:	3724      	adds	r7, #36	; 0x24
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	40023800 	.word	0x40023800
 800147c:	40013800 	.word	0x40013800
 8001480:	40020000 	.word	0x40020000
 8001484:	40020400 	.word	0x40020400
 8001488:	40020800 	.word	0x40020800
 800148c:	40020c00 	.word	0x40020c00
 8001490:	40021000 	.word	0x40021000
 8001494:	40021400 	.word	0x40021400
 8001498:	40021800 	.word	0x40021800
 800149c:	40021c00 	.word	0x40021c00
 80014a0:	40022000 	.word	0x40022000
 80014a4:	40022400 	.word	0x40022400
 80014a8:	40013c00 	.word	0x40013c00

080014ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	691a      	ldr	r2, [r3, #16]
 80014bc:	887b      	ldrh	r3, [r7, #2]
 80014be:	4013      	ands	r3, r2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d002      	beq.n	80014ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014c4:	2301      	movs	r3, #1
 80014c6:	73fb      	strb	r3, [r7, #15]
 80014c8:	e001      	b.n	80014ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014ca:	2300      	movs	r3, #0
 80014cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]
 80014e8:	4613      	mov	r3, r2
 80014ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014ec:	787b      	ldrb	r3, [r7, #1]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014f2:	887a      	ldrh	r2, [r7, #2]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014f8:	e003      	b.n	8001502 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014fa:	887b      	ldrh	r3, [r7, #2]
 80014fc:	041a      	lsls	r2, r3, #16
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	619a      	str	r2, [r3, #24]
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800150e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001510:	b08f      	sub	sp, #60	; 0x3c
 8001512:	af0a      	add	r7, sp, #40	; 0x28
 8001514:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e10f      	b.n	8001740 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d106      	bne.n	8001540 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f005 fb38 	bl	8006bb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2203      	movs	r2, #3
 8001544:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800154c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001550:	2b00      	cmp	r3, #0
 8001552:	d102      	bne.n	800155a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f002 fb21 	bl	8003ba6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	687e      	ldr	r6, [r7, #4]
 800156c:	466d      	mov	r5, sp
 800156e:	f106 0410 	add.w	r4, r6, #16
 8001572:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001574:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001576:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001578:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800157a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800157e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001582:	1d33      	adds	r3, r6, #4
 8001584:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001586:	6838      	ldr	r0, [r7, #0]
 8001588:	f002 f9f8 	bl	800397c <USB_CoreInit>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d005      	beq.n	800159e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2202      	movs	r2, #2
 8001596:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e0d0      	b.n	8001740 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2100      	movs	r1, #0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f002 fb0f 	bl	8003bc8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015aa:	2300      	movs	r3, #0
 80015ac:	73fb      	strb	r3, [r7, #15]
 80015ae:	e04a      	b.n	8001646 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015b0:	7bfa      	ldrb	r2, [r7, #15]
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	1a9b      	subs	r3, r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	333d      	adds	r3, #61	; 0x3d
 80015c0:	2201      	movs	r2, #1
 80015c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015c4:	7bfa      	ldrb	r2, [r7, #15]
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	4613      	mov	r3, r2
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	1a9b      	subs	r3, r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	333c      	adds	r3, #60	; 0x3c
 80015d4:	7bfa      	ldrb	r2, [r7, #15]
 80015d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015d8:	7bfa      	ldrb	r2, [r7, #15]
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	b298      	uxth	r0, r3
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	1a9b      	subs	r3, r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	3342      	adds	r3, #66	; 0x42
 80015ec:	4602      	mov	r2, r0
 80015ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015f0:	7bfa      	ldrb	r2, [r7, #15]
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	1a9b      	subs	r3, r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	333f      	adds	r3, #63	; 0x3f
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	1a9b      	subs	r3, r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	3344      	adds	r3, #68	; 0x44
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001618:	7bfa      	ldrb	r2, [r7, #15]
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	1a9b      	subs	r3, r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	3348      	adds	r3, #72	; 0x48
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800162c:	7bfa      	ldrb	r2, [r7, #15]
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	4613      	mov	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	1a9b      	subs	r3, r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	3350      	adds	r3, #80	; 0x50
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	3301      	adds	r3, #1
 8001644:	73fb      	strb	r3, [r7, #15]
 8001646:	7bfa      	ldrb	r2, [r7, #15]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	429a      	cmp	r2, r3
 800164e:	d3af      	bcc.n	80015b0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001650:	2300      	movs	r3, #0
 8001652:	73fb      	strb	r3, [r7, #15]
 8001654:	e044      	b.n	80016e0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001656:	7bfa      	ldrb	r2, [r7, #15]
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	4613      	mov	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	1a9b      	subs	r3, r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800166c:	7bfa      	ldrb	r2, [r7, #15]
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	1a9b      	subs	r3, r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800167e:	7bfa      	ldrb	r2, [r7, #15]
 8001680:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001682:	7bfa      	ldrb	r2, [r7, #15]
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	1a9b      	subs	r3, r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001698:	7bfa      	ldrb	r2, [r7, #15]
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	1a9b      	subs	r3, r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016ae:	7bfa      	ldrb	r2, [r7, #15]
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	1a9b      	subs	r3, r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016c4:	7bfa      	ldrb	r2, [r7, #15]
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	4613      	mov	r3, r2
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	1a9b      	subs	r3, r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	3301      	adds	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
 80016e0:	7bfa      	ldrb	r2, [r7, #15]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d3b5      	bcc.n	8001656 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	687e      	ldr	r6, [r7, #4]
 80016f2:	466d      	mov	r5, sp
 80016f4:	f106 0410 	add.w	r4, r6, #16
 80016f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001700:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001704:	e885 0003 	stmia.w	r5, {r0, r1}
 8001708:	1d33      	adds	r3, r6, #4
 800170a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800170c:	6838      	ldr	r0, [r7, #0]
 800170e:	f002 fa85 	bl	8003c1c <USB_DevInit>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d005      	beq.n	8001724 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2202      	movs	r2, #2
 800171c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e00d      	b.n	8001740 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f003 fa7a 	bl	8004c32 <USB_DevDisconnect>

  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001748 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800175c:	2b01      	cmp	r3, #1
 800175e:	d101      	bne.n	8001764 <HAL_PCD_Start+0x1c>
 8001760:	2302      	movs	r3, #2
 8001762:	e020      	b.n	80017a6 <HAL_PCD_Start+0x5e>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001770:	2b01      	cmp	r3, #1
 8001772:	d109      	bne.n	8001788 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001778:	2b01      	cmp	r3, #1
 800177a:	d005      	beq.n	8001788 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001780:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f003 fa38 	bl	8004c02 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f002 f9f4 	bl	8003b84 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017ae:	b590      	push	{r4, r7, lr}
 80017b0:	b08d      	sub	sp, #52	; 0x34
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017bc:	6a3b      	ldr	r3, [r7, #32]
 80017be:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f003 fadf 	bl	8004d88 <USB_GetMode>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f040 838e 	bne.w	8001eee <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f003 fa43 	bl	8004c62 <USB_ReadInterrupts>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 8384 	beq.w	8001eec <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f003 fa3a 	bl	8004c62 <USB_ReadInterrupts>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d107      	bne.n	8001808 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	695a      	ldr	r2, [r3, #20]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f002 0202 	and.w	r2, r2, #2
 8001806:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f003 fa28 	bl	8004c62 <USB_ReadInterrupts>
 8001812:	4603      	mov	r3, r0
 8001814:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001818:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800181c:	d17b      	bne.n	8001916 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 800181e:	2300      	movs	r3, #0
 8001820:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f003 fa2e 	bl	8004c88 <USB_ReadDevAllOutEpInterrupt>
 800182c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800182e:	e06f      	b.n	8001910 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d064      	beq.n	8001904 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f003 fa53 	bl	8004cf0 <USB_ReadDevOutEPInterrupt>
 800184a:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00c      	beq.n	8001870 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	015a      	lsls	r2, r3, #5
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	4413      	add	r3, r2
 800185e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001862:	461a      	mov	r2, r3
 8001864:	2301      	movs	r3, #1
 8001866:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001868:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 fdf6 	bl	800245c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00c      	beq.n	8001894 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800187a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 fef5 	bl	800266c <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	015a      	lsls	r2, r3, #5
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	4413      	add	r3, r2
 800188a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800188e:	461a      	mov	r2, r3
 8001890:	2308      	movs	r3, #8
 8001892:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	2b00      	cmp	r3, #0
 800189c:	d008      	beq.n	80018b0 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	015a      	lsls	r2, r3, #5
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	4413      	add	r3, r2
 80018a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018aa:	461a      	mov	r2, r3
 80018ac:	2310      	movs	r3, #16
 80018ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	f003 0320 	and.w	r3, r3, #32
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d015      	beq.n	80018e6 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d108      	bne.n	80018d4 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6818      	ldr	r0, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80018cc:	461a      	mov	r2, r3
 80018ce:	2101      	movs	r1, #1
 80018d0:	f003 fa9e 	bl	8004e10 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	015a      	lsls	r2, r3, #5
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	4413      	add	r3, r2
 80018dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018e0:	461a      	mov	r2, r3
 80018e2:	2320      	movs	r3, #32
 80018e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d009      	beq.n	8001904 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	015a      	lsls	r2, r3, #5
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	4413      	add	r3, r2
 80018f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018fc:	461a      	mov	r2, r3
 80018fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001902:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	3301      	adds	r3, #1
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800190a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800190c:	085b      	lsrs	r3, r3, #1
 800190e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001912:	2b00      	cmp	r3, #0
 8001914:	d18c      	bne.n	8001830 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f003 f9a1 	bl	8004c62 <USB_ReadInterrupts>
 8001920:	4603      	mov	r3, r0
 8001922:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001926:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800192a:	f040 80c4 	bne.w	8001ab6 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f003 f9c2 	bl	8004cbc <USB_ReadDevAllInEpInterrupt>
 8001938:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800193a:	2300      	movs	r3, #0
 800193c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800193e:	e0b6      	b.n	8001aae <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 80ab 	beq.w	8001aa2 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	4611      	mov	r1, r2
 8001956:	4618      	mov	r0, r3
 8001958:	f003 f9e8 	bl	8004d2c <USB_ReadDevInEPInterrupt>
 800195c:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b00      	cmp	r3, #0
 8001966:	d05b      	beq.n	8001a20 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	2201      	movs	r2, #1
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800197c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	43db      	mvns	r3, r3
 8001982:	69f9      	ldr	r1, [r7, #28]
 8001984:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001988:	4013      	ands	r3, r2
 800198a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	015a      	lsls	r2, r3, #5
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	4413      	add	r3, r2
 8001994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001998:	461a      	mov	r2, r3
 800199a:	2301      	movs	r3, #1
 800199c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d11b      	bne.n	80019de <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019aa:	4613      	mov	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	1a9b      	subs	r3, r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	440b      	add	r3, r1
 80019b4:	3348      	adds	r3, #72	; 0x48
 80019b6:	6819      	ldr	r1, [r3, #0]
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019bc:	4613      	mov	r3, r2
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4403      	add	r3, r0
 80019c6:	3344      	adds	r3, #68	; 0x44
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4419      	add	r1, r3
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d0:	4613      	mov	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	1a9b      	subs	r3, r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4403      	add	r3, r0
 80019da:	3348      	adds	r3, #72	; 0x48
 80019dc:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	4619      	mov	r1, r3
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f005 f972 	bl	8006cce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d116      	bne.n	8001a20 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d113      	bne.n	8001a20 <HAL_PCD_IRQHandler+0x272>
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019fc:	4613      	mov	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	1a9b      	subs	r3, r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	3350      	adds	r3, #80	; 0x50
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d108      	bne.n	8001a20 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6818      	ldr	r0, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001a18:	461a      	mov	r2, r3
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	f003 f9f8 	bl	8004e10 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d008      	beq.n	8001a3c <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	015a      	lsls	r2, r3, #5
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	4413      	add	r3, r2
 8001a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a36:	461a      	mov	r2, r3
 8001a38:	2308      	movs	r3, #8
 8001a3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	f003 0310 	and.w	r3, r3, #16
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d008      	beq.n	8001a58 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	015a      	lsls	r2, r3, #5
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a52:	461a      	mov	r2, r3
 8001a54:	2310      	movs	r3, #16
 8001a56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d008      	beq.n	8001a74 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	015a      	lsls	r2, r3, #5
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	4413      	add	r3, r2
 8001a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a6e:	461a      	mov	r2, r3
 8001a70:	2340      	movs	r3, #64	; 0x40
 8001a72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d008      	beq.n	8001a90 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	015a      	lsls	r2, r3, #5
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	4413      	add	r3, r2
 8001a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001a9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 fc4f 	bl	8002340 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aaa:	085b      	lsrs	r3, r3, #1
 8001aac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f47f af45 	bne.w	8001940 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f003 f8d1 	bl	8004c62 <USB_ReadInterrupts>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ac6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001aca:	d122      	bne.n	8001b12 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	69fa      	ldr	r2, [r7, #28]
 8001ad6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ada:	f023 0301 	bic.w	r3, r3, #1
 8001ade:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d108      	bne.n	8001afc <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001af2:	2100      	movs	r1, #0
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 fe71 	bl	80027dc <HAL_PCDEx_LPM_Callback>
 8001afa:	e002      	b.n	8001b02 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f005 f95d 	bl	8006dbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	695a      	ldr	r2, [r3, #20]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001b10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f003 f8a3 	bl	8004c62 <USB_ReadInterrupts>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b26:	d112      	bne.n	8001b4e <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d102      	bne.n	8001b3e <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f005 f919 	bl	8006d70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	695a      	ldr	r2, [r3, #20]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001b4c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f003 f885 	bl	8004c62 <USB_ReadInterrupts>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b62:	f040 80a7 	bne.w	8001cb4 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	69fa      	ldr	r2, [r7, #28]
 8001b70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b74:	f023 0301 	bic.w	r3, r3, #1
 8001b78:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2110      	movs	r1, #16
 8001b80:	4618      	mov	r0, r3
 8001b82:	f002 f9bd 	bl	8003f00 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b86:	2300      	movs	r3, #0
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b8a:	e036      	b.n	8001bfa <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b8e:	015a      	lsls	r2, r3, #5
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	4413      	add	r3, r2
 8001b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b98:	461a      	mov	r2, r3
 8001b9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b9e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba2:	015a      	lsls	r2, r3, #5
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bb0:	0151      	lsls	r1, r2, #5
 8001bb2:	69fa      	ldr	r2, [r7, #28]
 8001bb4:	440a      	add	r2, r1
 8001bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001bba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001bbe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc2:	015a      	lsls	r2, r3, #5
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bcc:	461a      	mov	r2, r3
 8001bce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001bd2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd6:	015a      	lsls	r2, r3, #5
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	4413      	add	r3, r2
 8001bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001be4:	0151      	lsls	r1, r2, #5
 8001be6:	69fa      	ldr	r2, [r7, #28]
 8001be8:	440a      	add	r2, r1
 8001bea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001bee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001bf2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d3c3      	bcc.n	8001b8c <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	69fa      	ldr	r2, [r7, #28]
 8001c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c12:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c16:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d016      	beq.n	8001c4e <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c2a:	69fa      	ldr	r2, [r7, #28]
 8001c2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c30:	f043 030b 	orr.w	r3, r3, #11
 8001c34:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c40:	69fa      	ldr	r2, [r7, #28]
 8001c42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c46:	f043 030b 	orr.w	r3, r3, #11
 8001c4a:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4c:	e015      	b.n	8001c7a <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	69fa      	ldr	r2, [r7, #28]
 8001c58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c60:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001c64:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	69fa      	ldr	r2, [r7, #28]
 8001c70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c74:	f043 030b 	orr.w	r3, r3, #11
 8001c78:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	69fa      	ldr	r2, [r7, #28]
 8001c84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c88:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c8c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6818      	ldr	r0, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	f003 f8b6 	bl	8004e10 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	695a      	ldr	r2, [r3, #20]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001cb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f002 ffd2 	bl	8004c62 <USB_ReadInterrupts>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cc8:	d124      	bne.n	8001d14 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f003 f868 	bl	8004da4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f002 f972 	bl	8003fc2 <USB_GetDevSpeed>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681c      	ldr	r4, [r3, #0]
 8001cea:	f001 f97f 	bl	8002fec <HAL_RCC_GetHCLKFreq>
 8001cee:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	f001 fea1 	bl	8003a40 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f005 f80d 	bl	8006d1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	695a      	ldr	r2, [r3, #20]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d12:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f002 ffa2 	bl	8004c62 <USB_ReadInterrupts>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	f003 0310 	and.w	r3, r3, #16
 8001d24:	2b10      	cmp	r3, #16
 8001d26:	d161      	bne.n	8001dec <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	699a      	ldr	r2, [r3, #24]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 0210 	bic.w	r2, r2, #16
 8001d36:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001d38:	6a3b      	ldr	r3, [r7, #32]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	f003 020f 	and.w	r2, r3, #15
 8001d44:	4613      	mov	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	1a9b      	subs	r3, r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	4413      	add	r3, r2
 8001d54:	3304      	adds	r3, #4
 8001d56:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	0c5b      	lsrs	r3, r3, #17
 8001d5c:	f003 030f 	and.w	r3, r3, #15
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d124      	bne.n	8001dae <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d035      	beq.n	8001ddc <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	091b      	lsrs	r3, r3, #4
 8001d78:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	461a      	mov	r2, r3
 8001d82:	6a38      	ldr	r0, [r7, #32]
 8001d84:	f002 fe1a 	bl	80049bc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	68da      	ldr	r2, [r3, #12]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	091b      	lsrs	r3, r3, #4
 8001d90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d94:	441a      	add	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	699a      	ldr	r2, [r3, #24]
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	091b      	lsrs	r3, r3, #4
 8001da2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001da6:	441a      	add	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	619a      	str	r2, [r3, #24]
 8001dac:	e016      	b.n	8001ddc <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	0c5b      	lsrs	r3, r3, #17
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d110      	bne.n	8001ddc <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001dc0:	2208      	movs	r2, #8
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	6a38      	ldr	r0, [r7, #32]
 8001dc6:	f002 fdf9 	bl	80049bc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	699a      	ldr	r2, [r3, #24]
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	091b      	lsrs	r3, r3, #4
 8001dd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dd6:	441a      	add	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	699a      	ldr	r2, [r3, #24]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0210 	orr.w	r2, r2, #16
 8001dea:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f002 ff36 	bl	8004c62 <USB_ReadInterrupts>
 8001df6:	4603      	mov	r3, r0
 8001df8:	f003 0308 	and.w	r3, r3, #8
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d10a      	bne.n	8001e16 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f004 ff7e 	bl	8006d02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	695a      	ldr	r2, [r3, #20]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f002 0208 	and.w	r2, r2, #8
 8001e14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f002 ff21 	bl	8004c62 <USB_ReadInterrupts>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e2a:	d10f      	bne.n	8001e4c <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	4619      	mov	r1, r3
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f004 ffe0 	bl	8006dfc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	695a      	ldr	r2, [r3, #20]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001e4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f002 ff06 	bl	8004c62 <USB_ReadInterrupts>
 8001e56:	4603      	mov	r3, r0
 8001e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e60:	d10f      	bne.n	8001e82 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f004 ffb3 	bl	8006dd8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	695a      	ldr	r2, [r3, #20]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001e80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f002 feeb 	bl	8004c62 <USB_ReadInterrupts>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e96:	d10a      	bne.n	8001eae <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f004 ffc1 	bl	8006e20 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	695a      	ldr	r2, [r3, #20]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001eac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f002 fed5 	bl	8004c62 <USB_ReadInterrupts>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d115      	bne.n	8001eee <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d002      	beq.n	8001eda <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f004 ffb1 	bl	8006e3c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6859      	ldr	r1, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	e000      	b.n	8001eee <HAL_PCD_IRQHandler+0x740>
      return;
 8001eec:	bf00      	nop
    }
  }
}
 8001eee:	3734      	adds	r7, #52	; 0x34
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd90      	pop	{r4, r7, pc}

08001ef4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d101      	bne.n	8001f0e <HAL_PCD_SetAddress+0x1a>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e013      	b.n	8001f36 <HAL_PCD_SetAddress+0x42>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	78fa      	ldrb	r2, [r7, #3]
 8001f1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	78fa      	ldrb	r2, [r7, #3]
 8001f24:	4611      	mov	r1, r2
 8001f26:	4618      	mov	r0, r3
 8001f28:	f002 fe45 	bl	8004bb6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b084      	sub	sp, #16
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	4608      	mov	r0, r1
 8001f48:	4611      	mov	r1, r2
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	70fb      	strb	r3, [r7, #3]
 8001f50:	460b      	mov	r3, r1
 8001f52:	803b      	strh	r3, [r7, #0]
 8001f54:	4613      	mov	r3, r2
 8001f56:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	da0f      	bge.n	8001f84 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	f003 020f 	and.w	r2, r3, #15
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	1a9b      	subs	r3, r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	3338      	adds	r3, #56	; 0x38
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	4413      	add	r3, r2
 8001f78:	3304      	adds	r3, #4
 8001f7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	705a      	strb	r2, [r3, #1]
 8001f82:	e00f      	b.n	8001fa4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	f003 020f 	and.w	r2, r3, #15
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	1a9b      	subs	r3, r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001fb0:	883a      	ldrh	r2, [r7, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	78ba      	ldrb	r2, [r7, #2]
 8001fba:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	785b      	ldrb	r3, [r3, #1]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d004      	beq.n	8001fce <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001fce:	78bb      	ldrb	r3, [r7, #2]
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d102      	bne.n	8001fda <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <HAL_PCD_EP_Open+0xaa>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e00e      	b.n	8002006 <HAL_PCD_EP_Open+0xc8>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68f9      	ldr	r1, [r7, #12]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f002 f808 	bl	800400c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002004:	7afb      	ldrb	r3, [r7, #11]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b084      	sub	sp, #16
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	460b      	mov	r3, r1
 8002018:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800201a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800201e:	2b00      	cmp	r3, #0
 8002020:	da0f      	bge.n	8002042 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002022:	78fb      	ldrb	r3, [r7, #3]
 8002024:	f003 020f 	and.w	r2, r3, #15
 8002028:	4613      	mov	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	1a9b      	subs	r3, r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	3338      	adds	r3, #56	; 0x38
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	3304      	adds	r3, #4
 8002038:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2201      	movs	r2, #1
 800203e:	705a      	strb	r2, [r3, #1]
 8002040:	e00f      	b.n	8002062 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002042:	78fb      	ldrb	r3, [r7, #3]
 8002044:	f003 020f 	and.w	r2, r3, #15
 8002048:	4613      	mov	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	1a9b      	subs	r3, r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	4413      	add	r3, r2
 8002058:	3304      	adds	r3, #4
 800205a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002062:	78fb      	ldrb	r3, [r7, #3]
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	b2da      	uxtb	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_PCD_EP_Close+0x6e>
 8002078:	2302      	movs	r3, #2
 800207a:	e00e      	b.n	800209a <HAL_PCD_EP_Close+0x8c>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68f9      	ldr	r1, [r7, #12]
 800208a:	4618      	mov	r0, r3
 800208c:	f002 f846 	bl	800411c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b086      	sub	sp, #24
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	60f8      	str	r0, [r7, #12]
 80020aa:	607a      	str	r2, [r7, #4]
 80020ac:	603b      	str	r3, [r7, #0]
 80020ae:	460b      	mov	r3, r1
 80020b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020b2:	7afb      	ldrb	r3, [r7, #11]
 80020b4:	f003 020f 	and.w	r2, r3, #15
 80020b8:	4613      	mov	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	1a9b      	subs	r3, r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4413      	add	r3, r2
 80020c8:	3304      	adds	r3, #4
 80020ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	2200      	movs	r2, #0
 80020dc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	2200      	movs	r2, #0
 80020e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020e4:	7afb      	ldrb	r3, [r7, #11]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d102      	bne.n	80020fe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020fe:	7afb      	ldrb	r3, [r7, #11]
 8002100:	f003 030f 	and.w	r3, r3, #15
 8002104:	2b00      	cmp	r3, #0
 8002106:	d109      	bne.n	800211c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	b2db      	uxtb	r3, r3
 8002112:	461a      	mov	r2, r3
 8002114:	6979      	ldr	r1, [r7, #20]
 8002116:	f002 fac9 	bl	80046ac <USB_EP0StartXfer>
 800211a:	e008      	b.n	800212e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	b2db      	uxtb	r3, r3
 8002126:	461a      	mov	r2, r3
 8002128:	6979      	ldr	r1, [r7, #20]
 800212a:	f002 f87b 	bl	8004224 <USB_EPStartXfer>
  }

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	607a      	str	r2, [r7, #4]
 8002142:	603b      	str	r3, [r7, #0]
 8002144:	460b      	mov	r3, r1
 8002146:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002148:	7afb      	ldrb	r3, [r7, #11]
 800214a:	f003 020f 	and.w	r2, r3, #15
 800214e:	4613      	mov	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	1a9b      	subs	r3, r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	3338      	adds	r3, #56	; 0x38
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	4413      	add	r3, r2
 800215c:	3304      	adds	r3, #4
 800215e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	2200      	movs	r2, #0
 8002170:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	2201      	movs	r2, #1
 8002176:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002178:	7afb      	ldrb	r3, [r7, #11]
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	b2da      	uxtb	r2, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d102      	bne.n	8002192 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002192:	7afb      	ldrb	r3, [r7, #11]
 8002194:	f003 030f 	and.w	r3, r3, #15
 8002198:	2b00      	cmp	r3, #0
 800219a:	d109      	bne.n	80021b0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6818      	ldr	r0, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	461a      	mov	r2, r3
 80021a8:	6979      	ldr	r1, [r7, #20]
 80021aa:	f002 fa7f 	bl	80046ac <USB_EP0StartXfer>
 80021ae:	e008      	b.n	80021c2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6818      	ldr	r0, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	461a      	mov	r2, r3
 80021bc:	6979      	ldr	r1, [r7, #20]
 80021be:	f002 f831 	bl	8004224 <USB_EPStartXfer>
  }

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	f003 020f 	and.w	r2, r3, #15
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d901      	bls.n	80021ea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e050      	b.n	800228c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	da0f      	bge.n	8002212 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021f2:	78fb      	ldrb	r3, [r7, #3]
 80021f4:	f003 020f 	and.w	r2, r3, #15
 80021f8:	4613      	mov	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	1a9b      	subs	r3, r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	3338      	adds	r3, #56	; 0x38
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	3304      	adds	r3, #4
 8002208:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2201      	movs	r2, #1
 800220e:	705a      	strb	r2, [r3, #1]
 8002210:	e00d      	b.n	800222e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002212:	78fa      	ldrb	r2, [r7, #3]
 8002214:	4613      	mov	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	1a9b      	subs	r3, r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	4413      	add	r3, r2
 8002224:	3304      	adds	r3, #4
 8002226:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2201      	movs	r2, #1
 8002232:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002234:	78fb      	ldrb	r3, [r7, #3]
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	b2da      	uxtb	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002246:	2b01      	cmp	r3, #1
 8002248:	d101      	bne.n	800224e <HAL_PCD_EP_SetStall+0x82>
 800224a:	2302      	movs	r3, #2
 800224c:	e01e      	b.n	800228c <HAL_PCD_EP_SetStall+0xc0>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68f9      	ldr	r1, [r7, #12]
 800225c:	4618      	mov	r0, r3
 800225e:	f002 fbd6 	bl	8004a0e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10a      	bne.n	8002282 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	b2d9      	uxtb	r1, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800227c:	461a      	mov	r2, r3
 800227e:	f002 fdc7 	bl	8004e10 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	f003 020f 	and.w	r2, r3, #15
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d901      	bls.n	80022b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e042      	b.n	8002338 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	da0f      	bge.n	80022da <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022ba:	78fb      	ldrb	r3, [r7, #3]
 80022bc:	f003 020f 	and.w	r2, r3, #15
 80022c0:	4613      	mov	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	1a9b      	subs	r3, r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	3338      	adds	r3, #56	; 0x38
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	3304      	adds	r3, #4
 80022d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2201      	movs	r2, #1
 80022d6:	705a      	strb	r2, [r3, #1]
 80022d8:	e00f      	b.n	80022fa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022da:	78fb      	ldrb	r3, [r7, #3]
 80022dc:	f003 020f 	and.w	r2, r3, #15
 80022e0:	4613      	mov	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	1a9b      	subs	r3, r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	4413      	add	r3, r2
 80022f0:	3304      	adds	r3, #4
 80022f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	b2da      	uxtb	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002312:	2b01      	cmp	r3, #1
 8002314:	d101      	bne.n	800231a <HAL_PCD_EP_ClrStall+0x86>
 8002316:	2302      	movs	r3, #2
 8002318:	e00e      	b.n	8002338 <HAL_PCD_EP_ClrStall+0xa4>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68f9      	ldr	r1, [r7, #12]
 8002328:	4618      	mov	r0, r3
 800232a:	f002 fbde 	bl	8004aea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08a      	sub	sp, #40	; 0x28
 8002344:	af02      	add	r7, sp, #8
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	4613      	mov	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	1a9b      	subs	r3, r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	3338      	adds	r3, #56	; 0x38
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	4413      	add	r3, r2
 8002364:	3304      	adds	r3, #4
 8002366:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	699a      	ldr	r2, [r3, #24]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	429a      	cmp	r2, r3
 8002372:	d901      	bls.n	8002378 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e06c      	b.n	8002452 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	695a      	ldr	r2, [r3, #20]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	69fa      	ldr	r2, [r7, #28]
 800238a:	429a      	cmp	r2, r3
 800238c:	d902      	bls.n	8002394 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	3303      	adds	r3, #3
 8002398:	089b      	lsrs	r3, r3, #2
 800239a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800239c:	e02b      	b.n	80023f6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	695a      	ldr	r2, [r3, #20]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	69fa      	ldr	r2, [r7, #28]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d902      	bls.n	80023ba <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3303      	adds	r3, #3
 80023be:	089b      	lsrs	r3, r3, #2
 80023c0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	68d9      	ldr	r1, [r3, #12]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	4603      	mov	r3, r0
 80023d8:	6978      	ldr	r0, [r7, #20]
 80023da:	f002 faba 	bl	8004952 <USB_WritePacket>

    ep->xfer_buff  += len;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	441a      	add	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	699a      	ldr	r2, [r3, #24]
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	441a      	add	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	015a      	lsls	r2, r3, #5
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	b29b      	uxth	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	429a      	cmp	r2, r3
 800240a:	d809      	bhi.n	8002420 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	699a      	ldr	r2, [r3, #24]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002414:	429a      	cmp	r2, r3
 8002416:	d203      	bcs.n	8002420 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1be      	bne.n	800239e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	429a      	cmp	r2, r3
 800242a:	d811      	bhi.n	8002450 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	2201      	movs	r2, #1
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	43db      	mvns	r3, r3
 8002446:	6939      	ldr	r1, [r7, #16]
 8002448:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800244c:	4013      	ands	r3, r2
 800244e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3720      	adds	r7, #32
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	333c      	adds	r3, #60	; 0x3c
 8002474:	3304      	adds	r3, #4
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	015a      	lsls	r2, r3, #5
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4413      	add	r3, r2
 8002482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	2b01      	cmp	r3, #1
 8002490:	f040 80b3 	bne.w	80025fa <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d028      	beq.n	80024f0 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4a70      	ldr	r2, [pc, #448]	; (8002664 <PCD_EP_OutXfrComplete_int+0x208>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d90e      	bls.n	80024c4 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d009      	beq.n	80024c4 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	015a      	lsls	r2, r3, #5
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024bc:	461a      	mov	r2, r3
 80024be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024c2:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f004 fbd5 	bl	8006c74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6818      	ldr	r0, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024d4:	461a      	mov	r2, r3
 80024d6:	2101      	movs	r1, #1
 80024d8:	f002 fc9a 	bl	8004e10 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	015a      	lsls	r2, r3, #5
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024e8:	461a      	mov	r2, r3
 80024ea:	2308      	movs	r3, #8
 80024ec:	6093      	str	r3, [r2, #8]
 80024ee:	e0b3      	b.n	8002658 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f003 0320 	and.w	r3, r3, #32
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d009      	beq.n	800250e <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4413      	add	r3, r2
 8002502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002506:	461a      	mov	r2, r3
 8002508:	2320      	movs	r3, #32
 800250a:	6093      	str	r3, [r2, #8]
 800250c:	e0a4      	b.n	8002658 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002514:	2b00      	cmp	r3, #0
 8002516:	f040 809f 	bne.w	8002658 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4a51      	ldr	r2, [pc, #324]	; (8002664 <PCD_EP_OutXfrComplete_int+0x208>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d90f      	bls.n	8002542 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00a      	beq.n	8002542 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	015a      	lsls	r2, r3, #5
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4413      	add	r3, r2
 8002534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002538:	461a      	mov	r2, r3
 800253a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800253e:	6093      	str	r3, [r2, #8]
 8002540:	e08a      	b.n	8002658 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	4613      	mov	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	1a9b      	subs	r3, r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	440b      	add	r3, r1
 8002550:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002554:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	0159      	lsls	r1, r3, #5
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	440b      	add	r3, r1
 800255e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002568:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	4613      	mov	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	1a9b      	subs	r3, r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4403      	add	r3, r0
 8002578:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800257c:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	4613      	mov	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	1a9b      	subs	r3, r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002590:	6819      	ldr	r1, [r3, #0]
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	4613      	mov	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	1a9b      	subs	r3, r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4403      	add	r3, r0
 80025a0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4419      	add	r1, r3
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	4613      	mov	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	1a9b      	subs	r3, r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4403      	add	r3, r0
 80025b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025ba:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	4619      	mov	r1, r3
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f004 fb68 	bl	8006c98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d144      	bne.n	8002658 <PCD_EP_OutXfrComplete_int+0x1fc>
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	4613      	mov	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	1a9b      	subs	r3, r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d138      	bne.n	8002658 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025f0:	461a      	mov	r2, r3
 80025f2:	2101      	movs	r1, #1
 80025f4:	f002 fc0c 	bl	8004e10 <USB_EP0_OutStart>
 80025f8:	e02e      	b.n	8002658 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4a1a      	ldr	r2, [pc, #104]	; (8002668 <PCD_EP_OutXfrComplete_int+0x20c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d124      	bne.n	800264c <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00a      	beq.n	8002622 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4413      	add	r3, r2
 8002614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002618:	461a      	mov	r2, r3
 800261a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800261e:	6093      	str	r3, [r2, #8]
 8002620:	e01a      	b.n	8002658 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	f003 0320 	and.w	r3, r3, #32
 8002628:	2b00      	cmp	r3, #0
 800262a:	d008      	beq.n	800263e <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	015a      	lsls	r2, r3, #5
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	4413      	add	r3, r2
 8002634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002638:	461a      	mov	r2, r3
 800263a:	2320      	movs	r3, #32
 800263c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	4619      	mov	r1, r3
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f004 fb27 	bl	8006c98 <HAL_PCD_DataOutStageCallback>
 800264a:	e005      	b.n	8002658 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	b2db      	uxtb	r3, r3
 8002650:	4619      	mov	r1, r3
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f004 fb20 	bl	8006c98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	4f54300a 	.word	0x4f54300a
 8002668:	4f54310a 	.word	0x4f54310a

0800266c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	333c      	adds	r3, #60	; 0x3c
 8002684:	3304      	adds	r3, #4
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4413      	add	r3, r2
 8002692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d113      	bne.n	80026ca <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	4a1f      	ldr	r2, [pc, #124]	; (8002724 <PCD_EP_OutSetupPacket_int+0xb8>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d922      	bls.n	80026f0 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d01d      	beq.n	80026f0 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026c0:	461a      	mov	r2, r3
 80026c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026c6:	6093      	str	r3, [r2, #8]
 80026c8:	e012      	b.n	80026f0 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4a16      	ldr	r2, [pc, #88]	; (8002728 <PCD_EP_OutSetupPacket_int+0xbc>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d10e      	bne.n	80026f0 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d009      	beq.n	80026f0 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026e8:	461a      	mov	r2, r3
 80026ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f004 fabf 	bl	8006c74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	4a0a      	ldr	r2, [pc, #40]	; (8002724 <PCD_EP_OutSetupPacket_int+0xb8>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d90c      	bls.n	8002718 <PCD_EP_OutSetupPacket_int+0xac>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d108      	bne.n	8002718 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6818      	ldr	r0, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002710:	461a      	mov	r2, r3
 8002712:	2101      	movs	r1, #1
 8002714:	f002 fb7c 	bl	8004e10 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	4f54300a 	.word	0x4f54300a
 8002728:	4f54310a 	.word	0x4f54310a

0800272c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	70fb      	strb	r3, [r7, #3]
 8002738:	4613      	mov	r3, r2
 800273a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d107      	bne.n	800275a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800274a:	883b      	ldrh	r3, [r7, #0]
 800274c:	0419      	lsls	r1, r3, #16
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	430a      	orrs	r2, r1
 8002756:	629a      	str	r2, [r3, #40]	; 0x28
 8002758:	e028      	b.n	80027ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	0c1b      	lsrs	r3, r3, #16
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	4413      	add	r3, r2
 8002766:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002768:	2300      	movs	r3, #0
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	e00d      	b.n	800278a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	3340      	adds	r3, #64	; 0x40
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	0c1b      	lsrs	r3, r3, #16
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	4413      	add	r3, r2
 8002782:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002784:	7bfb      	ldrb	r3, [r7, #15]
 8002786:	3301      	adds	r3, #1
 8002788:	73fb      	strb	r3, [r7, #15]
 800278a:	7bfa      	ldrb	r2, [r7, #15]
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	3b01      	subs	r3, #1
 8002790:	429a      	cmp	r2, r3
 8002792:	d3ec      	bcc.n	800276e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002794:	883b      	ldrh	r3, [r7, #0]
 8002796:	0418      	lsls	r0, r3, #16
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6819      	ldr	r1, [r3, #0]
 800279c:	78fb      	ldrb	r3, [r7, #3]
 800279e:	3b01      	subs	r3, #1
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	4302      	orrs	r2, r0
 80027a4:	3340      	adds	r3, #64	; 0x40
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	460b      	mov	r3, r1
 80027c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	887a      	ldrh	r2, [r7, #2]
 80027cc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e22d      	b.n	8002c62 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	d075      	beq.n	80028fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002812:	4ba3      	ldr	r3, [pc, #652]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 030c 	and.w	r3, r3, #12
 800281a:	2b04      	cmp	r3, #4
 800281c:	d00c      	beq.n	8002838 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800281e:	4ba0      	ldr	r3, [pc, #640]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002826:	2b08      	cmp	r3, #8
 8002828:	d112      	bne.n	8002850 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800282a:	4b9d      	ldr	r3, [pc, #628]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002832:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002836:	d10b      	bne.n	8002850 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002838:	4b99      	ldr	r3, [pc, #612]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d05b      	beq.n	80028fc <HAL_RCC_OscConfig+0x108>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d157      	bne.n	80028fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e208      	b.n	8002c62 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002858:	d106      	bne.n	8002868 <HAL_RCC_OscConfig+0x74>
 800285a:	4b91      	ldr	r3, [pc, #580]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a90      	ldr	r2, [pc, #576]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	e01d      	b.n	80028a4 <HAL_RCC_OscConfig+0xb0>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002870:	d10c      	bne.n	800288c <HAL_RCC_OscConfig+0x98>
 8002872:	4b8b      	ldr	r3, [pc, #556]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a8a      	ldr	r2, [pc, #552]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	4b88      	ldr	r3, [pc, #544]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a87      	ldr	r2, [pc, #540]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	e00b      	b.n	80028a4 <HAL_RCC_OscConfig+0xb0>
 800288c:	4b84      	ldr	r3, [pc, #528]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a83      	ldr	r2, [pc, #524]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	4b81      	ldr	r3, [pc, #516]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a80      	ldr	r2, [pc, #512]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 800289e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d013      	beq.n	80028d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ac:	f7fd fe84 	bl	80005b8 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028b4:	f7fd fe80 	bl	80005b8 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b64      	cmp	r3, #100	; 0x64
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e1cd      	b.n	8002c62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c6:	4b76      	ldr	r3, [pc, #472]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0xc0>
 80028d2:	e014      	b.n	80028fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d4:	f7fd fe70 	bl	80005b8 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028dc:	f7fd fe6c 	bl	80005b8 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b64      	cmp	r3, #100	; 0x64
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e1b9      	b.n	8002c62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ee:	4b6c      	ldr	r3, [pc, #432]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0xe8>
 80028fa:	e000      	b.n	80028fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d063      	beq.n	80029d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800290a:	4b65      	ldr	r3, [pc, #404]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 030c 	and.w	r3, r3, #12
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00b      	beq.n	800292e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002916:	4b62      	ldr	r3, [pc, #392]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800291e:	2b08      	cmp	r3, #8
 8002920:	d11c      	bne.n	800295c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002922:	4b5f      	ldr	r3, [pc, #380]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d116      	bne.n	800295c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800292e:	4b5c      	ldr	r3, [pc, #368]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d005      	beq.n	8002946 <HAL_RCC_OscConfig+0x152>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d001      	beq.n	8002946 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e18d      	b.n	8002c62 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002946:	4b56      	ldr	r3, [pc, #344]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4952      	ldr	r1, [pc, #328]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002956:	4313      	orrs	r3, r2
 8002958:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295a:	e03a      	b.n	80029d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d020      	beq.n	80029a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002964:	4b4f      	ldr	r3, [pc, #316]	; (8002aa4 <HAL_RCC_OscConfig+0x2b0>)
 8002966:	2201      	movs	r2, #1
 8002968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296a:	f7fd fe25 	bl	80005b8 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002972:	f7fd fe21 	bl	80005b8 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e16e      	b.n	8002c62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002984:	4b46      	ldr	r3, [pc, #280]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0f0      	beq.n	8002972 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002990:	4b43      	ldr	r3, [pc, #268]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	4940      	ldr	r1, [pc, #256]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	600b      	str	r3, [r1, #0]
 80029a4:	e015      	b.n	80029d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029a6:	4b3f      	ldr	r3, [pc, #252]	; (8002aa4 <HAL_RCC_OscConfig+0x2b0>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ac:	f7fd fe04 	bl	80005b8 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029b4:	f7fd fe00 	bl	80005b8 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e14d      	b.n	8002c62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c6:	4b36      	ldr	r3, [pc, #216]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d030      	beq.n	8002a40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d016      	beq.n	8002a14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e6:	4b30      	ldr	r3, [pc, #192]	; (8002aa8 <HAL_RCC_OscConfig+0x2b4>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ec:	f7fd fde4 	bl	80005b8 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029f4:	f7fd fde0 	bl	80005b8 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e12d      	b.n	8002c62 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a06:	4b26      	ldr	r3, [pc, #152]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0x200>
 8002a12:	e015      	b.n	8002a40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a14:	4b24      	ldr	r3, [pc, #144]	; (8002aa8 <HAL_RCC_OscConfig+0x2b4>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1a:	f7fd fdcd 	bl	80005b8 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a22:	f7fd fdc9 	bl	80005b8 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e116      	b.n	8002c62 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a34:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1f0      	bne.n	8002a22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 80a0 	beq.w	8002b8e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a52:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10f      	bne.n	8002a7e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	4a0e      	ldr	r2, [pc, #56]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <HAL_RCC_OscConfig+0x2ac>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7e:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <HAL_RCC_OscConfig+0x2b8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d121      	bne.n	8002ace <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a8a:	4b08      	ldr	r3, [pc, #32]	; (8002aac <HAL_RCC_OscConfig+0x2b8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a07      	ldr	r2, [pc, #28]	; (8002aac <HAL_RCC_OscConfig+0x2b8>)
 8002a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a96:	f7fd fd8f 	bl	80005b8 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9c:	e011      	b.n	8002ac2 <HAL_RCC_OscConfig+0x2ce>
 8002a9e:	bf00      	nop
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	42470000 	.word	0x42470000
 8002aa8:	42470e80 	.word	0x42470e80
 8002aac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab0:	f7fd fd82 	bl	80005b8 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e0cf      	b.n	8002c62 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac2:	4b6a      	ldr	r3, [pc, #424]	; (8002c6c <HAL_RCC_OscConfig+0x478>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d106      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x2f0>
 8002ad6:	4b66      	ldr	r3, [pc, #408]	; (8002c70 <HAL_RCC_OscConfig+0x47c>)
 8002ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ada:	4a65      	ldr	r2, [pc, #404]	; (8002c70 <HAL_RCC_OscConfig+0x47c>)
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae2:	e01c      	b.n	8002b1e <HAL_RCC_OscConfig+0x32a>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b05      	cmp	r3, #5
 8002aea:	d10c      	bne.n	8002b06 <HAL_RCC_OscConfig+0x312>
 8002aec:	4b60      	ldr	r3, [pc, #384]	; (8002c70 <HAL_RCC_OscConfig+0x47c>)
 8002aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af0:	4a5f      	ldr	r2, [pc, #380]	; (8002c70 <HAL_RCC_OscConfig+0x47c>)
 8002af2:	f043 0304 	orr.w	r3, r3, #4
 8002af6:	6713      	str	r3, [r2, #112]	; 0x70
 8002af8:	4b5d      	ldr	r3, [pc, #372]	; (8002c70 <HAL_RCC_OscConfig+0x47c>)
 8002afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afc:	4a5c      	ldr	r2, [pc, #368]	; (8002c70 <HAL_RCC_OscConfig+0x47c>)
 8002afe:	f043 0301 	orr.w	r3, r3, #1
 8002b02:	6713      	str	r3, [r2, #112]	; 0x70
 8002b04:	e00b      	b.n	8002b1e <HAL_RCC_OscConfig+0x32a>
 8002b06:	4b5a      	ldr	r3, [pc, #360]	; (8002c70 <HAL_RCC_OscConfig+0x47c>)
 8002b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0a:	4a59      	ldr	r2, [pc, #356]	; (8002c70 <HAL_RCC_OscConfig+0x47c>)
 8002b0c:	f023 0301 	bic.w	r3, r3, #1
 8002b10:	6713      	str	r3, [r2, #112]	; 0x70
 8002b12:	4b57      	ldr	r3, [pc, #348]	; (8002c70 <HAL_RCC_OscConfig+0x47c>)
 8002b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b16:	4a56      	ldr	r2, [pc, #344]	; (8002c70 <HAL_RCC_OscConfig+0x47c>)
 8002b18:	f023 0304 	bic.w	r3, r3, #4
 8002b1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d015      	beq.n	8002b52 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b26:	f7fd fd47 	bl	80005b8 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2c:	e00a      	b.n	8002b44 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f7fd fd43 	bl	80005b8 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e08e      	b.n	8002c62 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b44:	4b4a      	ldr	r3, [pc, #296]	; (8002c70 <HAL_RCC_OscConfig+0x47c>)
 8002b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0ee      	beq.n	8002b2e <HAL_RCC_OscConfig+0x33a>
 8002b50:	e014      	b.n	8002b7c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b52:	f7fd fd31 	bl	80005b8 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b58:	e00a      	b.n	8002b70 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b5a:	f7fd fd2d 	bl	80005b8 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e078      	b.n	8002c62 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b70:	4b3f      	ldr	r3, [pc, #252]	; (8002c70 <HAL_RCC_OscConfig+0x47c>)
 8002b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1ee      	bne.n	8002b5a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b7c:	7dfb      	ldrb	r3, [r7, #23]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d105      	bne.n	8002b8e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b82:	4b3b      	ldr	r3, [pc, #236]	; (8002c70 <HAL_RCC_OscConfig+0x47c>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	4a3a      	ldr	r2, [pc, #232]	; (8002c70 <HAL_RCC_OscConfig+0x47c>)
 8002b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d064      	beq.n	8002c60 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b96:	4b36      	ldr	r3, [pc, #216]	; (8002c70 <HAL_RCC_OscConfig+0x47c>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 030c 	and.w	r3, r3, #12
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d05c      	beq.n	8002c5c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d141      	bne.n	8002c2e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002baa:	4b32      	ldr	r3, [pc, #200]	; (8002c74 <HAL_RCC_OscConfig+0x480>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb0:	f7fd fd02 	bl	80005b8 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb8:	f7fd fcfe 	bl	80005b8 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e04b      	b.n	8002c62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bca:	4b29      	ldr	r3, [pc, #164]	; (8002c70 <HAL_RCC_OscConfig+0x47c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f0      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69da      	ldr	r2, [r3, #28]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	019b      	lsls	r3, r3, #6
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bec:	085b      	lsrs	r3, r3, #1
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	041b      	lsls	r3, r3, #16
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	061b      	lsls	r3, r3, #24
 8002bfa:	491d      	ldr	r1, [pc, #116]	; (8002c70 <HAL_RCC_OscConfig+0x47c>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c00:	4b1c      	ldr	r3, [pc, #112]	; (8002c74 <HAL_RCC_OscConfig+0x480>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c06:	f7fd fcd7 	bl	80005b8 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c0e:	f7fd fcd3 	bl	80005b8 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e020      	b.n	8002c62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c20:	4b13      	ldr	r3, [pc, #76]	; (8002c70 <HAL_RCC_OscConfig+0x47c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0f0      	beq.n	8002c0e <HAL_RCC_OscConfig+0x41a>
 8002c2c:	e018      	b.n	8002c60 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2e:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <HAL_RCC_OscConfig+0x480>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c34:	f7fd fcc0 	bl	80005b8 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c3c:	f7fd fcbc 	bl	80005b8 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e009      	b.n	8002c62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4e:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <HAL_RCC_OscConfig+0x47c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x448>
 8002c5a:	e001      	b.n	8002c60 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e000      	b.n	8002c62 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40007000 	.word	0x40007000
 8002c70:	40023800 	.word	0x40023800
 8002c74:	42470060 	.word	0x42470060

08002c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e0ca      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c8c:	4b67      	ldr	r3, [pc, #412]	; (8002e2c <HAL_RCC_ClockConfig+0x1b4>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 030f 	and.w	r3, r3, #15
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d90c      	bls.n	8002cb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9a:	4b64      	ldr	r3, [pc, #400]	; (8002e2c <HAL_RCC_ClockConfig+0x1b4>)
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca2:	4b62      	ldr	r3, [pc, #392]	; (8002e2c <HAL_RCC_ClockConfig+0x1b4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0b6      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d020      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ccc:	4b58      	ldr	r3, [pc, #352]	; (8002e30 <HAL_RCC_ClockConfig+0x1b8>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	4a57      	ldr	r2, [pc, #348]	; (8002e30 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ce4:	4b52      	ldr	r3, [pc, #328]	; (8002e30 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	4a51      	ldr	r2, [pc, #324]	; (8002e30 <HAL_RCC_ClockConfig+0x1b8>)
 8002cea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cf0:	4b4f      	ldr	r3, [pc, #316]	; (8002e30 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	494c      	ldr	r1, [pc, #304]	; (8002e30 <HAL_RCC_ClockConfig+0x1b8>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d044      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d107      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d16:	4b46      	ldr	r3, [pc, #280]	; (8002e30 <HAL_RCC_ClockConfig+0x1b8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d119      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e07d      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d003      	beq.n	8002d36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d32:	2b03      	cmp	r3, #3
 8002d34:	d107      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d36:	4b3e      	ldr	r3, [pc, #248]	; (8002e30 <HAL_RCC_ClockConfig+0x1b8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d109      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e06d      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d46:	4b3a      	ldr	r3, [pc, #232]	; (8002e30 <HAL_RCC_ClockConfig+0x1b8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e065      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d56:	4b36      	ldr	r3, [pc, #216]	; (8002e30 <HAL_RCC_ClockConfig+0x1b8>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f023 0203 	bic.w	r2, r3, #3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	4933      	ldr	r1, [pc, #204]	; (8002e30 <HAL_RCC_ClockConfig+0x1b8>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d68:	f7fd fc26 	bl	80005b8 <HAL_GetTick>
 8002d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6e:	e00a      	b.n	8002d86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d70:	f7fd fc22 	bl	80005b8 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e04d      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d86:	4b2a      	ldr	r3, [pc, #168]	; (8002e30 <HAL_RCC_ClockConfig+0x1b8>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 020c 	and.w	r2, r3, #12
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d1eb      	bne.n	8002d70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d98:	4b24      	ldr	r3, [pc, #144]	; (8002e2c <HAL_RCC_ClockConfig+0x1b4>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 030f 	and.w	r3, r3, #15
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d20c      	bcs.n	8002dc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da6:	4b21      	ldr	r3, [pc, #132]	; (8002e2c <HAL_RCC_ClockConfig+0x1b4>)
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dae:	4b1f      	ldr	r3, [pc, #124]	; (8002e2c <HAL_RCC_ClockConfig+0x1b4>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e030      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d008      	beq.n	8002dde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dcc:	4b18      	ldr	r3, [pc, #96]	; (8002e30 <HAL_RCC_ClockConfig+0x1b8>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	4915      	ldr	r1, [pc, #84]	; (8002e30 <HAL_RCC_ClockConfig+0x1b8>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d009      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dea:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <HAL_RCC_ClockConfig+0x1b8>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	490d      	ldr	r1, [pc, #52]	; (8002e30 <HAL_RCC_ClockConfig+0x1b8>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dfe:	f000 f81d 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 8002e02:	4601      	mov	r1, r0
 8002e04:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <HAL_RCC_ClockConfig+0x1b8>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	091b      	lsrs	r3, r3, #4
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	4a09      	ldr	r2, [pc, #36]	; (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002e10:	5cd3      	ldrb	r3, [r2, r3]
 8002e12:	fa21 f303 	lsr.w	r3, r1, r3
 8002e16:	4a08      	ldr	r2, [pc, #32]	; (8002e38 <HAL_RCC_ClockConfig+0x1c0>)
 8002e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	f7fd fb88 	bl	8000530 <HAL_InitTick>

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40023c00 	.word	0x40023c00
 8002e30:	40023800 	.word	0x40023800
 8002e34:	08007670 	.word	0x08007670
 8002e38:	20000110 	.word	0x20000110

08002e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	607b      	str	r3, [r7, #4]
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e52:	4b63      	ldr	r3, [pc, #396]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 030c 	and.w	r3, r3, #12
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d007      	beq.n	8002e6e <HAL_RCC_GetSysClockFreq+0x32>
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	d008      	beq.n	8002e74 <HAL_RCC_GetSysClockFreq+0x38>
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f040 80b4 	bne.w	8002fd0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e68:	4b5e      	ldr	r3, [pc, #376]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e6a:	60bb      	str	r3, [r7, #8]
       break;
 8002e6c:	e0b3      	b.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e6e:	4b5e      	ldr	r3, [pc, #376]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002e70:	60bb      	str	r3, [r7, #8]
      break;
 8002e72:	e0b0      	b.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e74:	4b5a      	ldr	r3, [pc, #360]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e7c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e7e:	4b58      	ldr	r3, [pc, #352]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d04a      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e8a:	4b55      	ldr	r3, [pc, #340]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	099b      	lsrs	r3, r3, #6
 8002e90:	f04f 0400 	mov.w	r4, #0
 8002e94:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	ea03 0501 	and.w	r5, r3, r1
 8002ea0:	ea04 0602 	and.w	r6, r4, r2
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	4632      	mov	r2, r6
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	f04f 0400 	mov.w	r4, #0
 8002eb0:	0154      	lsls	r4, r2, #5
 8002eb2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002eb6:	014b      	lsls	r3, r1, #5
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4622      	mov	r2, r4
 8002ebc:	1b49      	subs	r1, r1, r5
 8002ebe:	eb62 0206 	sbc.w	r2, r2, r6
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	f04f 0400 	mov.w	r4, #0
 8002eca:	0194      	lsls	r4, r2, #6
 8002ecc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ed0:	018b      	lsls	r3, r1, #6
 8002ed2:	1a5b      	subs	r3, r3, r1
 8002ed4:	eb64 0402 	sbc.w	r4, r4, r2
 8002ed8:	f04f 0100 	mov.w	r1, #0
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	00e2      	lsls	r2, r4, #3
 8002ee2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ee6:	00d9      	lsls	r1, r3, #3
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4614      	mov	r4, r2
 8002eec:	195b      	adds	r3, r3, r5
 8002eee:	eb44 0406 	adc.w	r4, r4, r6
 8002ef2:	f04f 0100 	mov.w	r1, #0
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	0262      	lsls	r2, r4, #9
 8002efc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002f00:	0259      	lsls	r1, r3, #9
 8002f02:	460b      	mov	r3, r1
 8002f04:	4614      	mov	r4, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	4621      	mov	r1, r4
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f04f 0400 	mov.w	r4, #0
 8002f10:	461a      	mov	r2, r3
 8002f12:	4623      	mov	r3, r4
 8002f14:	f7fd f96a 	bl	80001ec <__aeabi_uldivmod>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	460c      	mov	r4, r1
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	e049      	b.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f20:	4b2f      	ldr	r3, [pc, #188]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	099b      	lsrs	r3, r3, #6
 8002f26:	f04f 0400 	mov.w	r4, #0
 8002f2a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	ea03 0501 	and.w	r5, r3, r1
 8002f36:	ea04 0602 	and.w	r6, r4, r2
 8002f3a:	4629      	mov	r1, r5
 8002f3c:	4632      	mov	r2, r6
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	f04f 0400 	mov.w	r4, #0
 8002f46:	0154      	lsls	r4, r2, #5
 8002f48:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f4c:	014b      	lsls	r3, r1, #5
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4622      	mov	r2, r4
 8002f52:	1b49      	subs	r1, r1, r5
 8002f54:	eb62 0206 	sbc.w	r2, r2, r6
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	f04f 0400 	mov.w	r4, #0
 8002f60:	0194      	lsls	r4, r2, #6
 8002f62:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f66:	018b      	lsls	r3, r1, #6
 8002f68:	1a5b      	subs	r3, r3, r1
 8002f6a:	eb64 0402 	sbc.w	r4, r4, r2
 8002f6e:	f04f 0100 	mov.w	r1, #0
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	00e2      	lsls	r2, r4, #3
 8002f78:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f7c:	00d9      	lsls	r1, r3, #3
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4614      	mov	r4, r2
 8002f82:	195b      	adds	r3, r3, r5
 8002f84:	eb44 0406 	adc.w	r4, r4, r6
 8002f88:	f04f 0100 	mov.w	r1, #0
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	02a2      	lsls	r2, r4, #10
 8002f92:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002f96:	0299      	lsls	r1, r3, #10
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4614      	mov	r4, r2
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	4621      	mov	r1, r4
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f04f 0400 	mov.w	r4, #0
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	4623      	mov	r3, r4
 8002faa:	f7fd f91f 	bl	80001ec <__aeabi_uldivmod>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	460c      	mov	r4, r1
 8002fb2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fb4:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	0c1b      	lsrs	r3, r3, #16
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fcc:	60bb      	str	r3, [r7, #8]
      break;
 8002fce:	e002      	b.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fd0:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002fd2:	60bb      	str	r3, [r7, #8]
      break;
 8002fd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fd6:	68bb      	ldr	r3, [r7, #8]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	00f42400 	.word	0x00f42400
 8002fe8:	007a1200 	.word	0x007a1200

08002fec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ff0:	4b03      	ldr	r3, [pc, #12]	; (8003000 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	20000110 	.word	0x20000110

08003004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003008:	f7ff fff0 	bl	8002fec <HAL_RCC_GetHCLKFreq>
 800300c:	4601      	mov	r1, r0
 800300e:	4b05      	ldr	r3, [pc, #20]	; (8003024 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	0a9b      	lsrs	r3, r3, #10
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	4a03      	ldr	r2, [pc, #12]	; (8003028 <HAL_RCC_GetPCLK1Freq+0x24>)
 800301a:	5cd3      	ldrb	r3, [r2, r3]
 800301c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003020:	4618      	mov	r0, r3
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40023800 	.word	0x40023800
 8003028:	08007680 	.word	0x08007680

0800302c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003030:	f7ff ffdc 	bl	8002fec <HAL_RCC_GetHCLKFreq>
 8003034:	4601      	mov	r1, r0
 8003036:	4b05      	ldr	r3, [pc, #20]	; (800304c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	0b5b      	lsrs	r3, r3, #13
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	4a03      	ldr	r2, [pc, #12]	; (8003050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003042:	5cd3      	ldrb	r3, [r2, r3]
 8003044:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003048:	4618      	mov	r0, r3
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40023800 	.word	0x40023800
 8003050:	08007680 	.word	0x08007680

08003054 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e03f      	b.n	80030e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d106      	bne.n	8003080 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f003 fd22 	bl	8006ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2224      	movs	r2, #36	; 0x24
 8003084:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003096:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 fa65 	bl	8003568 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	691a      	ldr	r2, [r3, #16]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695a      	ldr	r2, [r3, #20]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68da      	ldr	r2, [r3, #12]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
	...

080030f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b088      	sub	sp, #32
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003110:	2300      	movs	r3, #0
 8003112:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003114:	2300      	movs	r3, #0
 8003116:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10d      	bne.n	8003142 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	f003 0320 	and.w	r3, r3, #32
 800312c:	2b00      	cmp	r3, #0
 800312e:	d008      	beq.n	8003142 <HAL_UART_IRQHandler+0x52>
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	f003 0320 	and.w	r3, r3, #32
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f992 	bl	8003464 <UART_Receive_IT>
      return;
 8003140:	e0cc      	b.n	80032dc <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80ab 	beq.w	80032a0 <HAL_UART_IRQHandler+0x1b0>
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	d105      	bne.n	8003160 <HAL_UART_IRQHandler+0x70>
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 80a0 	beq.w	80032a0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <HAL_UART_IRQHandler+0x90>
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003178:	f043 0201 	orr.w	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <HAL_UART_IRQHandler+0xb0>
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003198:	f043 0202 	orr.w	r2, r3, #2
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <HAL_UART_IRQHandler+0xd0>
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d005      	beq.n	80031c0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b8:	f043 0204 	orr.w	r2, r3, #4
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00a      	beq.n	80031e0 <HAL_UART_IRQHandler+0xf0>
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d005      	beq.n	80031e0 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d8:	f043 0208 	orr.w	r2, r3, #8
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d078      	beq.n	80032da <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f003 0320 	and.w	r3, r3, #32
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d007      	beq.n	8003202 <HAL_UART_IRQHandler+0x112>
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	f003 0320 	and.w	r3, r3, #32
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f931 	bl	8003464 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320c:	2b40      	cmp	r3, #64	; 0x40
 800320e:	bf0c      	ite	eq
 8003210:	2301      	moveq	r3, #1
 8003212:	2300      	movne	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321c:	f003 0308 	and.w	r3, r3, #8
 8003220:	2b00      	cmp	r3, #0
 8003222:	d102      	bne.n	800322a <HAL_UART_IRQHandler+0x13a>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d031      	beq.n	800328e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f87a 	bl	8003324 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323a:	2b40      	cmp	r3, #64	; 0x40
 800323c:	d123      	bne.n	8003286 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695a      	ldr	r2, [r3, #20]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800324c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003252:	2b00      	cmp	r3, #0
 8003254:	d013      	beq.n	800327e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325a:	4a22      	ldr	r2, [pc, #136]	; (80032e4 <HAL_UART_IRQHandler+0x1f4>)
 800325c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003262:	4618      	mov	r0, r3
 8003264:	f7fd fae7 	bl	8000836 <HAL_DMA_Abort_IT>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d016      	beq.n	800329c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003278:	4610      	mov	r0, r2
 800327a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800327c:	e00e      	b.n	800329c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f846 	bl	8003310 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003284:	e00a      	b.n	800329c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f842 	bl	8003310 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800328c:	e006      	b.n	800329c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f83e 	bl	8003310 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800329a:	e01e      	b.n	80032da <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800329c:	bf00      	nop
    return;
 800329e:	e01c      	b.n	80032da <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d008      	beq.n	80032bc <HAL_UART_IRQHandler+0x1cc>
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f867 	bl	8003388 <UART_Transmit_IT>
    return;
 80032ba:	e00f      	b.n	80032dc <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <HAL_UART_IRQHandler+0x1ec>
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d005      	beq.n	80032dc <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 f8af 	bl	8003434 <UART_EndTransmit_IT>
    return;
 80032d6:	bf00      	nop
 80032d8:	e000      	b.n	80032dc <HAL_UART_IRQHandler+0x1ec>
    return;
 80032da:	bf00      	nop
  }
}
 80032dc:	3720      	adds	r7, #32
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	08003361 	.word	0x08003361

080032e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800333a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0201 	bic.w	r2, r2, #1
 800334a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f7ff ffc8 	bl	8003310 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003380:	bf00      	nop
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b21      	cmp	r3, #33	; 0x21
 800339a:	d144      	bne.n	8003426 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033a4:	d11a      	bne.n	80033dc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	881b      	ldrh	r3, [r3, #0]
 80033b0:	461a      	mov	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033ba:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d105      	bne.n	80033d0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	1c9a      	adds	r2, r3, #2
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	621a      	str	r2, [r3, #32]
 80033ce:	e00e      	b.n	80033ee <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	621a      	str	r2, [r3, #32]
 80033da:	e008      	b.n	80033ee <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	1c59      	adds	r1, r3, #1
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6211      	str	r1, [r2, #32]
 80033e6:	781a      	ldrb	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	4619      	mov	r1, r3
 80033fc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10f      	bne.n	8003422 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003410:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68da      	ldr	r2, [r3, #12]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003420:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	e000      	b.n	8003428 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003426:	2302      	movs	r3, #2
  }
}
 8003428:	4618      	mov	r0, r3
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800344a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff ff47 	bl	80032e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b22      	cmp	r3, #34	; 0x22
 8003476:	d171      	bne.n	800355c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003480:	d123      	bne.n	80034ca <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003486:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10e      	bne.n	80034ae <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	b29b      	uxth	r3, r3
 8003498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a6:	1c9a      	adds	r2, r3, #2
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	629a      	str	r2, [r3, #40]	; 0x28
 80034ac:	e029      	b.n	8003502 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c2:	1c5a      	adds	r2, r3, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	629a      	str	r2, [r3, #40]	; 0x28
 80034c8:	e01b      	b.n	8003502 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10a      	bne.n	80034e8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6858      	ldr	r0, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034dc:	1c59      	adds	r1, r3, #1
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6291      	str	r1, [r2, #40]	; 0x28
 80034e2:	b2c2      	uxtb	r2, r0
 80034e4:	701a      	strb	r2, [r3, #0]
 80034e6:	e00c      	b.n	8003502 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f4:	1c58      	adds	r0, r3, #1
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	6288      	str	r0, [r1, #40]	; 0x28
 80034fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003506:	b29b      	uxth	r3, r3
 8003508:	3b01      	subs	r3, #1
 800350a:	b29b      	uxth	r3, r3
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	4619      	mov	r1, r3
 8003510:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003512:	2b00      	cmp	r3, #0
 8003514:	d120      	bne.n	8003558 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0220 	bic.w	r2, r2, #32
 8003524:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68da      	ldr	r2, [r3, #12]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003534:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695a      	ldr	r2, [r3, #20]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0201 	bic.w	r2, r2, #1
 8003544:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2220      	movs	r2, #32
 800354a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff fed4 	bl	80032fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	e002      	b.n	800355e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	e000      	b.n	800355e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800355c:	2302      	movs	r3, #2
  }
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003568:	b5b0      	push	{r4, r5, r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	431a      	orrs	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80035a8:	f023 030c 	bic.w	r3, r3, #12
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	68f9      	ldr	r1, [r7, #12]
 80035b2:	430b      	orrs	r3, r1
 80035b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	699a      	ldr	r2, [r3, #24]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035d4:	f040 80e4 	bne.w	80037a0 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4aab      	ldr	r2, [pc, #684]	; (800388c <UART_SetConfig+0x324>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d004      	beq.n	80035ec <UART_SetConfig+0x84>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4aaa      	ldr	r2, [pc, #680]	; (8003890 <UART_SetConfig+0x328>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d16c      	bne.n	80036c6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80035ec:	f7ff fd1e 	bl	800302c <HAL_RCC_GetPCLK2Freq>
 80035f0:	4602      	mov	r2, r0
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	009a      	lsls	r2, r3, #2
 80035fa:	441a      	add	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	fbb2 f3f3 	udiv	r3, r2, r3
 8003606:	4aa3      	ldr	r2, [pc, #652]	; (8003894 <UART_SetConfig+0x32c>)
 8003608:	fba2 2303 	umull	r2, r3, r2, r3
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	011c      	lsls	r4, r3, #4
 8003610:	f7ff fd0c 	bl	800302c <HAL_RCC_GetPCLK2Freq>
 8003614:	4602      	mov	r2, r0
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	009a      	lsls	r2, r3, #2
 800361e:	441a      	add	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	fbb2 f5f3 	udiv	r5, r2, r3
 800362a:	f7ff fcff 	bl	800302c <HAL_RCC_GetPCLK2Freq>
 800362e:	4602      	mov	r2, r0
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	009a      	lsls	r2, r3, #2
 8003638:	441a      	add	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	4a93      	ldr	r2, [pc, #588]	; (8003894 <UART_SetConfig+0x32c>)
 8003646:	fba2 2303 	umull	r2, r3, r2, r3
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	2264      	movs	r2, #100	; 0x64
 800364e:	fb02 f303 	mul.w	r3, r2, r3
 8003652:	1aeb      	subs	r3, r5, r3
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	3332      	adds	r3, #50	; 0x32
 8003658:	4a8e      	ldr	r2, [pc, #568]	; (8003894 <UART_SetConfig+0x32c>)
 800365a:	fba2 2303 	umull	r2, r3, r2, r3
 800365e:	095b      	lsrs	r3, r3, #5
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003666:	441c      	add	r4, r3
 8003668:	f7ff fce0 	bl	800302c <HAL_RCC_GetPCLK2Freq>
 800366c:	4602      	mov	r2, r0
 800366e:	4613      	mov	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	009a      	lsls	r2, r3, #2
 8003676:	441a      	add	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	fbb2 f5f3 	udiv	r5, r2, r3
 8003682:	f7ff fcd3 	bl	800302c <HAL_RCC_GetPCLK2Freq>
 8003686:	4602      	mov	r2, r0
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	009a      	lsls	r2, r3, #2
 8003690:	441a      	add	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	fbb2 f3f3 	udiv	r3, r2, r3
 800369c:	4a7d      	ldr	r2, [pc, #500]	; (8003894 <UART_SetConfig+0x32c>)
 800369e:	fba2 2303 	umull	r2, r3, r2, r3
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	2264      	movs	r2, #100	; 0x64
 80036a6:	fb02 f303 	mul.w	r3, r2, r3
 80036aa:	1aeb      	subs	r3, r5, r3
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	3332      	adds	r3, #50	; 0x32
 80036b0:	4a78      	ldr	r2, [pc, #480]	; (8003894 <UART_SetConfig+0x32c>)
 80036b2:	fba2 2303 	umull	r2, r3, r2, r3
 80036b6:	095b      	lsrs	r3, r3, #5
 80036b8:	f003 0207 	and.w	r2, r3, #7
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4422      	add	r2, r4
 80036c2:	609a      	str	r2, [r3, #8]
 80036c4:	e154      	b.n	8003970 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80036c6:	f7ff fc9d 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 80036ca:	4602      	mov	r2, r0
 80036cc:	4613      	mov	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	009a      	lsls	r2, r3, #2
 80036d4:	441a      	add	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e0:	4a6c      	ldr	r2, [pc, #432]	; (8003894 <UART_SetConfig+0x32c>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	095b      	lsrs	r3, r3, #5
 80036e8:	011c      	lsls	r4, r3, #4
 80036ea:	f7ff fc8b 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 80036ee:	4602      	mov	r2, r0
 80036f0:	4613      	mov	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	009a      	lsls	r2, r3, #2
 80036f8:	441a      	add	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	fbb2 f5f3 	udiv	r5, r2, r3
 8003704:	f7ff fc7e 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 8003708:	4602      	mov	r2, r0
 800370a:	4613      	mov	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	009a      	lsls	r2, r3, #2
 8003712:	441a      	add	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	fbb2 f3f3 	udiv	r3, r2, r3
 800371e:	4a5d      	ldr	r2, [pc, #372]	; (8003894 <UART_SetConfig+0x32c>)
 8003720:	fba2 2303 	umull	r2, r3, r2, r3
 8003724:	095b      	lsrs	r3, r3, #5
 8003726:	2264      	movs	r2, #100	; 0x64
 8003728:	fb02 f303 	mul.w	r3, r2, r3
 800372c:	1aeb      	subs	r3, r5, r3
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	3332      	adds	r3, #50	; 0x32
 8003732:	4a58      	ldr	r2, [pc, #352]	; (8003894 <UART_SetConfig+0x32c>)
 8003734:	fba2 2303 	umull	r2, r3, r2, r3
 8003738:	095b      	lsrs	r3, r3, #5
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003740:	441c      	add	r4, r3
 8003742:	f7ff fc5f 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 8003746:	4602      	mov	r2, r0
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	009a      	lsls	r2, r3, #2
 8003750:	441a      	add	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	fbb2 f5f3 	udiv	r5, r2, r3
 800375c:	f7ff fc52 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 8003760:	4602      	mov	r2, r0
 8003762:	4613      	mov	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	009a      	lsls	r2, r3, #2
 800376a:	441a      	add	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	fbb2 f3f3 	udiv	r3, r2, r3
 8003776:	4a47      	ldr	r2, [pc, #284]	; (8003894 <UART_SetConfig+0x32c>)
 8003778:	fba2 2303 	umull	r2, r3, r2, r3
 800377c:	095b      	lsrs	r3, r3, #5
 800377e:	2264      	movs	r2, #100	; 0x64
 8003780:	fb02 f303 	mul.w	r3, r2, r3
 8003784:	1aeb      	subs	r3, r5, r3
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	3332      	adds	r3, #50	; 0x32
 800378a:	4a42      	ldr	r2, [pc, #264]	; (8003894 <UART_SetConfig+0x32c>)
 800378c:	fba2 2303 	umull	r2, r3, r2, r3
 8003790:	095b      	lsrs	r3, r3, #5
 8003792:	f003 0207 	and.w	r2, r3, #7
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4422      	add	r2, r4
 800379c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800379e:	e0e7      	b.n	8003970 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a39      	ldr	r2, [pc, #228]	; (800388c <UART_SetConfig+0x324>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d004      	beq.n	80037b4 <UART_SetConfig+0x24c>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a38      	ldr	r2, [pc, #224]	; (8003890 <UART_SetConfig+0x328>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d171      	bne.n	8003898 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80037b4:	f7ff fc3a 	bl	800302c <HAL_RCC_GetPCLK2Freq>
 80037b8:	4602      	mov	r2, r0
 80037ba:	4613      	mov	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	009a      	lsls	r2, r3, #2
 80037c2:	441a      	add	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ce:	4a31      	ldr	r2, [pc, #196]	; (8003894 <UART_SetConfig+0x32c>)
 80037d0:	fba2 2303 	umull	r2, r3, r2, r3
 80037d4:	095b      	lsrs	r3, r3, #5
 80037d6:	011c      	lsls	r4, r3, #4
 80037d8:	f7ff fc28 	bl	800302c <HAL_RCC_GetPCLK2Freq>
 80037dc:	4602      	mov	r2, r0
 80037de:	4613      	mov	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4413      	add	r3, r2
 80037e4:	009a      	lsls	r2, r3, #2
 80037e6:	441a      	add	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	fbb2 f5f3 	udiv	r5, r2, r3
 80037f2:	f7ff fc1b 	bl	800302c <HAL_RCC_GetPCLK2Freq>
 80037f6:	4602      	mov	r2, r0
 80037f8:	4613      	mov	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	009a      	lsls	r2, r3, #2
 8003800:	441a      	add	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	fbb2 f3f3 	udiv	r3, r2, r3
 800380c:	4a21      	ldr	r2, [pc, #132]	; (8003894 <UART_SetConfig+0x32c>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	2264      	movs	r2, #100	; 0x64
 8003816:	fb02 f303 	mul.w	r3, r2, r3
 800381a:	1aeb      	subs	r3, r5, r3
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	3332      	adds	r3, #50	; 0x32
 8003820:	4a1c      	ldr	r2, [pc, #112]	; (8003894 <UART_SetConfig+0x32c>)
 8003822:	fba2 2303 	umull	r2, r3, r2, r3
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800382c:	441c      	add	r4, r3
 800382e:	f7ff fbfd 	bl	800302c <HAL_RCC_GetPCLK2Freq>
 8003832:	4602      	mov	r2, r0
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	009a      	lsls	r2, r3, #2
 800383c:	441a      	add	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	fbb2 f5f3 	udiv	r5, r2, r3
 8003848:	f7ff fbf0 	bl	800302c <HAL_RCC_GetPCLK2Freq>
 800384c:	4602      	mov	r2, r0
 800384e:	4613      	mov	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	009a      	lsls	r2, r3, #2
 8003856:	441a      	add	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003862:	4a0c      	ldr	r2, [pc, #48]	; (8003894 <UART_SetConfig+0x32c>)
 8003864:	fba2 2303 	umull	r2, r3, r2, r3
 8003868:	095b      	lsrs	r3, r3, #5
 800386a:	2264      	movs	r2, #100	; 0x64
 800386c:	fb02 f303 	mul.w	r3, r2, r3
 8003870:	1aeb      	subs	r3, r5, r3
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	3332      	adds	r3, #50	; 0x32
 8003876:	4a07      	ldr	r2, [pc, #28]	; (8003894 <UART_SetConfig+0x32c>)
 8003878:	fba2 2303 	umull	r2, r3, r2, r3
 800387c:	095b      	lsrs	r3, r3, #5
 800387e:	f003 020f 	and.w	r2, r3, #15
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4422      	add	r2, r4
 8003888:	609a      	str	r2, [r3, #8]
 800388a:	e071      	b.n	8003970 <UART_SetConfig+0x408>
 800388c:	40011000 	.word	0x40011000
 8003890:	40011400 	.word	0x40011400
 8003894:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003898:	f7ff fbb4 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 800389c:	4602      	mov	r2, r0
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	009a      	lsls	r2, r3, #2
 80038a6:	441a      	add	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b2:	4a31      	ldr	r2, [pc, #196]	; (8003978 <UART_SetConfig+0x410>)
 80038b4:	fba2 2303 	umull	r2, r3, r2, r3
 80038b8:	095b      	lsrs	r3, r3, #5
 80038ba:	011c      	lsls	r4, r3, #4
 80038bc:	f7ff fba2 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 80038c0:	4602      	mov	r2, r0
 80038c2:	4613      	mov	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	009a      	lsls	r2, r3, #2
 80038ca:	441a      	add	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	fbb2 f5f3 	udiv	r5, r2, r3
 80038d6:	f7ff fb95 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 80038da:	4602      	mov	r2, r0
 80038dc:	4613      	mov	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	009a      	lsls	r2, r3, #2
 80038e4:	441a      	add	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f0:	4a21      	ldr	r2, [pc, #132]	; (8003978 <UART_SetConfig+0x410>)
 80038f2:	fba2 2303 	umull	r2, r3, r2, r3
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	2264      	movs	r2, #100	; 0x64
 80038fa:	fb02 f303 	mul.w	r3, r2, r3
 80038fe:	1aeb      	subs	r3, r5, r3
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	3332      	adds	r3, #50	; 0x32
 8003904:	4a1c      	ldr	r2, [pc, #112]	; (8003978 <UART_SetConfig+0x410>)
 8003906:	fba2 2303 	umull	r2, r3, r2, r3
 800390a:	095b      	lsrs	r3, r3, #5
 800390c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003910:	441c      	add	r4, r3
 8003912:	f7ff fb77 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 8003916:	4602      	mov	r2, r0
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	009a      	lsls	r2, r3, #2
 8003920:	441a      	add	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	fbb2 f5f3 	udiv	r5, r2, r3
 800392c:	f7ff fb6a 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 8003930:	4602      	mov	r2, r0
 8003932:	4613      	mov	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	009a      	lsls	r2, r3, #2
 800393a:	441a      	add	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	fbb2 f3f3 	udiv	r3, r2, r3
 8003946:	4a0c      	ldr	r2, [pc, #48]	; (8003978 <UART_SetConfig+0x410>)
 8003948:	fba2 2303 	umull	r2, r3, r2, r3
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	2264      	movs	r2, #100	; 0x64
 8003950:	fb02 f303 	mul.w	r3, r2, r3
 8003954:	1aeb      	subs	r3, r5, r3
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	3332      	adds	r3, #50	; 0x32
 800395a:	4a07      	ldr	r2, [pc, #28]	; (8003978 <UART_SetConfig+0x410>)
 800395c:	fba2 2303 	umull	r2, r3, r2, r3
 8003960:	095b      	lsrs	r3, r3, #5
 8003962:	f003 020f 	and.w	r2, r3, #15
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4422      	add	r2, r4
 800396c:	609a      	str	r2, [r3, #8]
}
 800396e:	e7ff      	b.n	8003970 <UART_SetConfig+0x408>
 8003970:	bf00      	nop
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bdb0      	pop	{r4, r5, r7, pc}
 8003978:	51eb851f 	.word	0x51eb851f

0800397c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800397c:	b084      	sub	sp, #16
 800397e:	b580      	push	{r7, lr}
 8003980:	b084      	sub	sp, #16
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	f107 001c 	add.w	r0, r7, #28
 800398a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003990:	2b01      	cmp	r3, #1
 8003992:	d122      	bne.n	80039da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003998:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80039a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80039bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d105      	bne.n	80039ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f001 fa7c 	bl	8004ecc <USB_CoreReset>
 80039d4:	4603      	mov	r3, r0
 80039d6:	73fb      	strb	r3, [r7, #15]
 80039d8:	e01a      	b.n	8003a10 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f001 fa70 	bl	8004ecc <USB_CoreReset>
 80039ec:	4603      	mov	r3, r0
 80039ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80039f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d106      	bne.n	8003a04 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	639a      	str	r2, [r3, #56]	; 0x38
 8003a02:	e005      	b.n	8003a10 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d10b      	bne.n	8003a2e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f043 0206 	orr.w	r2, r3, #6
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f043 0220 	orr.w	r2, r3, #32
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a3a:	b004      	add	sp, #16
 8003a3c:	4770      	bx	lr
	...

08003a40 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003a4e:	79fb      	ldrb	r3, [r7, #7]
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d165      	bne.n	8003b20 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	4a41      	ldr	r2, [pc, #260]	; (8003b5c <USB_SetTurnaroundTime+0x11c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d906      	bls.n	8003a6a <USB_SetTurnaroundTime+0x2a>
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	4a40      	ldr	r2, [pc, #256]	; (8003b60 <USB_SetTurnaroundTime+0x120>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d802      	bhi.n	8003a6a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003a64:	230f      	movs	r3, #15
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	e062      	b.n	8003b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	4a3c      	ldr	r2, [pc, #240]	; (8003b60 <USB_SetTurnaroundTime+0x120>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d906      	bls.n	8003a80 <USB_SetTurnaroundTime+0x40>
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	4a3b      	ldr	r2, [pc, #236]	; (8003b64 <USB_SetTurnaroundTime+0x124>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d802      	bhi.n	8003a80 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003a7a:	230e      	movs	r3, #14
 8003a7c:	617b      	str	r3, [r7, #20]
 8003a7e:	e057      	b.n	8003b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	4a38      	ldr	r2, [pc, #224]	; (8003b64 <USB_SetTurnaroundTime+0x124>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d906      	bls.n	8003a96 <USB_SetTurnaroundTime+0x56>
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	4a37      	ldr	r2, [pc, #220]	; (8003b68 <USB_SetTurnaroundTime+0x128>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d802      	bhi.n	8003a96 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003a90:	230d      	movs	r3, #13
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	e04c      	b.n	8003b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	4a33      	ldr	r2, [pc, #204]	; (8003b68 <USB_SetTurnaroundTime+0x128>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d906      	bls.n	8003aac <USB_SetTurnaroundTime+0x6c>
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	4a32      	ldr	r2, [pc, #200]	; (8003b6c <USB_SetTurnaroundTime+0x12c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d802      	bhi.n	8003aac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003aa6:	230c      	movs	r3, #12
 8003aa8:	617b      	str	r3, [r7, #20]
 8003aaa:	e041      	b.n	8003b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	4a2f      	ldr	r2, [pc, #188]	; (8003b6c <USB_SetTurnaroundTime+0x12c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d906      	bls.n	8003ac2 <USB_SetTurnaroundTime+0x82>
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	4a2e      	ldr	r2, [pc, #184]	; (8003b70 <USB_SetTurnaroundTime+0x130>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d802      	bhi.n	8003ac2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003abc:	230b      	movs	r3, #11
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	e036      	b.n	8003b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	4a2a      	ldr	r2, [pc, #168]	; (8003b70 <USB_SetTurnaroundTime+0x130>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d906      	bls.n	8003ad8 <USB_SetTurnaroundTime+0x98>
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	4a29      	ldr	r2, [pc, #164]	; (8003b74 <USB_SetTurnaroundTime+0x134>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d802      	bhi.n	8003ad8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003ad2:	230a      	movs	r3, #10
 8003ad4:	617b      	str	r3, [r7, #20]
 8003ad6:	e02b      	b.n	8003b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	4a26      	ldr	r2, [pc, #152]	; (8003b74 <USB_SetTurnaroundTime+0x134>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d906      	bls.n	8003aee <USB_SetTurnaroundTime+0xae>
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	4a25      	ldr	r2, [pc, #148]	; (8003b78 <USB_SetTurnaroundTime+0x138>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d802      	bhi.n	8003aee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003ae8:	2309      	movs	r3, #9
 8003aea:	617b      	str	r3, [r7, #20]
 8003aec:	e020      	b.n	8003b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	4a21      	ldr	r2, [pc, #132]	; (8003b78 <USB_SetTurnaroundTime+0x138>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d906      	bls.n	8003b04 <USB_SetTurnaroundTime+0xc4>
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	4a20      	ldr	r2, [pc, #128]	; (8003b7c <USB_SetTurnaroundTime+0x13c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d802      	bhi.n	8003b04 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003afe:	2308      	movs	r3, #8
 8003b00:	617b      	str	r3, [r7, #20]
 8003b02:	e015      	b.n	8003b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	4a1d      	ldr	r2, [pc, #116]	; (8003b7c <USB_SetTurnaroundTime+0x13c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d906      	bls.n	8003b1a <USB_SetTurnaroundTime+0xda>
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	4a1c      	ldr	r2, [pc, #112]	; (8003b80 <USB_SetTurnaroundTime+0x140>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d802      	bhi.n	8003b1a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003b14:	2307      	movs	r3, #7
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	e00a      	b.n	8003b30 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003b1a:	2306      	movs	r3, #6
 8003b1c:	617b      	str	r3, [r7, #20]
 8003b1e:	e007      	b.n	8003b30 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d102      	bne.n	8003b2c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003b26:	2309      	movs	r3, #9
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	e001      	b.n	8003b30 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003b2c:	2309      	movs	r3, #9
 8003b2e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	029b      	lsls	r3, r3, #10
 8003b44:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	371c      	adds	r7, #28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	00d8acbf 	.word	0x00d8acbf
 8003b60:	00e4e1bf 	.word	0x00e4e1bf
 8003b64:	00f423ff 	.word	0x00f423ff
 8003b68:	0106737f 	.word	0x0106737f
 8003b6c:	011a499f 	.word	0x011a499f
 8003b70:	01312cff 	.word	0x01312cff
 8003b74:	014ca43f 	.word	0x014ca43f
 8003b78:	016e35ff 	.word	0x016e35ff
 8003b7c:	01a6ab1f 	.word	0x01a6ab1f
 8003b80:	01e847ff 	.word	0x01e847ff

08003b84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f043 0201 	orr.w	r2, r3, #1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f023 0201 	bic.w	r2, r3, #1
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d106      	bne.n	8003bf4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	60da      	str	r2, [r3, #12]
 8003bf2:	e00b      	b.n	8003c0c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003bf4:	78fb      	ldrb	r3, [r7, #3]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	60da      	str	r2, [r3, #12]
 8003c06:	e001      	b.n	8003c0c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e003      	b.n	8003c14 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003c0c:	2032      	movs	r0, #50	; 0x32
 8003c0e:	f7fc fcdf 	bl	80005d0 <HAL_Delay>

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c1c:	b084      	sub	sp, #16
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b086      	sub	sp, #24
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003c2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003c36:	2300      	movs	r3, #0
 8003c38:	613b      	str	r3, [r7, #16]
 8003c3a:	e009      	b.n	8003c50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	3340      	adds	r3, #64	; 0x40
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	2200      	movs	r2, #0
 8003c48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	613b      	str	r3, [r7, #16]
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	2b0e      	cmp	r3, #14
 8003c54:	d9f2      	bls.n	8003c3c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d112      	bne.n	8003c82 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c60:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c78:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	639a      	str	r2, [r3, #56]	; 0x38
 8003c80:	e00b      	b.n	8003c9a <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c92:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cac:	4619      	mov	r1, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	680b      	ldr	r3, [r1, #0]
 8003cb8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d10c      	bne.n	8003cda <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d104      	bne.n	8003cd0 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f961 	bl	8003f90 <USB_SetDevSpeed>
 8003cce:	e008      	b.n	8003ce2 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f95c 	bl	8003f90 <USB_SetDevSpeed>
 8003cd8:	e003      	b.n	8003ce2 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003cda:	2103      	movs	r1, #3
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f957 	bl	8003f90 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003ce2:	2110      	movs	r1, #16
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f90b 	bl	8003f00 <USB_FlushTxFifo>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f929 	bl	8003f4c <USB_FlushRxFifo>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d16:	461a      	mov	r2, r3
 8003d18:	2300      	movs	r3, #0
 8003d1a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d22:	461a      	mov	r2, r3
 8003d24:	2300      	movs	r3, #0
 8003d26:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d28:	2300      	movs	r3, #0
 8003d2a:	613b      	str	r3, [r7, #16]
 8003d2c:	e043      	b.n	8003db6 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d44:	d118      	bne.n	8003d78 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10a      	bne.n	8003d62 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	015a      	lsls	r2, r3, #5
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d58:	461a      	mov	r2, r3
 8003d5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d5e:	6013      	str	r3, [r2, #0]
 8003d60:	e013      	b.n	8003d8a <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	015a      	lsls	r2, r3, #5
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	4413      	add	r3, r2
 8003d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d6e:	461a      	mov	r2, r3
 8003d70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	e008      	b.n	8003d8a <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	015a      	lsls	r2, r3, #5
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4413      	add	r3, r2
 8003d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d84:	461a      	mov	r2, r3
 8003d86:	2300      	movs	r3, #0
 8003d88:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	015a      	lsls	r2, r3, #5
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d96:	461a      	mov	r2, r3
 8003d98:	2300      	movs	r3, #0
 8003d9a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da8:	461a      	mov	r2, r3
 8003daa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003dae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	3301      	adds	r3, #1
 8003db4:	613b      	str	r3, [r7, #16]
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d3b7      	bcc.n	8003d2e <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	e043      	b.n	8003e4c <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dda:	d118      	bne.n	8003e0e <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10a      	bne.n	8003df8 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	015a      	lsls	r2, r3, #5
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dee:	461a      	mov	r2, r3
 8003df0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	e013      	b.n	8003e20 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e04:	461a      	mov	r2, r3
 8003e06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	e008      	b.n	8003e20 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	015a      	lsls	r2, r3, #5
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	2300      	movs	r3, #0
 8003e30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e3e:	461a      	mov	r2, r3
 8003e40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d3b7      	bcc.n	8003dc4 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e66:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8003e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d111      	bne.n	8003e92 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e74:	461a      	mov	r2, r3
 8003e76:	4b20      	ldr	r3, [pc, #128]	; (8003ef8 <USB_DevInit+0x2dc>)
 8003e78:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e8c:	f043 0303 	orr.w	r3, r3, #3
 8003e90:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003e9e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d105      	bne.n	8003eb2 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	f043 0210 	orr.w	r2, r3, #16
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	4b11      	ldr	r3, [pc, #68]	; (8003efc <USB_DevInit+0x2e0>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	f043 0208 	orr.w	r2, r3, #8
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d107      	bne.n	8003ee6 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ede:	f043 0304 	orr.w	r3, r3, #4
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ef2:	b004      	add	sp, #16
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	00800100 	.word	0x00800100
 8003efc:	803c3800 	.word	0x803c3800

08003f00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	019b      	lsls	r3, r3, #6
 8003f12:	f043 0220 	orr.w	r2, r3, #32
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4a09      	ldr	r2, [pc, #36]	; (8003f48 <USB_FlushTxFifo+0x48>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d901      	bls.n	8003f2c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e006      	b.n	8003f3a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	f003 0320 	and.w	r3, r3, #32
 8003f34:	2b20      	cmp	r3, #32
 8003f36:	d0f0      	beq.n	8003f1a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	00030d40 	.word	0x00030d40

08003f4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003f54:	2300      	movs	r3, #0
 8003f56:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2210      	movs	r2, #16
 8003f5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	3301      	adds	r3, #1
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4a09      	ldr	r2, [pc, #36]	; (8003f8c <USB_FlushRxFifo+0x40>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d901      	bls.n	8003f70 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e006      	b.n	8003f7e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	f003 0310 	and.w	r3, r3, #16
 8003f78:	2b10      	cmp	r3, #16
 8003f7a:	d0f0      	beq.n	8003f5e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	00030d40 	.word	0x00030d40

08003f90 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	78fb      	ldrb	r3, [r7, #3]
 8003faa:	68f9      	ldr	r1, [r7, #12]
 8003fac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b087      	sub	sp, #28
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 0306 	and.w	r3, r3, #6
 8003fda:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d102      	bne.n	8003fe8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	75fb      	strb	r3, [r7, #23]
 8003fe6:	e00a      	b.n	8003ffe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d002      	beq.n	8003ff4 <USB_GetDevSpeed+0x32>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2b06      	cmp	r3, #6
 8003ff2:	d102      	bne.n	8003ffa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	75fb      	strb	r3, [r7, #23]
 8003ff8:	e001      	b.n	8003ffe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003ffa:	230f      	movs	r3, #15
 8003ffc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004000:	4618      	mov	r0, r3
 8004002:	371c      	adds	r7, #28
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	785b      	ldrb	r3, [r3, #1]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d13a      	bne.n	800409e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800402e:	69da      	ldr	r2, [r3, #28]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	f003 030f 	and.w	r3, r3, #15
 8004038:	2101      	movs	r1, #1
 800403a:	fa01 f303 	lsl.w	r3, r1, r3
 800403e:	b29b      	uxth	r3, r3
 8004040:	68f9      	ldr	r1, [r7, #12]
 8004042:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004046:	4313      	orrs	r3, r2
 8004048:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	015a      	lsls	r2, r3, #5
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	4413      	add	r3, r2
 8004052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d155      	bne.n	800410c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	78db      	ldrb	r3, [r3, #3]
 800407a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800407c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	059b      	lsls	r3, r3, #22
 8004082:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004084:	4313      	orrs	r3, r2
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	0151      	lsls	r1, r2, #5
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	440a      	add	r2, r1
 800408e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	e036      	b.n	800410c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a4:	69da      	ldr	r2, [r3, #28]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	2101      	movs	r1, #1
 80040b0:	fa01 f303 	lsl.w	r3, r1, r3
 80040b4:	041b      	lsls	r3, r3, #16
 80040b6:	68f9      	ldr	r1, [r7, #12]
 80040b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040bc:	4313      	orrs	r3, r2
 80040be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d11a      	bne.n	800410c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	78db      	ldrb	r3, [r3, #3]
 80040f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80040f2:	430b      	orrs	r3, r1
 80040f4:	4313      	orrs	r3, r2
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	0151      	lsls	r1, r2, #5
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	440a      	add	r2, r1
 80040fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800410a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
	...

0800411c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	785b      	ldrb	r3, [r3, #1]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d135      	bne.n	80041a4 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	f003 030f 	and.w	r3, r3, #15
 8004148:	2101      	movs	r1, #1
 800414a:	fa01 f303 	lsl.w	r3, r1, r3
 800414e:	b29b      	uxth	r3, r3
 8004150:	43db      	mvns	r3, r3
 8004152:	68f9      	ldr	r1, [r7, #12]
 8004154:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004158:	4013      	ands	r3, r2
 800415a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004162:	69da      	ldr	r2, [r3, #28]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	f003 030f 	and.w	r3, r3, #15
 800416c:	2101      	movs	r1, #1
 800416e:	fa01 f303 	lsl.w	r3, r1, r3
 8004172:	b29b      	uxth	r3, r3
 8004174:	43db      	mvns	r3, r3
 8004176:	68f9      	ldr	r1, [r7, #12]
 8004178:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800417c:	4013      	ands	r3, r2
 800417e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	0159      	lsls	r1, r3, #5
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	440b      	add	r3, r1
 8004196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419a:	4619      	mov	r1, r3
 800419c:	4b1f      	ldr	r3, [pc, #124]	; (800421c <USB_DeactivateEndpoint+0x100>)
 800419e:	4013      	ands	r3, r2
 80041a0:	600b      	str	r3, [r1, #0]
 80041a2:	e034      	b.n	800420e <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	f003 030f 	and.w	r3, r3, #15
 80041b4:	2101      	movs	r1, #1
 80041b6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ba:	041b      	lsls	r3, r3, #16
 80041bc:	43db      	mvns	r3, r3
 80041be:	68f9      	ldr	r1, [r7, #12]
 80041c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041c4:	4013      	ands	r3, r2
 80041c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ce:	69da      	ldr	r2, [r3, #28]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	f003 030f 	and.w	r3, r3, #15
 80041d8:	2101      	movs	r1, #1
 80041da:	fa01 f303 	lsl.w	r3, r1, r3
 80041de:	041b      	lsls	r3, r3, #16
 80041e0:	43db      	mvns	r3, r3
 80041e2:	68f9      	ldr	r1, [r7, #12]
 80041e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041e8:	4013      	ands	r3, r2
 80041ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	0159      	lsls	r1, r3, #5
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	440b      	add	r3, r1
 8004202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004206:	4619      	mov	r1, r3
 8004208:	4b05      	ldr	r3, [pc, #20]	; (8004220 <USB_DeactivateEndpoint+0x104>)
 800420a:	4013      	ands	r3, r2
 800420c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	ec337800 	.word	0xec337800
 8004220:	eff37800 	.word	0xeff37800

08004224 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08a      	sub	sp, #40	; 0x28
 8004228:	af02      	add	r7, sp, #8
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	4613      	mov	r3, r2
 8004230:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	785b      	ldrb	r3, [r3, #1]
 8004240:	2b01      	cmp	r3, #1
 8004242:	f040 815c 	bne.w	80044fe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d132      	bne.n	80042b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	015a      	lsls	r2, r3, #5
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	4413      	add	r3, r2
 8004256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	0151      	lsls	r1, r2, #5
 8004260:	69fa      	ldr	r2, [r7, #28]
 8004262:	440a      	add	r2, r1
 8004264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004268:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800426c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004270:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	4413      	add	r3, r2
 800427a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	0151      	lsls	r1, r2, #5
 8004284:	69fa      	ldr	r2, [r7, #28]
 8004286:	440a      	add	r2, r1
 8004288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800428c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004290:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	0151      	lsls	r1, r2, #5
 80042a4:	69fa      	ldr	r2, [r7, #28]
 80042a6:	440a      	add	r2, r1
 80042a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ac:	0cdb      	lsrs	r3, r3, #19
 80042ae:	04db      	lsls	r3, r3, #19
 80042b0:	6113      	str	r3, [r2, #16]
 80042b2:	e074      	b.n	800439e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	0151      	lsls	r1, r2, #5
 80042c6:	69fa      	ldr	r2, [r7, #28]
 80042c8:	440a      	add	r2, r1
 80042ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ce:	0cdb      	lsrs	r3, r3, #19
 80042d0:	04db      	lsls	r3, r3, #19
 80042d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	0151      	lsls	r1, r2, #5
 80042e6:	69fa      	ldr	r2, [r7, #28]
 80042e8:	440a      	add	r2, r1
 80042ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	015a      	lsls	r2, r3, #5
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	4413      	add	r3, r2
 8004300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004304:	691a      	ldr	r2, [r3, #16]
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	6959      	ldr	r1, [r3, #20]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	440b      	add	r3, r1
 8004310:	1e59      	subs	r1, r3, #1
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	fbb1 f3f3 	udiv	r3, r1, r3
 800431a:	04d9      	lsls	r1, r3, #19
 800431c:	4b9d      	ldr	r3, [pc, #628]	; (8004594 <USB_EPStartXfer+0x370>)
 800431e:	400b      	ands	r3, r1
 8004320:	69b9      	ldr	r1, [r7, #24]
 8004322:	0148      	lsls	r0, r1, #5
 8004324:	69f9      	ldr	r1, [r7, #28]
 8004326:	4401      	add	r1, r0
 8004328:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800432c:	4313      	orrs	r3, r2
 800432e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800433c:	691a      	ldr	r2, [r3, #16]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004346:	69b9      	ldr	r1, [r7, #24]
 8004348:	0148      	lsls	r0, r1, #5
 800434a:	69f9      	ldr	r1, [r7, #28]
 800434c:	4401      	add	r1, r0
 800434e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004352:	4313      	orrs	r3, r2
 8004354:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	78db      	ldrb	r3, [r3, #3]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d11f      	bne.n	800439e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	4413      	add	r3, r2
 8004366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	0151      	lsls	r1, r2, #5
 8004370:	69fa      	ldr	r2, [r7, #28]
 8004372:	440a      	add	r2, r1
 8004374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004378:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800437c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	0151      	lsls	r1, r2, #5
 8004390:	69fa      	ldr	r2, [r7, #28]
 8004392:	440a      	add	r2, r1
 8004394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004398:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800439c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800439e:	79fb      	ldrb	r3, [r7, #7]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d14b      	bne.n	800443c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d009      	beq.n	80043c0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b8:	461a      	mov	r2, r3
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	78db      	ldrb	r3, [r3, #3]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d128      	bne.n	800441a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d110      	bne.n	80043fa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	0151      	lsls	r1, r2, #5
 80043ea:	69fa      	ldr	r2, [r7, #28]
 80043ec:	440a      	add	r2, r1
 80043ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043f6:	6013      	str	r3, [r2, #0]
 80043f8:	e00f      	b.n	800441a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	4413      	add	r3, r2
 8004402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	0151      	lsls	r1, r2, #5
 800440c:	69fa      	ldr	r2, [r7, #28]
 800440e:	440a      	add	r2, r1
 8004410:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004418:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	015a      	lsls	r2, r3, #5
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	4413      	add	r3, r2
 8004422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	0151      	lsls	r1, r2, #5
 800442c:	69fa      	ldr	r2, [r7, #28]
 800442e:	440a      	add	r2, r1
 8004430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004434:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	e12f      	b.n	800469c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	015a      	lsls	r2, r3, #5
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	4413      	add	r3, r2
 8004444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	0151      	lsls	r1, r2, #5
 800444e:	69fa      	ldr	r2, [r7, #28]
 8004450:	440a      	add	r2, r1
 8004452:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004456:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800445a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	78db      	ldrb	r3, [r3, #3]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d015      	beq.n	8004490 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 8117 	beq.w	800469c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	2101      	movs	r1, #1
 8004480:	fa01 f303 	lsl.w	r3, r1, r3
 8004484:	69f9      	ldr	r1, [r7, #28]
 8004486:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800448a:	4313      	orrs	r3, r2
 800448c:	634b      	str	r3, [r1, #52]	; 0x34
 800448e:	e105      	b.n	800469c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449c:	2b00      	cmp	r3, #0
 800449e:	d110      	bne.n	80044c2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	0151      	lsls	r1, r2, #5
 80044b2:	69fa      	ldr	r2, [r7, #28]
 80044b4:	440a      	add	r2, r1
 80044b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	e00f      	b.n	80044e2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	0151      	lsls	r1, r2, #5
 80044d4:	69fa      	ldr	r2, [r7, #28]
 80044d6:	440a      	add	r2, r1
 80044d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	68d9      	ldr	r1, [r3, #12]
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	781a      	ldrb	r2, [r3, #0]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	b298      	uxth	r0, r3
 80044f0:	79fb      	ldrb	r3, [r7, #7]
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	4603      	mov	r3, r0
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 fa2b 	bl	8004952 <USB_WritePacket>
 80044fc:	e0ce      	b.n	800469c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	015a      	lsls	r2, r3, #5
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	4413      	add	r3, r2
 8004506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	0151      	lsls	r1, r2, #5
 8004510:	69fa      	ldr	r2, [r7, #28]
 8004512:	440a      	add	r2, r1
 8004514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004518:	0cdb      	lsrs	r3, r3, #19
 800451a:	04db      	lsls	r3, r3, #19
 800451c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	4413      	add	r3, r2
 8004526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	0151      	lsls	r1, r2, #5
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	440a      	add	r2, r1
 8004534:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004538:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800453c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004540:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d126      	bne.n	8004598 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	4413      	add	r3, r2
 8004552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004560:	69b9      	ldr	r1, [r7, #24]
 8004562:	0148      	lsls	r0, r1, #5
 8004564:	69f9      	ldr	r1, [r7, #28]
 8004566:	4401      	add	r1, r0
 8004568:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800456c:	4313      	orrs	r3, r2
 800456e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	4413      	add	r3, r2
 8004578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	0151      	lsls	r1, r2, #5
 8004582:	69fa      	ldr	r2, [r7, #28]
 8004584:	440a      	add	r2, r1
 8004586:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800458a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800458e:	6113      	str	r3, [r2, #16]
 8004590:	e036      	b.n	8004600 <USB_EPStartXfer+0x3dc>
 8004592:	bf00      	nop
 8004594:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	695a      	ldr	r2, [r3, #20]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	4413      	add	r3, r2
 80045a2:	1e5a      	subs	r2, r3, #1
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ac:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	8afb      	ldrh	r3, [r7, #22]
 80045be:	04d9      	lsls	r1, r3, #19
 80045c0:	4b39      	ldr	r3, [pc, #228]	; (80046a8 <USB_EPStartXfer+0x484>)
 80045c2:	400b      	ands	r3, r1
 80045c4:	69b9      	ldr	r1, [r7, #24]
 80045c6:	0148      	lsls	r0, r1, #5
 80045c8:	69f9      	ldr	r1, [r7, #28]
 80045ca:	4401      	add	r1, r0
 80045cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80045d0:	4313      	orrs	r3, r2
 80045d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e0:	691a      	ldr	r2, [r3, #16]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	8af9      	ldrh	r1, [r7, #22]
 80045e8:	fb01 f303 	mul.w	r3, r1, r3
 80045ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045f0:	69b9      	ldr	r1, [r7, #24]
 80045f2:	0148      	lsls	r0, r1, #5
 80045f4:	69f9      	ldr	r1, [r7, #28]
 80045f6:	4401      	add	r1, r0
 80045f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80045fc:	4313      	orrs	r3, r2
 80045fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004600:	79fb      	ldrb	r3, [r7, #7]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d10d      	bne.n	8004622 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d009      	beq.n	8004622 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	68d9      	ldr	r1, [r3, #12]
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	4413      	add	r3, r2
 800461a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461e:	460a      	mov	r2, r1
 8004620:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	78db      	ldrb	r3, [r3, #3]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d128      	bne.n	800467c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004636:	2b00      	cmp	r3, #0
 8004638:	d110      	bne.n	800465c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	0151      	lsls	r1, r2, #5
 800464c:	69fa      	ldr	r2, [r7, #28]
 800464e:	440a      	add	r2, r1
 8004650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004654:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	e00f      	b.n	800467c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	0151      	lsls	r1, r2, #5
 800466e:	69fa      	ldr	r2, [r7, #28]
 8004670:	440a      	add	r2, r1
 8004672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	0151      	lsls	r1, r2, #5
 800468e:	69fa      	ldr	r2, [r7, #28]
 8004690:	440a      	add	r2, r1
 8004692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004696:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800469a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3720      	adds	r7, #32
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	1ff80000 	.word	0x1ff80000

080046ac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b087      	sub	sp, #28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	4613      	mov	r3, r2
 80046b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	785b      	ldrb	r3, [r3, #1]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	f040 80cd 	bne.w	8004868 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d132      	bne.n	800473c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	0151      	lsls	r1, r2, #5
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	440a      	add	r2, r1
 80046ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	4413      	add	r3, r2
 8004702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	0151      	lsls	r1, r2, #5
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	440a      	add	r2, r1
 8004710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004714:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004718:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	015a      	lsls	r2, r3, #5
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	4413      	add	r3, r2
 8004722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	0151      	lsls	r1, r2, #5
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	440a      	add	r2, r1
 8004730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004734:	0cdb      	lsrs	r3, r3, #19
 8004736:	04db      	lsls	r3, r3, #19
 8004738:	6113      	str	r3, [r2, #16]
 800473a:	e04e      	b.n	80047da <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	4413      	add	r3, r2
 8004744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	0151      	lsls	r1, r2, #5
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	440a      	add	r2, r1
 8004752:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004756:	0cdb      	lsrs	r3, r3, #19
 8004758:	04db      	lsls	r3, r3, #19
 800475a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	0151      	lsls	r1, r2, #5
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	440a      	add	r2, r1
 8004772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004776:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800477a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800477e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	695a      	ldr	r2, [r3, #20]
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	429a      	cmp	r2, r3
 800478a:	d903      	bls.n	8004794 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	0151      	lsls	r1, r2, #5
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	440a      	add	r2, r1
 80047aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c0:	691a      	ldr	r2, [r3, #16]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047ca:	6939      	ldr	r1, [r7, #16]
 80047cc:	0148      	lsls	r0, r1, #5
 80047ce:	6979      	ldr	r1, [r7, #20]
 80047d0:	4401      	add	r1, r0
 80047d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80047d6:	4313      	orrs	r3, r2
 80047d8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80047da:	79fb      	ldrb	r3, [r7, #7]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d11e      	bne.n	800481e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d009      	beq.n	80047fc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f4:	461a      	mov	r2, r3
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	0151      	lsls	r1, r2, #5
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	440a      	add	r2, r1
 8004812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004816:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	e092      	b.n	8004944 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	015a      	lsls	r2, r3, #5
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	4413      	add	r3, r2
 8004826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	0151      	lsls	r1, r2, #5
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	440a      	add	r2, r1
 8004834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004838:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800483c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d07e      	beq.n	8004944 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	2101      	movs	r1, #1
 8004858:	fa01 f303 	lsl.w	r3, r1, r3
 800485c:	6979      	ldr	r1, [r7, #20]
 800485e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004862:	4313      	orrs	r3, r2
 8004864:	634b      	str	r3, [r1, #52]	; 0x34
 8004866:	e06d      	b.n	8004944 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	4413      	add	r3, r2
 8004870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	0151      	lsls	r1, r2, #5
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	440a      	add	r2, r1
 800487e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004882:	0cdb      	lsrs	r3, r3, #19
 8004884:	04db      	lsls	r3, r3, #19
 8004886:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	4413      	add	r3, r2
 8004890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	0151      	lsls	r1, r2, #5
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	440a      	add	r2, r1
 800489e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048aa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	0151      	lsls	r1, r2, #5
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	440a      	add	r2, r1
 80048d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e8:	691a      	ldr	r2, [r3, #16]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048f2:	6939      	ldr	r1, [r7, #16]
 80048f4:	0148      	lsls	r0, r1, #5
 80048f6:	6979      	ldr	r1, [r7, #20]
 80048f8:	4401      	add	r1, r0
 80048fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80048fe:	4313      	orrs	r3, r2
 8004900:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004902:	79fb      	ldrb	r3, [r7, #7]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d10d      	bne.n	8004924 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d009      	beq.n	8004924 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	68d9      	ldr	r1, [r3, #12]
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	4413      	add	r3, r2
 800491c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004920:	460a      	mov	r2, r1
 8004922:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	4413      	add	r3, r2
 800492c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	0151      	lsls	r1, r2, #5
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	440a      	add	r2, r1
 800493a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800493e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004942:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	371c      	adds	r7, #28
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004952:	b480      	push	{r7}
 8004954:	b089      	sub	sp, #36	; 0x24
 8004956:	af00      	add	r7, sp, #0
 8004958:	60f8      	str	r0, [r7, #12]
 800495a:	60b9      	str	r1, [r7, #8]
 800495c:	4611      	mov	r1, r2
 800495e:	461a      	mov	r2, r3
 8004960:	460b      	mov	r3, r1
 8004962:	71fb      	strb	r3, [r7, #7]
 8004964:	4613      	mov	r3, r2
 8004966:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004970:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004974:	2b00      	cmp	r3, #0
 8004976:	d11a      	bne.n	80049ae <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004978:	88bb      	ldrh	r3, [r7, #4]
 800497a:	3303      	adds	r3, #3
 800497c:	089b      	lsrs	r3, r3, #2
 800497e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004980:	2300      	movs	r3, #0
 8004982:	61bb      	str	r3, [r7, #24]
 8004984:	e00f      	b.n	80049a6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004986:	79fb      	ldrb	r3, [r7, #7]
 8004988:	031a      	lsls	r2, r3, #12
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	4413      	add	r3, r2
 800498e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004992:	461a      	mov	r2, r3
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6013      	str	r3, [r2, #0]
      pSrc++;
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	3304      	adds	r3, #4
 800499e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	3301      	adds	r3, #1
 80049a4:	61bb      	str	r3, [r7, #24]
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d3eb      	bcc.n	8004986 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3724      	adds	r7, #36	; 0x24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80049bc:	b480      	push	{r7}
 80049be:	b089      	sub	sp, #36	; 0x24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	4613      	mov	r3, r2
 80049c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80049d2:	88fb      	ldrh	r3, [r7, #6]
 80049d4:	3303      	adds	r3, #3
 80049d6:	089b      	lsrs	r3, r3, #2
 80049d8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80049da:	2300      	movs	r3, #0
 80049dc:	61bb      	str	r3, [r7, #24]
 80049de:	e00b      	b.n	80049f8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	3304      	adds	r3, #4
 80049f0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	3301      	adds	r3, #1
 80049f6:	61bb      	str	r3, [r7, #24]
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d3ef      	bcc.n	80049e0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004a00:	69fb      	ldr	r3, [r7, #28]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3724      	adds	r7, #36	; 0x24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b085      	sub	sp, #20
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
 8004a16:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	785b      	ldrb	r3, [r3, #1]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d12c      	bne.n	8004a84 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	db12      	blt.n	8004a62 <USB_EPSetStall+0x54>
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00f      	beq.n	8004a62 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	015a      	lsls	r2, r3, #5
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	4413      	add	r3, r2
 8004a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	0151      	lsls	r1, r2, #5
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	440a      	add	r2, r1
 8004a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a60:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	0151      	lsls	r1, r2, #5
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	440a      	add	r2, r1
 8004a78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	e02b      	b.n	8004adc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	db12      	blt.n	8004abc <USB_EPSetStall+0xae>
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00f      	beq.n	8004abc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	0151      	lsls	r1, r2, #5
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	440a      	add	r2, r1
 8004ab2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ab6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004aba:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	0151      	lsls	r1, r2, #5
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	440a      	add	r2, r1
 8004ad2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ad6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ada:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004aea:	b480      	push	{r7}
 8004aec:	b085      	sub	sp, #20
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	785b      	ldrb	r3, [r3, #1]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d128      	bne.n	8004b58 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	0151      	lsls	r1, r2, #5
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	440a      	add	r2, r1
 8004b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b24:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	78db      	ldrb	r3, [r3, #3]
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d003      	beq.n	8004b36 <USB_EPClearStall+0x4c>
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	78db      	ldrb	r3, [r3, #3]
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d138      	bne.n	8004ba8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	0151      	lsls	r1, r2, #5
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	440a      	add	r2, r1
 8004b4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	e027      	b.n	8004ba8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	0151      	lsls	r1, r2, #5
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	440a      	add	r2, r1
 8004b6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b76:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	78db      	ldrb	r3, [r3, #3]
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d003      	beq.n	8004b88 <USB_EPClearStall+0x9e>
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	78db      	ldrb	r3, [r3, #3]
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d10f      	bne.n	8004ba8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	015a      	lsls	r2, r3, #5
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	0151      	lsls	r1, r2, #5
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	440a      	add	r2, r1
 8004b9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b085      	sub	sp, #20
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bd4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004bd8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	78fb      	ldrb	r3, [r7, #3]
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004bea:	68f9      	ldr	r1, [r7, #12]
 8004bec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b084      	sub	sp, #16
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c1c:	f023 0302 	bic.w	r3, r3, #2
 8004c20:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004c22:	2003      	movs	r0, #3
 8004c24:	f7fb fcd4 	bl	80005d0 <HAL_Delay>

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b084      	sub	sp, #16
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c4c:	f043 0302 	orr.w	r3, r3, #2
 8004c50:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004c52:	2003      	movs	r0, #3
 8004c54:	f7fb fcbc 	bl	80005d0 <HAL_Delay>

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b085      	sub	sp, #20
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	4013      	ands	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	0c1b      	lsrs	r3, r3, #16
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	b29b      	uxth	r3, r3
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3714      	adds	r7, #20
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004d00:	78fb      	ldrb	r3, [r7, #3]
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	460b      	mov	r3, r1
 8004d36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004d50:	78fb      	ldrb	r3, [r7, #3]
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	fa22 f303 	lsr.w	r3, r2, r3
 8004d5c:	01db      	lsls	r3, r3, #7
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004d66:	78fb      	ldrb	r3, [r7, #3]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	4013      	ands	r3, r2
 8004d78:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d7a:	68bb      	ldr	r3, [r7, #8]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	371c      	adds	r7, #28
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	f003 0301 	and.w	r3, r3, #1
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dbe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004dc2:	f023 0307 	bic.w	r3, r3, #7
 8004dc6:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f003 0306 	and.w	r3, r3, #6
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	d109      	bne.n	8004dec <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de6:	f043 0303 	orr.w	r3, r3, #3
 8004dea:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dfe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
	...

08004e10 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	607a      	str	r2, [r7, #4]
 8004e1c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	333c      	adds	r3, #60	; 0x3c
 8004e26:	3304      	adds	r3, #4
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	4a26      	ldr	r2, [pc, #152]	; (8004ec8 <USB_EP0_OutStart+0xb8>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d90a      	bls.n	8004e4a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e44:	d101      	bne.n	8004e4a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	e037      	b.n	8004eba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e50:	461a      	mov	r2, r3
 8004e52:	2300      	movs	r3, #0
 8004e54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e78:	f043 0318 	orr.w	r3, r3, #24
 8004e7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e8c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004e90:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004e92:	7afb      	ldrb	r3, [r7, #11]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d10f      	bne.n	8004eb8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eb2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004eb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	371c      	adds	r7, #28
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	4f54300a 	.word	0x4f54300a

08004ecc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	3301      	adds	r3, #1
 8004edc:	60fb      	str	r3, [r7, #12]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4a13      	ldr	r2, [pc, #76]	; (8004f30 <USB_CoreReset+0x64>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d901      	bls.n	8004eea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e01b      	b.n	8004f22 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	daf2      	bge.n	8004ed8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	f043 0201 	orr.w	r2, r3, #1
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	3301      	adds	r3, #1
 8004f06:	60fb      	str	r3, [r7, #12]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4a09      	ldr	r2, [pc, #36]	; (8004f30 <USB_CoreReset+0x64>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d901      	bls.n	8004f14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e006      	b.n	8004f22 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d0f0      	beq.n	8004f02 <USB_CoreReset+0x36>

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	00030d40 	.word	0x00030d40

08004f34 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004f40:	2308      	movs	r3, #8
 8004f42:	2203      	movs	r2, #3
 8004f44:	2181      	movs	r1, #129	; 0x81
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f001 ffed 	bl	8006f26 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_HandleTypeDef));
 8004f52:	2010      	movs	r0, #16
 8004f54:	f002 fa8a 	bl	800746c <malloc>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if (pdev->pClassData == NULL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <USBD_HID_Init+0x3c>
  {
    return USBD_FAIL;
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	e005      	b.n	8004f7c <USBD_HID_Init+0x48>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004f76:	2200      	movs	r2, #0
 8004f78:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8004f90:	2181      	movs	r1, #129	; 0x81
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f001 ffed 	bl	8006f72 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d009      	beq.n	8004fbc <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f002 fa64 	bl	800747c <free>
    pdev->pClassData = NULL;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return USBD_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004fd8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d045      	beq.n	8005082 <USBD_HID_Setup+0xba>
 8004ff6:	2b20      	cmp	r3, #32
 8004ff8:	f040 80d3 	bne.w	80051a2 <USBD_HID_Setup+0x1da>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	785b      	ldrb	r3, [r3, #1]
 8005000:	3b02      	subs	r3, #2
 8005002:	2b09      	cmp	r3, #9
 8005004:	d835      	bhi.n	8005072 <USBD_HID_Setup+0xaa>
 8005006:	a201      	add	r2, pc, #4	; (adr r2, 800500c <USBD_HID_Setup+0x44>)
 8005008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500c:	08005063 	.word	0x08005063
 8005010:	08005043 	.word	0x08005043
 8005014:	08005073 	.word	0x08005073
 8005018:	08005073 	.word	0x08005073
 800501c:	08005073 	.word	0x08005073
 8005020:	08005073 	.word	0x08005073
 8005024:	08005073 	.word	0x08005073
 8005028:	08005073 	.word	0x08005073
 800502c:	08005051 	.word	0x08005051
 8005030:	08005035 	.word	0x08005035
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	885b      	ldrh	r3, [r3, #2]
 8005038:	b2db      	uxtb	r3, r3
 800503a:	461a      	mov	r2, r3
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	601a      	str	r2, [r3, #0]
      break;
 8005040:	e01e      	b.n	8005080 <USBD_HID_Setup+0xb8>

    case HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	2201      	movs	r2, #1
 8005046:	4619      	mov	r1, r3
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f001 f905 	bl	8006258 <USBD_CtlSendData>
      break;
 800504e:	e017      	b.n	8005080 <USBD_HID_Setup+0xb8>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	885b      	ldrh	r3, [r3, #2]
 8005054:	0a1b      	lsrs	r3, r3, #8
 8005056:	b29b      	uxth	r3, r3
 8005058:	b2db      	uxtb	r3, r3
 800505a:	461a      	mov	r2, r3
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	605a      	str	r2, [r3, #4]
      break;
 8005060:	e00e      	b.n	8005080 <USBD_HID_Setup+0xb8>

    case HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	3304      	adds	r3, #4
 8005066:	2201      	movs	r2, #1
 8005068:	4619      	mov	r1, r3
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f001 f8f4 	bl	8006258 <USBD_CtlSendData>
      break;
 8005070:	e006      	b.n	8005080 <USBD_HID_Setup+0xb8>

    default:
      USBD_CtlError (pdev, req);
 8005072:	6839      	ldr	r1, [r7, #0]
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f001 f884 	bl	8006182 <USBD_CtlError>
      ret = USBD_FAIL;
 800507a:	2302      	movs	r3, #2
 800507c:	75fb      	strb	r3, [r7, #23]
      break;
 800507e:	bf00      	nop
    }
    break;
 8005080:	e096      	b.n	80051b0 <USBD_HID_Setup+0x1e8>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	785b      	ldrb	r3, [r3, #1]
 8005086:	2b0b      	cmp	r3, #11
 8005088:	f200 8083 	bhi.w	8005192 <USBD_HID_Setup+0x1ca>
 800508c:	a201      	add	r2, pc, #4	; (adr r2, 8005094 <USBD_HID_Setup+0xcc>)
 800508e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005092:	bf00      	nop
 8005094:	080050c5 	.word	0x080050c5
 8005098:	08005193 	.word	0x08005193
 800509c:	08005193 	.word	0x08005193
 80050a0:	08005193 	.word	0x08005193
 80050a4:	08005193 	.word	0x08005193
 80050a8:	08005193 	.word	0x08005193
 80050ac:	080050ed 	.word	0x080050ed
 80050b0:	08005193 	.word	0x08005193
 80050b4:	08005193 	.word	0x08005193
 80050b8:	08005193 	.word	0x08005193
 80050bc:	08005145 	.word	0x08005145
 80050c0:	0800516d 	.word	0x0800516d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80050ca:	2b03      	cmp	r3, #3
 80050cc:	d107      	bne.n	80050de <USBD_HID_Setup+0x116>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80050ce:	f107 030e 	add.w	r3, r7, #14
 80050d2:	2202      	movs	r2, #2
 80050d4:	4619      	mov	r1, r3
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f001 f8be 	bl	8006258 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80050dc:	e060      	b.n	80051a0 <USBD_HID_Setup+0x1d8>
        USBD_CtlError (pdev, req);
 80050de:	6839      	ldr	r1, [r7, #0]
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f001 f84e 	bl	8006182 <USBD_CtlError>
			  ret = USBD_FAIL;
 80050e6:	2302      	movs	r3, #2
 80050e8:	75fb      	strb	r3, [r7, #23]
      break;
 80050ea:	e059      	b.n	80051a0 <USBD_HID_Setup+0x1d8>

    case USB_REQ_GET_DESCRIPTOR:
      if(req->wValue >> 8 == HID_REPORT_DESC)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	885b      	ldrh	r3, [r3, #2]
 80050f0:	0a1b      	lsrs	r3, r3, #8
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	2b22      	cmp	r3, #34	; 0x22
 80050f6:	d108      	bne.n	800510a <USBD_HID_Setup+0x142>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE , req->wLength);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	88db      	ldrh	r3, [r3, #6]
 80050fc:	2b4a      	cmp	r3, #74	; 0x4a
 80050fe:	bf28      	it	cs
 8005100:	234a      	movcs	r3, #74	; 0x4a
 8005102:	83fb      	strh	r3, [r7, #30]
        pbuf = HID_MOUSE_ReportDesc;
 8005104:	4b2d      	ldr	r3, [pc, #180]	; (80051bc <USBD_HID_Setup+0x1f4>)
 8005106:	61bb      	str	r3, [r7, #24]
 8005108:	e015      	b.n	8005136 <USBD_HID_Setup+0x16e>
      }
      else if(req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	885b      	ldrh	r3, [r3, #2]
 800510e:	0a1b      	lsrs	r3, r3, #8
 8005110:	b29b      	uxth	r3, r3
 8005112:	2b21      	cmp	r3, #33	; 0x21
 8005114:	d108      	bne.n	8005128 <USBD_HID_Setup+0x160>
      {
        pbuf = USBD_HID_Desc;
 8005116:	4b2a      	ldr	r3, [pc, #168]	; (80051c0 <USBD_HID_Setup+0x1f8>)
 8005118:	61bb      	str	r3, [r7, #24]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	88db      	ldrh	r3, [r3, #6]
 800511e:	2b09      	cmp	r3, #9
 8005120:	bf28      	it	cs
 8005122:	2309      	movcs	r3, #9
 8005124:	83fb      	strh	r3, [r7, #30]
 8005126:	e006      	b.n	8005136 <USBD_HID_Setup+0x16e>
      }
      else
      {
        USBD_CtlError (pdev, req);
 8005128:	6839      	ldr	r1, [r7, #0]
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f001 f829 	bl	8006182 <USBD_CtlError>
        ret = USBD_FAIL;
 8005130:	2302      	movs	r3, #2
 8005132:	75fb      	strb	r3, [r7, #23]
        break;
 8005134:	e034      	b.n	80051a0 <USBD_HID_Setup+0x1d8>
      }
      USBD_CtlSendData (pdev, pbuf, len);
 8005136:	8bfb      	ldrh	r3, [r7, #30]
 8005138:	461a      	mov	r2, r3
 800513a:	69b9      	ldr	r1, [r7, #24]
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f001 f88b 	bl	8006258 <USBD_CtlSendData>
      break;
 8005142:	e02d      	b.n	80051a0 <USBD_HID_Setup+0x1d8>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800514a:	2b03      	cmp	r3, #3
 800514c:	d107      	bne.n	800515e <USBD_HID_Setup+0x196>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	3308      	adds	r3, #8
 8005152:	2201      	movs	r2, #1
 8005154:	4619      	mov	r1, r3
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f001 f87e 	bl	8006258 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800515c:	e020      	b.n	80051a0 <USBD_HID_Setup+0x1d8>
        USBD_CtlError (pdev, req);
 800515e:	6839      	ldr	r1, [r7, #0]
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f001 f80e 	bl	8006182 <USBD_CtlError>
			  ret = USBD_FAIL;
 8005166:	2302      	movs	r3, #2
 8005168:	75fb      	strb	r3, [r7, #23]
      break;
 800516a:	e019      	b.n	80051a0 <USBD_HID_Setup+0x1d8>

    case USB_REQ_SET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005172:	2b03      	cmp	r3, #3
 8005174:	d106      	bne.n	8005184 <USBD_HID_Setup+0x1bc>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	885b      	ldrh	r3, [r3, #2]
 800517a:	b2db      	uxtb	r3, r3
 800517c:	461a      	mov	r2, r3
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8005182:	e00d      	b.n	80051a0 <USBD_HID_Setup+0x1d8>
        USBD_CtlError (pdev, req);
 8005184:	6839      	ldr	r1, [r7, #0]
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fffb 	bl	8006182 <USBD_CtlError>
			  ret = USBD_FAIL;
 800518c:	2302      	movs	r3, #2
 800518e:	75fb      	strb	r3, [r7, #23]
      break;
 8005190:	e006      	b.n	80051a0 <USBD_HID_Setup+0x1d8>

    default:
      USBD_CtlError (pdev, req);
 8005192:	6839      	ldr	r1, [r7, #0]
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 fff4 	bl	8006182 <USBD_CtlError>
      ret = USBD_FAIL;
 800519a:	2302      	movs	r3, #2
 800519c:	75fb      	strb	r3, [r7, #23]
      break;
 800519e:	bf00      	nop
    }
    break;
 80051a0:	e006      	b.n	80051b0 <USBD_HID_Setup+0x1e8>

  default:
    USBD_CtlError (pdev, req);
 80051a2:	6839      	ldr	r1, [r7, #0]
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 ffec 	bl	8006182 <USBD_CtlError>
    ret = USBD_FAIL;
 80051aa:	2302      	movs	r3, #2
 80051ac:	75fb      	strb	r3, [r7, #23]
    break;
 80051ae:	bf00      	nop
  }

  return ret;
 80051b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3720      	adds	r7, #32
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	200000c4 	.word	0x200000c4
 80051c0:	200000ac 	.word	0x200000ac

080051c4 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport     (USBD_HandleTypeDef  *pdev,
                                 uint8_t *report,
                                 uint16_t len)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	4613      	mov	r3, r2
 80051d0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*)pdev->pClassData;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80051d8:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d10c      	bne.n	80051fe <USBD_HID_SendReport+0x3a>
  {
    if(hhid->state == HID_IDLE)
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	7b1b      	ldrb	r3, [r3, #12]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d108      	bne.n	80051fe <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	2201      	movs	r2, #1
 80051f0:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit (pdev,
 80051f2:	88fb      	ldrh	r3, [r7, #6]
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	2181      	movs	r1, #129	; 0x81
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f001 ff62 	bl	80070c2 <USBD_LL_Transmit>
                        HID_EPIN_ADDR,
                        report,
                        len);
    }
  }
  return USBD_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3718      	adds	r7, #24
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc (uint16_t *length)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_HID_CfgFSDesc);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2222      	movs	r2, #34	; 0x22
 8005214:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8005216:	4b03      	ldr	r3, [pc, #12]	; (8005224 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005218:	4618      	mov	r0, r3
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	20000040 	.word	0x20000040

08005228 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc (uint16_t *length)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_HID_CfgHSDesc);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2222      	movs	r2, #34	; 0x22
 8005234:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8005236:	4b03      	ldr	r3, [pc, #12]	; (8005244 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005238:	4618      	mov	r0, r3
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	20000064 	.word	0x20000064

08005248 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_HID_OtherSpeedCfgDesc);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2222      	movs	r2, #34	; 0x22
 8005254:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8005256:	4b03      	ldr	r3, [pc, #12]	; (8005264 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005258:	4618      	mov	r0, r3
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	20000088 	.word	0x20000088

08005268 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	460b      	mov	r3, r1
 8005272:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800527a:	2200      	movs	r2, #0
 800527c:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc (uint16_t *length)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_HID_DeviceQualifierDesc);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	220a      	movs	r2, #10
 8005298:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800529a:	4b03      	ldr	r3, [pc, #12]	; (80052a8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800529c:	4618      	mov	r0, r3
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	200000b8 	.word	0x200000b8

080052ac <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	4613      	mov	r3, r2
 80052b8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d101      	bne.n	80052c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80052c0:	2302      	movs	r3, #2
 80052c2:	e01a      	b.n	80052fa <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d003      	beq.n	80052e4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	79fa      	ldrb	r2, [r7, #7]
 80052f0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f001 fdb0 	bl	8006e58 <USBD_LL_Init>

  return USBD_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005302:	b480      	push	{r7}
 8005304:	b085      	sub	sp, #20
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800530c:	2300      	movs	r3, #0
 800530e:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d006      	beq.n	8005324 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	73fb      	strb	r3, [r7, #15]
 8005322:	e001      	b.n	8005328 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005324:	2302      	movs	r3, #2
 8005326:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005328:	7bfb      	ldrb	r3, [r7, #15]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b082      	sub	sp, #8
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f001 fdd6 	bl	8006ef0 <USBD_LL_Start>

  return USBD_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	460b      	mov	r3, r1
 800536e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8005370:	2302      	movs	r3, #2
 8005372:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00c      	beq.n	8005398 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	78fa      	ldrb	r2, [r7, #3]
 8005388:	4611      	mov	r1, r2
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	4798      	blx	r3
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005394:	2300      	movs	r3, #0
 8005396:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005398:	7bfb      	ldrb	r3, [r7, #15]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b082      	sub	sp, #8
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	460b      	mov	r3, r1
 80053ac:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	78fa      	ldrb	r2, [r7, #3]
 80053b8:	4611      	mov	r1, r2
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	4798      	blx	r3
  return USBD_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80053d8:	6839      	ldr	r1, [r7, #0]
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 fe94 	bl	8006108 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80053ee:	461a      	mov	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80053fc:	f003 031f 	and.w	r3, r3, #31
 8005400:	2b01      	cmp	r3, #1
 8005402:	d00c      	beq.n	800541e <USBD_LL_SetupStage+0x56>
 8005404:	2b01      	cmp	r3, #1
 8005406:	d302      	bcc.n	800540e <USBD_LL_SetupStage+0x46>
 8005408:	2b02      	cmp	r3, #2
 800540a:	d010      	beq.n	800542e <USBD_LL_SetupStage+0x66>
 800540c:	e017      	b.n	800543e <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005414:	4619      	mov	r1, r3
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fa04 	bl	8005824 <USBD_StdDevReq>
    break;
 800541c:	e01a      	b.n	8005454 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005424:	4619      	mov	r1, r3
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fa66 	bl	80058f8 <USBD_StdItfReq>
    break;
 800542c:	e012      	b.n	8005454 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005434:	4619      	mov	r1, r3
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 faa4 	bl	8005984 <USBD_StdEPReq>
    break;
 800543c:	e00a      	b.n	8005454 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8005444:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005448:	b2db      	uxtb	r3, r3
 800544a:	4619      	mov	r1, r3
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f001 fdaf 	bl	8006fb0 <USBD_LL_StallEP>
    break;
 8005452:	bf00      	nop
  }

  return USBD_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b086      	sub	sp, #24
 8005462:	af00      	add	r7, sp, #0
 8005464:	60f8      	str	r0, [r7, #12]
 8005466:	460b      	mov	r3, r1
 8005468:	607a      	str	r2, [r7, #4]
 800546a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800546c:	7afb      	ldrb	r3, [r7, #11]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d14b      	bne.n	800550a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005478:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8005480:	2b03      	cmp	r3, #3
 8005482:	d134      	bne.n	80054ee <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	429a      	cmp	r2, r3
 800548e:	d919      	bls.n	80054c4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	68da      	ldr	r2, [r3, #12]
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	1ad2      	subs	r2, r2, r3
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	68da      	ldr	r2, [r3, #12]
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d203      	bcs.n	80054b2 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	e002      	b.n	80054b8 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	461a      	mov	r2, r3
 80054ba:	6879      	ldr	r1, [r7, #4]
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 fef9 	bl	80062b4 <USBD_CtlContinueRx>
 80054c2:	e038      	b.n	8005536 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00a      	beq.n	80054e6 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d105      	bne.n	80054e6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f000 fef6 	bl	80062d8 <USBD_CtlSendStatus>
 80054ec:	e023      	b.n	8005536 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80054f4:	2b05      	cmp	r3, #5
 80054f6:	d11e      	bne.n	8005536 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8005500:	2100      	movs	r1, #0
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f001 fd54 	bl	8006fb0 <USBD_LL_StallEP>
 8005508:	e015      	b.n	8005536 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00d      	beq.n	8005532 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800551c:	2b03      	cmp	r3, #3
 800551e:	d108      	bne.n	8005532 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	7afa      	ldrb	r2, [r7, #11]
 800552a:	4611      	mov	r1, r2
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	4798      	blx	r3
 8005530:	e001      	b.n	8005536 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005532:	2302      	movs	r3, #2
 8005534:	e000      	b.n	8005538 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3718      	adds	r7, #24
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	460b      	mov	r3, r1
 800554a:	607a      	str	r2, [r7, #4]
 800554c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800554e:	7afb      	ldrb	r3, [r7, #11]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d17f      	bne.n	8005654 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	3314      	adds	r3, #20
 8005558:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8005560:	2b02      	cmp	r3, #2
 8005562:	d15c      	bne.n	800561e <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	429a      	cmp	r2, r3
 800556e:	d915      	bls.n	800559c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	68da      	ldr	r2, [r3, #12]
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	1ad2      	subs	r2, r2, r3
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	b29b      	uxth	r3, r3
 8005584:	461a      	mov	r2, r3
 8005586:	6879      	ldr	r1, [r7, #4]
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f000 fe81 	bl	8006290 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800558e:	2300      	movs	r3, #0
 8005590:	2200      	movs	r2, #0
 8005592:	2100      	movs	r1, #0
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f001 fdb7 	bl	8007108 <USBD_LL_PrepareReceive>
 800559a:	e04e      	b.n	800563a <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	6912      	ldr	r2, [r2, #16]
 80055a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80055a8:	fb02 f201 	mul.w	r2, r2, r1
 80055ac:	1a9b      	subs	r3, r3, r2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d11c      	bne.n	80055ec <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	689a      	ldr	r2, [r3, #8]
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d316      	bcc.n	80055ec <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d20f      	bcs.n	80055ec <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80055cc:	2200      	movs	r2, #0
 80055ce:	2100      	movs	r1, #0
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 fe5d 	bl	8006290 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80055de:	2300      	movs	r3, #0
 80055e0:	2200      	movs	r2, #0
 80055e2:	2100      	movs	r1, #0
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f001 fd8f 	bl	8007108 <USBD_LL_PrepareReceive>
 80055ea:	e026      	b.n	800563a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00a      	beq.n	800560e <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80055fe:	2b03      	cmp	r3, #3
 8005600:	d105      	bne.n	800560e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800560e:	2180      	movs	r1, #128	; 0x80
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f001 fccd 	bl	8006fb0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f000 fe71 	bl	80062fe <USBD_CtlReceiveStatus>
 800561c:	e00d      	b.n	800563a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8005624:	2b04      	cmp	r3, #4
 8005626:	d004      	beq.n	8005632 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800562e:	2b00      	cmp	r3, #0
 8005630:	d103      	bne.n	800563a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005632:	2180      	movs	r1, #128	; 0x80
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f001 fcbb 	bl	8006fb0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8005640:	2b01      	cmp	r3, #1
 8005642:	d11d      	bne.n	8005680 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f7ff fe82 	bl	800534e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8005652:	e015      	b.n	8005680 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00d      	beq.n	800567c <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8005666:	2b03      	cmp	r3, #3
 8005668:	d108      	bne.n	800567c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	7afa      	ldrb	r2, [r7, #11]
 8005674:	4611      	mov	r1, r2
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	4798      	blx	r3
 800567a:	e001      	b.n	8005680 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800567c:	2302      	movs	r3, #2
 800567e:	e000      	b.n	8005682 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3718      	adds	r7, #24
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b082      	sub	sp, #8
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005692:	2340      	movs	r3, #64	; 0x40
 8005694:	2200      	movs	r2, #0
 8005696:	2100      	movs	r1, #0
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f001 fc44 	bl	8006f26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2240      	movs	r2, #64	; 0x40
 80056aa:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80056ae:	2340      	movs	r3, #64	; 0x40
 80056b0:	2200      	movs	r2, #0
 80056b2:	2180      	movs	r1, #128	; 0x80
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f001 fc36 	bl	8006f26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2240      	movs	r2, #64	; 0x40
 80056c4:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d009      	beq.n	8005702 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6852      	ldr	r2, [r2, #4]
 80056fa:	b2d2      	uxtb	r2, r2
 80056fc:	4611      	mov	r1, r2
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	4798      	blx	r3
  }

  return USBD_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3708      	adds	r7, #8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	460b      	mov	r3, r1
 8005716:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	78fa      	ldrb	r2, [r7, #3]
 800571c:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2204      	movs	r2, #4
 8005744:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8005756:	b480      	push	{r7}
 8005758:	b083      	sub	sp, #12
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005786:	2b03      	cmp	r3, #3
 8005788:	d10b      	bne.n	80057a2 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d005      	beq.n	80057a2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	460b      	mov	r3, r1
 80057b6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	460b      	mov	r3, r1
 80057d0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b082      	sub	sp, #8
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	6852      	ldr	r2, [r2, #4]
 8005812:	b2d2      	uxtb	r2, r2
 8005814:	4611      	mov	r1, r2
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	4798      	blx	r3

  return USBD_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800583a:	2b20      	cmp	r3, #32
 800583c:	d004      	beq.n	8005848 <USBD_StdDevReq+0x24>
 800583e:	2b40      	cmp	r3, #64	; 0x40
 8005840:	d002      	beq.n	8005848 <USBD_StdDevReq+0x24>
 8005842:	2b00      	cmp	r3, #0
 8005844:	d008      	beq.n	8005858 <USBD_StdDevReq+0x34>
 8005846:	e04c      	b.n	80058e2 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	6839      	ldr	r1, [r7, #0]
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	4798      	blx	r3
    break;
 8005856:	e049      	b.n	80058ec <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	785b      	ldrb	r3, [r3, #1]
 800585c:	2b09      	cmp	r3, #9
 800585e:	d83a      	bhi.n	80058d6 <USBD_StdDevReq+0xb2>
 8005860:	a201      	add	r2, pc, #4	; (adr r2, 8005868 <USBD_StdDevReq+0x44>)
 8005862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005866:	bf00      	nop
 8005868:	080058b9 	.word	0x080058b9
 800586c:	080058cd 	.word	0x080058cd
 8005870:	080058d7 	.word	0x080058d7
 8005874:	080058c3 	.word	0x080058c3
 8005878:	080058d7 	.word	0x080058d7
 800587c:	0800589b 	.word	0x0800589b
 8005880:	08005891 	.word	0x08005891
 8005884:	080058d7 	.word	0x080058d7
 8005888:	080058af 	.word	0x080058af
 800588c:	080058a5 	.word	0x080058a5
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8005890:	6839      	ldr	r1, [r7, #0]
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f9d2 	bl	8005c3c <USBD_GetDescriptor>
      break;
 8005898:	e022      	b.n	80058e0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800589a:	6839      	ldr	r1, [r7, #0]
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fac7 	bl	8005e30 <USBD_SetAddress>
      break;
 80058a2:	e01d      	b.n	80058e0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80058a4:	6839      	ldr	r1, [r7, #0]
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 fb04 	bl	8005eb4 <USBD_SetConfig>
      break;
 80058ac:	e018      	b.n	80058e0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80058ae:	6839      	ldr	r1, [r7, #0]
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 fb8d 	bl	8005fd0 <USBD_GetConfig>
      break;
 80058b6:	e013      	b.n	80058e0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80058b8:	6839      	ldr	r1, [r7, #0]
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 fbbc 	bl	8006038 <USBD_GetStatus>
      break;
 80058c0:	e00e      	b.n	80058e0 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80058c2:	6839      	ldr	r1, [r7, #0]
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 fbea 	bl	800609e <USBD_SetFeature>
      break;
 80058ca:	e009      	b.n	80058e0 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80058cc:	6839      	ldr	r1, [r7, #0]
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fbf9 	bl	80060c6 <USBD_ClrFeature>
      break;
 80058d4:	e004      	b.n	80058e0 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80058d6:	6839      	ldr	r1, [r7, #0]
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 fc52 	bl	8006182 <USBD_CtlError>
      break;
 80058de:	bf00      	nop
    }
    break;
 80058e0:	e004      	b.n	80058ec <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80058e2:	6839      	ldr	r1, [r7, #0]
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 fc4c 	bl	8006182 <USBD_CtlError>
    break;
 80058ea:	bf00      	nop
  }

  return ret;
 80058ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop

080058f8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800590e:	2b20      	cmp	r3, #32
 8005910:	d003      	beq.n	800591a <USBD_StdItfReq+0x22>
 8005912:	2b40      	cmp	r3, #64	; 0x40
 8005914:	d001      	beq.n	800591a <USBD_StdItfReq+0x22>
 8005916:	2b00      	cmp	r3, #0
 8005918:	d12a      	bne.n	8005970 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005920:	3b01      	subs	r3, #1
 8005922:	2b02      	cmp	r3, #2
 8005924:	d81d      	bhi.n	8005962 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	889b      	ldrh	r3, [r3, #4]
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b01      	cmp	r3, #1
 800592e:	d813      	bhi.n	8005958 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	6839      	ldr	r1, [r7, #0]
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	4798      	blx	r3
 800593e:	4603      	mov	r3, r0
 8005940:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	88db      	ldrh	r3, [r3, #6]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d110      	bne.n	800596c <USBD_StdItfReq+0x74>
 800594a:	7bfb      	ldrb	r3, [r7, #15]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10d      	bne.n	800596c <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 fcc1 	bl	80062d8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8005956:	e009      	b.n	800596c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8005958:	6839      	ldr	r1, [r7, #0]
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 fc11 	bl	8006182 <USBD_CtlError>
      break;
 8005960:	e004      	b.n	800596c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8005962:	6839      	ldr	r1, [r7, #0]
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 fc0c 	bl	8006182 <USBD_CtlError>
      break;
 800596a:	e000      	b.n	800596e <USBD_StdItfReq+0x76>
      break;
 800596c:	bf00      	nop
    }
    break;
 800596e:	e004      	b.n	800597a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005970:	6839      	ldr	r1, [r7, #0]
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 fc05 	bl	8006182 <USBD_CtlError>
    break;
 8005978:	bf00      	nop
  }

  return USBD_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800598e:	2300      	movs	r3, #0
 8005990:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	889b      	ldrh	r3, [r3, #4]
 8005996:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059a0:	2b20      	cmp	r3, #32
 80059a2:	d004      	beq.n	80059ae <USBD_StdEPReq+0x2a>
 80059a4:	2b40      	cmp	r3, #64	; 0x40
 80059a6:	d002      	beq.n	80059ae <USBD_StdEPReq+0x2a>
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d008      	beq.n	80059be <USBD_StdEPReq+0x3a>
 80059ac:	e13b      	b.n	8005c26 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	6839      	ldr	r1, [r7, #0]
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	4798      	blx	r3
    break;
 80059bc:	e138      	b.n	8005c30 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059c6:	2b20      	cmp	r3, #32
 80059c8:	d10a      	bne.n	80059e0 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	6839      	ldr	r1, [r7, #0]
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	4798      	blx	r3
 80059d8:	4603      	mov	r3, r0
 80059da:	73fb      	strb	r3, [r7, #15]

      return ret;
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
 80059de:	e128      	b.n	8005c32 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	785b      	ldrb	r3, [r3, #1]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d03e      	beq.n	8005a66 <USBD_StdEPReq+0xe2>
 80059e8:	2b03      	cmp	r3, #3
 80059ea:	d002      	beq.n	80059f2 <USBD_StdEPReq+0x6e>
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d070      	beq.n	8005ad2 <USBD_StdEPReq+0x14e>
 80059f0:	e113      	b.n	8005c1a <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d002      	beq.n	8005a02 <USBD_StdEPReq+0x7e>
 80059fc:	2b03      	cmp	r3, #3
 80059fe:	d015      	beq.n	8005a2c <USBD_StdEPReq+0xa8>
 8005a00:	e02b      	b.n	8005a5a <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a02:	7bbb      	ldrb	r3, [r7, #14]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00c      	beq.n	8005a22 <USBD_StdEPReq+0x9e>
 8005a08:	7bbb      	ldrb	r3, [r7, #14]
 8005a0a:	2b80      	cmp	r3, #128	; 0x80
 8005a0c:	d009      	beq.n	8005a22 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8005a0e:	7bbb      	ldrb	r3, [r7, #14]
 8005a10:	4619      	mov	r1, r3
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f001 facc 	bl	8006fb0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8005a18:	2180      	movs	r1, #128	; 0x80
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f001 fac8 	bl	8006fb0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005a20:	e020      	b.n	8005a64 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8005a22:	6839      	ldr	r1, [r7, #0]
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 fbac 	bl	8006182 <USBD_CtlError>
        break;
 8005a2a:	e01b      	b.n	8005a64 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	885b      	ldrh	r3, [r3, #2]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10e      	bne.n	8005a52 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005a34:	7bbb      	ldrb	r3, [r7, #14]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00b      	beq.n	8005a52 <USBD_StdEPReq+0xce>
 8005a3a:	7bbb      	ldrb	r3, [r7, #14]
 8005a3c:	2b80      	cmp	r3, #128	; 0x80
 8005a3e:	d008      	beq.n	8005a52 <USBD_StdEPReq+0xce>
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	88db      	ldrh	r3, [r3, #6]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d104      	bne.n	8005a52 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8005a48:	7bbb      	ldrb	r3, [r7, #14]
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f001 faaf 	bl	8006fb0 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fc40 	bl	80062d8 <USBD_CtlSendStatus>

        break;
 8005a58:	e004      	b.n	8005a64 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8005a5a:	6839      	ldr	r1, [r7, #0]
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 fb90 	bl	8006182 <USBD_CtlError>
        break;
 8005a62:	bf00      	nop
      }
      break;
 8005a64:	e0de      	b.n	8005c24 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d002      	beq.n	8005a76 <USBD_StdEPReq+0xf2>
 8005a70:	2b03      	cmp	r3, #3
 8005a72:	d015      	beq.n	8005aa0 <USBD_StdEPReq+0x11c>
 8005a74:	e026      	b.n	8005ac4 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a76:	7bbb      	ldrb	r3, [r7, #14]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00c      	beq.n	8005a96 <USBD_StdEPReq+0x112>
 8005a7c:	7bbb      	ldrb	r3, [r7, #14]
 8005a7e:	2b80      	cmp	r3, #128	; 0x80
 8005a80:	d009      	beq.n	8005a96 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8005a82:	7bbb      	ldrb	r3, [r7, #14]
 8005a84:	4619      	mov	r1, r3
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f001 fa92 	bl	8006fb0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8005a8c:	2180      	movs	r1, #128	; 0x80
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f001 fa8e 	bl	8006fb0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005a94:	e01c      	b.n	8005ad0 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8005a96:	6839      	ldr	r1, [r7, #0]
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 fb72 	bl	8006182 <USBD_CtlError>
        break;
 8005a9e:	e017      	b.n	8005ad0 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	885b      	ldrh	r3, [r3, #2]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d112      	bne.n	8005ace <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005aa8:	7bbb      	ldrb	r3, [r7, #14]
 8005aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d004      	beq.n	8005abc <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8005ab2:	7bbb      	ldrb	r3, [r7, #14]
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f001 fa99 	bl	8006fee <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 fc0b 	bl	80062d8 <USBD_CtlSendStatus>
        }
        break;
 8005ac2:	e004      	b.n	8005ace <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8005ac4:	6839      	ldr	r1, [r7, #0]
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 fb5b 	bl	8006182 <USBD_CtlError>
        break;
 8005acc:	e000      	b.n	8005ad0 <USBD_StdEPReq+0x14c>
        break;
 8005ace:	bf00      	nop
      }
      break;
 8005ad0:	e0a8      	b.n	8005c24 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d002      	beq.n	8005ae2 <USBD_StdEPReq+0x15e>
 8005adc:	2b03      	cmp	r3, #3
 8005ade:	d031      	beq.n	8005b44 <USBD_StdEPReq+0x1c0>
 8005ae0:	e095      	b.n	8005c0e <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ae2:	7bbb      	ldrb	r3, [r7, #14]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d007      	beq.n	8005af8 <USBD_StdEPReq+0x174>
 8005ae8:	7bbb      	ldrb	r3, [r7, #14]
 8005aea:	2b80      	cmp	r3, #128	; 0x80
 8005aec:	d004      	beq.n	8005af8 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8005aee:	6839      	ldr	r1, [r7, #0]
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 fb46 	bl	8006182 <USBD_CtlError>
          break;
 8005af6:	e08f      	b.n	8005c18 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005af8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	da0b      	bge.n	8005b18 <USBD_StdEPReq+0x194>
 8005b00:	7bbb      	ldrb	r3, [r7, #14]
 8005b02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b06:	4613      	mov	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	3310      	adds	r3, #16
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	4413      	add	r3, r2
 8005b14:	3304      	adds	r3, #4
 8005b16:	e00a      	b.n	8005b2e <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8005b18:	7bbb      	ldrb	r3, [r7, #14]
 8005b1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005b1e:	4613      	mov	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4413      	add	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2200      	movs	r2, #0
 8005b34:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2202      	movs	r2, #2
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 fb8b 	bl	8006258 <USBD_CtlSendData>
          break;
 8005b42:	e069      	b.n	8005c18 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8005b44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	da11      	bge.n	8005b70 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005b4c:	7bbb      	ldrb	r3, [r7, #14]
 8005b4e:	f003 020f 	and.w	r2, r3, #15
 8005b52:	6879      	ldr	r1, [r7, #4]
 8005b54:	4613      	mov	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	440b      	add	r3, r1
 8005b5e:	3318      	adds	r3, #24
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d117      	bne.n	8005b96 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8005b66:	6839      	ldr	r1, [r7, #0]
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 fb0a 	bl	8006182 <USBD_CtlError>
            break;
 8005b6e:	e053      	b.n	8005c18 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005b70:	7bbb      	ldrb	r3, [r7, #14]
 8005b72:	f003 020f 	and.w	r2, r3, #15
 8005b76:	6879      	ldr	r1, [r7, #4]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	440b      	add	r3, r1
 8005b82:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d104      	bne.n	8005b96 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8005b8c:	6839      	ldr	r1, [r7, #0]
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 faf7 	bl	8006182 <USBD_CtlError>
            break;
 8005b94:	e040      	b.n	8005c18 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005b96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	da0b      	bge.n	8005bb6 <USBD_StdEPReq+0x232>
 8005b9e:	7bbb      	ldrb	r3, [r7, #14]
 8005ba0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	3310      	adds	r3, #16
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	e00a      	b.n	8005bcc <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8005bb6:	7bbb      	ldrb	r3, [r7, #14]
 8005bb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	4413      	add	r3, r2
 8005bcc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005bce:	7bbb      	ldrb	r3, [r7, #14]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d002      	beq.n	8005bda <USBD_StdEPReq+0x256>
 8005bd4:	7bbb      	ldrb	r3, [r7, #14]
 8005bd6:	2b80      	cmp	r3, #128	; 0x80
 8005bd8:	d103      	bne.n	8005be2 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	601a      	str	r2, [r3, #0]
 8005be0:	e00e      	b.n	8005c00 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8005be2:	7bbb      	ldrb	r3, [r7, #14]
 8005be4:	4619      	mov	r1, r3
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f001 fa20 	bl	800702c <USBD_LL_IsStallEP>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]
 8005bf8:	e002      	b.n	8005c00 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	2202      	movs	r2, #2
 8005c04:	4619      	mov	r1, r3
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 fb26 	bl	8006258 <USBD_CtlSendData>
          break;
 8005c0c:	e004      	b.n	8005c18 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8005c0e:	6839      	ldr	r1, [r7, #0]
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fab6 	bl	8006182 <USBD_CtlError>
        break;
 8005c16:	bf00      	nop
      }
      break;
 8005c18:	e004      	b.n	8005c24 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8005c1a:	6839      	ldr	r1, [r7, #0]
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 fab0 	bl	8006182 <USBD_CtlError>
      break;
 8005c22:	bf00      	nop
    }
    break;
 8005c24:	e004      	b.n	8005c30 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8005c26:	6839      	ldr	r1, [r7, #0]
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 faaa 	bl	8006182 <USBD_CtlError>
    break;
 8005c2e:	bf00      	nop
  }

  return ret;
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
	...

08005c3c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	885b      	ldrh	r3, [r3, #2]
 8005c4a:	0a1b      	lsrs	r3, r3, #8
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	2b06      	cmp	r3, #6
 8005c52:	f200 80c9 	bhi.w	8005de8 <USBD_GetDescriptor+0x1ac>
 8005c56:	a201      	add	r2, pc, #4	; (adr r2, 8005c5c <USBD_GetDescriptor+0x20>)
 8005c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5c:	08005c79 	.word	0x08005c79
 8005c60:	08005c91 	.word	0x08005c91
 8005c64:	08005cd1 	.word	0x08005cd1
 8005c68:	08005de9 	.word	0x08005de9
 8005c6c:	08005de9 	.word	0x08005de9
 8005c70:	08005d95 	.word	0x08005d95
 8005c74:	08005dbb 	.word	0x08005dbb
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	7c12      	ldrb	r2, [r2, #16]
 8005c84:	f107 010a 	add.w	r1, r7, #10
 8005c88:	4610      	mov	r0, r2
 8005c8a:	4798      	blx	r3
 8005c8c:	60f8      	str	r0, [r7, #12]
    break;
 8005c8e:	e0b0      	b.n	8005df2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	7c1b      	ldrb	r3, [r3, #16]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10d      	bne.n	8005cb4 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca0:	f107 020a 	add.w	r2, r7, #10
 8005ca4:	4610      	mov	r0, r2
 8005ca6:	4798      	blx	r3
 8005ca8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	3301      	adds	r3, #1
 8005cae:	2202      	movs	r2, #2
 8005cb0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005cb2:	e09e      	b.n	8005df2 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbc:	f107 020a 	add.w	r2, r7, #10
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	4798      	blx	r3
 8005cc4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	2202      	movs	r2, #2
 8005ccc:	701a      	strb	r2, [r3, #0]
    break;
 8005cce:	e090      	b.n	8005df2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	885b      	ldrh	r3, [r3, #2]
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b05      	cmp	r3, #5
 8005cd8:	d856      	bhi.n	8005d88 <USBD_GetDescriptor+0x14c>
 8005cda:	a201      	add	r2, pc, #4	; (adr r2, 8005ce0 <USBD_GetDescriptor+0xa4>)
 8005cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce0:	08005cf9 	.word	0x08005cf9
 8005ce4:	08005d11 	.word	0x08005d11
 8005ce8:	08005d29 	.word	0x08005d29
 8005cec:	08005d41 	.word	0x08005d41
 8005cf0:	08005d59 	.word	0x08005d59
 8005cf4:	08005d71 	.word	0x08005d71
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	7c12      	ldrb	r2, [r2, #16]
 8005d04:	f107 010a 	add.w	r1, r7, #10
 8005d08:	4610      	mov	r0, r2
 8005d0a:	4798      	blx	r3
 8005d0c:	60f8      	str	r0, [r7, #12]
      break;
 8005d0e:	e040      	b.n	8005d92 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	7c12      	ldrb	r2, [r2, #16]
 8005d1c:	f107 010a 	add.w	r1, r7, #10
 8005d20:	4610      	mov	r0, r2
 8005d22:	4798      	blx	r3
 8005d24:	60f8      	str	r0, [r7, #12]
      break;
 8005d26:	e034      	b.n	8005d92 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	7c12      	ldrb	r2, [r2, #16]
 8005d34:	f107 010a 	add.w	r1, r7, #10
 8005d38:	4610      	mov	r0, r2
 8005d3a:	4798      	blx	r3
 8005d3c:	60f8      	str	r0, [r7, #12]
      break;
 8005d3e:	e028      	b.n	8005d92 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	7c12      	ldrb	r2, [r2, #16]
 8005d4c:	f107 010a 	add.w	r1, r7, #10
 8005d50:	4610      	mov	r0, r2
 8005d52:	4798      	blx	r3
 8005d54:	60f8      	str	r0, [r7, #12]
      break;
 8005d56:	e01c      	b.n	8005d92 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	7c12      	ldrb	r2, [r2, #16]
 8005d64:	f107 010a 	add.w	r1, r7, #10
 8005d68:	4610      	mov	r0, r2
 8005d6a:	4798      	blx	r3
 8005d6c:	60f8      	str	r0, [r7, #12]
      break;
 8005d6e:	e010      	b.n	8005d92 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	7c12      	ldrb	r2, [r2, #16]
 8005d7c:	f107 010a 	add.w	r1, r7, #10
 8005d80:	4610      	mov	r0, r2
 8005d82:	4798      	blx	r3
 8005d84:	60f8      	str	r0, [r7, #12]
      break;
 8005d86:	e004      	b.n	8005d92 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8005d88:	6839      	ldr	r1, [r7, #0]
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f9f9 	bl	8006182 <USBD_CtlError>
      return;
 8005d90:	e04b      	b.n	8005e2a <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8005d92:	e02e      	b.n	8005df2 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	7c1b      	ldrb	r3, [r3, #16]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d109      	bne.n	8005db0 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da4:	f107 020a 	add.w	r2, r7, #10
 8005da8:	4610      	mov	r0, r2
 8005daa:	4798      	blx	r3
 8005dac:	60f8      	str	r0, [r7, #12]
      break;
 8005dae:	e020      	b.n	8005df2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005db0:	6839      	ldr	r1, [r7, #0]
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f9e5 	bl	8006182 <USBD_CtlError>
      return;
 8005db8:	e037      	b.n	8005e2a <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	7c1b      	ldrb	r3, [r3, #16]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10d      	bne.n	8005dde <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dca:	f107 020a 	add.w	r2, r7, #10
 8005dce:	4610      	mov	r0, r2
 8005dd0:	4798      	blx	r3
 8005dd2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	2207      	movs	r2, #7
 8005dda:	701a      	strb	r2, [r3, #0]
      break;
 8005ddc:	e009      	b.n	8005df2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005dde:	6839      	ldr	r1, [r7, #0]
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f9ce 	bl	8006182 <USBD_CtlError>
      return;
 8005de6:	e020      	b.n	8005e2a <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8005de8:	6839      	ldr	r1, [r7, #0]
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f9c9 	bl	8006182 <USBD_CtlError>
    return;
 8005df0:	e01b      	b.n	8005e2a <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8005df2:	897b      	ldrh	r3, [r7, #10]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d011      	beq.n	8005e1c <USBD_GetDescriptor+0x1e0>
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	88db      	ldrh	r3, [r3, #6]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00d      	beq.n	8005e1c <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	88da      	ldrh	r2, [r3, #6]
 8005e04:	897b      	ldrh	r3, [r7, #10]
 8005e06:	4293      	cmp	r3, r2
 8005e08:	bf28      	it	cs
 8005e0a:	4613      	movcs	r3, r2
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8005e10:	897b      	ldrh	r3, [r7, #10]
 8005e12:	461a      	mov	r2, r3
 8005e14:	68f9      	ldr	r1, [r7, #12]
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 fa1e 	bl	8006258 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	88db      	ldrh	r3, [r3, #6]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d102      	bne.n	8005e2a <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fa57 	bl	80062d8 <USBD_CtlSendStatus>
  }
}
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	889b      	ldrh	r3, [r3, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d130      	bne.n	8005ea4 <USBD_SetAddress+0x74>
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	88db      	ldrh	r3, [r3, #6]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d12c      	bne.n	8005ea4 <USBD_SetAddress+0x74>
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	885b      	ldrh	r3, [r3, #2]
 8005e4e:	2b7f      	cmp	r3, #127	; 0x7f
 8005e50:	d828      	bhi.n	8005ea4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	885b      	ldrh	r3, [r3, #2]
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005e64:	2b03      	cmp	r3, #3
 8005e66:	d104      	bne.n	8005e72 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8005e68:	6839      	ldr	r1, [r7, #0]
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f989 	bl	8006182 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e70:	e01c      	b.n	8005eac <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	7bfa      	ldrb	r2, [r7, #15]
 8005e76:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005e7a:	7bfb      	ldrb	r3, [r7, #15]
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f001 f900 	bl	8007084 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 fa27 	bl	80062d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005e8a:	7bfb      	ldrb	r3, [r7, #15]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d004      	beq.n	8005e9a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2202      	movs	r2, #2
 8005e94:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e98:	e008      	b.n	8005eac <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ea2:	e003      	b.n	8005eac <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005ea4:	6839      	ldr	r1, [r7, #0]
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f96b 	bl	8006182 <USBD_CtlError>
  }
}
 8005eac:	bf00      	nop
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	885b      	ldrh	r3, [r3, #2]
 8005ec2:	b2da      	uxtb	r2, r3
 8005ec4:	4b41      	ldr	r3, [pc, #260]	; (8005fcc <USBD_SetConfig+0x118>)
 8005ec6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005ec8:	4b40      	ldr	r3, [pc, #256]	; (8005fcc <USBD_SetConfig+0x118>)
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d904      	bls.n	8005eda <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005ed0:	6839      	ldr	r1, [r7, #0]
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f955 	bl	8006182 <USBD_CtlError>
 8005ed8:	e075      	b.n	8005fc6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d002      	beq.n	8005eea <USBD_SetConfig+0x36>
 8005ee4:	2b03      	cmp	r3, #3
 8005ee6:	d023      	beq.n	8005f30 <USBD_SetConfig+0x7c>
 8005ee8:	e062      	b.n	8005fb0 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8005eea:	4b38      	ldr	r3, [pc, #224]	; (8005fcc <USBD_SetConfig+0x118>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d01a      	beq.n	8005f28 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8005ef2:	4b36      	ldr	r3, [pc, #216]	; (8005fcc <USBD_SetConfig+0x118>)
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2203      	movs	r2, #3
 8005f00:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005f04:	4b31      	ldr	r3, [pc, #196]	; (8005fcc <USBD_SetConfig+0x118>)
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	4619      	mov	r1, r3
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7ff fa2a 	bl	8005364 <USBD_SetClassConfig>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d104      	bne.n	8005f20 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8005f16:	6839      	ldr	r1, [r7, #0]
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f932 	bl	8006182 <USBD_CtlError>
          return;
 8005f1e:	e052      	b.n	8005fc6 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f9d9 	bl	80062d8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8005f26:	e04e      	b.n	8005fc6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 f9d5 	bl	80062d8 <USBD_CtlSendStatus>
      break;
 8005f2e:	e04a      	b.n	8005fc6 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005f30:	4b26      	ldr	r3, [pc, #152]	; (8005fcc <USBD_SetConfig+0x118>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d112      	bne.n	8005f5e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8005f40:	4b22      	ldr	r3, [pc, #136]	; (8005fcc <USBD_SetConfig+0x118>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	461a      	mov	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8005f4a:	4b20      	ldr	r3, [pc, #128]	; (8005fcc <USBD_SetConfig+0x118>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	4619      	mov	r1, r3
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7ff fa26 	bl	80053a2 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f9be 	bl	80062d8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8005f5c:	e033      	b.n	8005fc6 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8005f5e:	4b1b      	ldr	r3, [pc, #108]	; (8005fcc <USBD_SetConfig+0x118>)
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	461a      	mov	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d01d      	beq.n	8005fa8 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	4619      	mov	r1, r3
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f7ff fa14 	bl	80053a2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005f7a:	4b14      	ldr	r3, [pc, #80]	; (8005fcc <USBD_SetConfig+0x118>)
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005f84:	4b11      	ldr	r3, [pc, #68]	; (8005fcc <USBD_SetConfig+0x118>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	4619      	mov	r1, r3
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7ff f9ea 	bl	8005364 <USBD_SetClassConfig>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d104      	bne.n	8005fa0 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8005f96:	6839      	ldr	r1, [r7, #0]
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 f8f2 	bl	8006182 <USBD_CtlError>
          return;
 8005f9e:	e012      	b.n	8005fc6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f999 	bl	80062d8 <USBD_CtlSendStatus>
      break;
 8005fa6:	e00e      	b.n	8005fc6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f995 	bl	80062d8 <USBD_CtlSendStatus>
      break;
 8005fae:	e00a      	b.n	8005fc6 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8005fb0:	6839      	ldr	r1, [r7, #0]
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f8e5 	bl	8006182 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8005fb8:	4b04      	ldr	r3, [pc, #16]	; (8005fcc <USBD_SetConfig+0x118>)
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7ff f9ef 	bl	80053a2 <USBD_ClrClassConfig>
      break;
 8005fc4:	bf00      	nop
    }
  }
}
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	200001e4 	.word	0x200001e4

08005fd0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	88db      	ldrh	r3, [r3, #6]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d004      	beq.n	8005fec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8005fe2:	6839      	ldr	r1, [r7, #0]
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f8cc 	bl	8006182 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8005fea:	e021      	b.n	8006030 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	db17      	blt.n	8006026 <USBD_GetConfig+0x56>
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	dd02      	ble.n	8006000 <USBD_GetConfig+0x30>
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d00b      	beq.n	8006016 <USBD_GetConfig+0x46>
 8005ffe:	e012      	b.n	8006026 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	3308      	adds	r3, #8
 800600a:	2201      	movs	r2, #1
 800600c:	4619      	mov	r1, r3
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f922 	bl	8006258 <USBD_CtlSendData>
      break;
 8006014:	e00c      	b.n	8006030 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	3304      	adds	r3, #4
 800601a:	2201      	movs	r2, #1
 800601c:	4619      	mov	r1, r3
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f91a 	bl	8006258 <USBD_CtlSendData>
      break;
 8006024:	e004      	b.n	8006030 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8006026:	6839      	ldr	r1, [r7, #0]
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 f8aa 	bl	8006182 <USBD_CtlError>
      break;
 800602e:	bf00      	nop
}
 8006030:	bf00      	nop
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006048:	3b01      	subs	r3, #1
 800604a:	2b02      	cmp	r3, #2
 800604c:	d81e      	bhi.n	800608c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	88db      	ldrh	r3, [r3, #6]
 8006052:	2b02      	cmp	r3, #2
 8006054:	d004      	beq.n	8006060 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006056:	6839      	ldr	r1, [r7, #0]
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f892 	bl	8006182 <USBD_CtlError>
      break;
 800605e:	e01a      	b.n	8006096 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800606c:	2b00      	cmp	r3, #0
 800606e:	d005      	beq.n	800607c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f043 0202 	orr.w	r2, r3, #2
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	330c      	adds	r3, #12
 8006080:	2202      	movs	r2, #2
 8006082:	4619      	mov	r1, r3
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 f8e7 	bl	8006258 <USBD_CtlSendData>
    break;
 800608a:	e004      	b.n	8006096 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800608c:	6839      	ldr	r1, [r7, #0]
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f877 	bl	8006182 <USBD_CtlError>
    break;
 8006094:	bf00      	nop
  }
}
 8006096:	bf00      	nop
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b082      	sub	sp, #8
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	885b      	ldrh	r3, [r3, #2]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d106      	bne.n	80060be <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 f90d 	bl	80062d8 <USBD_CtlSendStatus>
  }

}
 80060be:	bf00      	nop
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b082      	sub	sp, #8
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
 80060ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80060d6:	3b01      	subs	r3, #1
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d80b      	bhi.n	80060f4 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	885b      	ldrh	r3, [r3, #2]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d10c      	bne.n	80060fe <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f8f3 	bl	80062d8 <USBD_CtlSendStatus>
    }
    break;
 80060f2:	e004      	b.n	80060fe <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80060f4:	6839      	ldr	r1, [r7, #0]
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f843 	bl	8006182 <USBD_CtlError>
    break;
 80060fc:	e000      	b.n	8006100 <USBD_ClrFeature+0x3a>
    break;
 80060fe:	bf00      	nop
  }
}
 8006100:	bf00      	nop
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	781a      	ldrb	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	785a      	ldrb	r2, [r3, #1]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	3302      	adds	r3, #2
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	b29a      	uxth	r2, r3
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	3303      	adds	r3, #3
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	b29b      	uxth	r3, r3
 8006132:	021b      	lsls	r3, r3, #8
 8006134:	b29b      	uxth	r3, r3
 8006136:	4413      	add	r3, r2
 8006138:	b29a      	uxth	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	3304      	adds	r3, #4
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	b29a      	uxth	r2, r3
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	3305      	adds	r3, #5
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	b29b      	uxth	r3, r3
 800614e:	021b      	lsls	r3, r3, #8
 8006150:	b29b      	uxth	r3, r3
 8006152:	4413      	add	r3, r2
 8006154:	b29a      	uxth	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	3306      	adds	r3, #6
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	b29a      	uxth	r2, r3
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	3307      	adds	r3, #7
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	b29b      	uxth	r3, r3
 800616a:	021b      	lsls	r3, r3, #8
 800616c:	b29b      	uxth	r3, r3
 800616e:	4413      	add	r3, r2
 8006170:	b29a      	uxth	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	80da      	strh	r2, [r3, #6]

}
 8006176:	bf00      	nop
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b082      	sub	sp, #8
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800618c:	2180      	movs	r1, #128	; 0x80
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 ff0e 	bl	8006fb0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8006194:	2100      	movs	r1, #0
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 ff0a 	bl	8006fb0 <USBD_LL_StallEP>
}
 800619c:	bf00      	nop
 800619e:	3708      	adds	r7, #8
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d032      	beq.n	8006220 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 f834 	bl	8006228 <USBD_GetLen>
 80061c0:	4603      	mov	r3, r0
 80061c2:	3301      	adds	r3, #1
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80061ce:	7dfb      	ldrb	r3, [r7, #23]
 80061d0:	1c5a      	adds	r2, r3, #1
 80061d2:	75fa      	strb	r2, [r7, #23]
 80061d4:	461a      	mov	r2, r3
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	4413      	add	r3, r2
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	7812      	ldrb	r2, [r2, #0]
 80061de:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80061e0:	7dfb      	ldrb	r3, [r7, #23]
 80061e2:	1c5a      	adds	r2, r3, #1
 80061e4:	75fa      	strb	r2, [r7, #23]
 80061e6:	461a      	mov	r2, r3
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	4413      	add	r3, r2
 80061ec:	2203      	movs	r2, #3
 80061ee:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80061f0:	e012      	b.n	8006218 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	1c5a      	adds	r2, r3, #1
 80061f6:	60fa      	str	r2, [r7, #12]
 80061f8:	7dfa      	ldrb	r2, [r7, #23]
 80061fa:	1c51      	adds	r1, r2, #1
 80061fc:	75f9      	strb	r1, [r7, #23]
 80061fe:	4611      	mov	r1, r2
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	440a      	add	r2, r1
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006208:	7dfb      	ldrb	r3, [r7, #23]
 800620a:	1c5a      	adds	r2, r3, #1
 800620c:	75fa      	strb	r2, [r7, #23]
 800620e:	461a      	mov	r2, r3
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	4413      	add	r3, r2
 8006214:	2200      	movs	r2, #0
 8006216:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1e8      	bne.n	80061f2 <USBD_GetString+0x4e>
    }
  }
}
 8006220:	bf00      	nop
 8006222:	3718      	adds	r7, #24
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8006230:	2300      	movs	r3, #0
 8006232:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8006234:	e005      	b.n	8006242 <USBD_GetLen+0x1a>
    {
        len++;
 8006236:	7bfb      	ldrb	r3, [r7, #15]
 8006238:	3301      	adds	r3, #1
 800623a:	73fb      	strb	r3, [r7, #15]
        buf++;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3301      	adds	r3, #1
 8006240:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1f5      	bne.n	8006236 <USBD_GetLen+0xe>
    }

    return len;
 800624a:	7bfb      	ldrb	r3, [r7, #15]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	4613      	mov	r3, r2
 8006264:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2202      	movs	r2, #2
 800626a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800626e:	88fa      	ldrh	r2, [r7, #6]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006274:	88fa      	ldrh	r2, [r7, #6]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800627a:	88fb      	ldrh	r3, [r7, #6]
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	2100      	movs	r1, #0
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 ff1e 	bl	80070c2 <USBD_LL_Transmit>

  return USBD_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	4613      	mov	r3, r2
 800629c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800629e:	88fb      	ldrh	r3, [r7, #6]
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	2100      	movs	r1, #0
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 ff0c 	bl	80070c2 <USBD_LL_Transmit>

  return USBD_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3710      	adds	r7, #16
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	4613      	mov	r3, r2
 80062c0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80062c2:	88fb      	ldrh	r3, [r7, #6]
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	2100      	movs	r1, #0
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f000 ff1d 	bl	8007108 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2204      	movs	r2, #4
 80062e4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80062e8:	2300      	movs	r3, #0
 80062ea:	2200      	movs	r2, #0
 80062ec:	2100      	movs	r1, #0
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fee7 	bl	80070c2 <USBD_LL_Transmit>

  return USBD_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3708      	adds	r7, #8
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b082      	sub	sp, #8
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2205      	movs	r2, #5
 800630a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800630e:	2300      	movs	r3, #0
 8006310:	2200      	movs	r2, #0
 8006312:	2100      	movs	r1, #0
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fef7 	bl	8007108 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
   uint8_t MACAddr[6] ;

  heth.Instance = ETH;
 800632a:	4b17      	ldr	r3, [pc, #92]	; (8006388 <MX_ETH_Init+0x64>)
 800632c:	4a17      	ldr	r2, [pc, #92]	; (800638c <MX_ETH_Init+0x68>)
 800632e:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8006330:	4b15      	ldr	r3, [pc, #84]	; (8006388 <MX_ETH_Init+0x64>)
 8006332:	2201      	movs	r2, #1
 8006334:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8006336:	4b14      	ldr	r3, [pc, #80]	; (8006388 <MX_ETH_Init+0x64>)
 8006338:	2200      	movs	r2, #0
 800633a:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800633c:	2300      	movs	r3, #0
 800633e:	703b      	strb	r3, [r7, #0]
  MACAddr[1] = 0x80;
 8006340:	2380      	movs	r3, #128	; 0x80
 8006342:	707b      	strb	r3, [r7, #1]
  MACAddr[2] = 0xE1;
 8006344:	23e1      	movs	r3, #225	; 0xe1
 8006346:	70bb      	strb	r3, [r7, #2]
  MACAddr[3] = 0x00;
 8006348:	2300      	movs	r3, #0
 800634a:	70fb      	strb	r3, [r7, #3]
  MACAddr[4] = 0x00;
 800634c:	2300      	movs	r3, #0
 800634e:	713b      	strb	r3, [r7, #4]
  MACAddr[5] = 0x00;
 8006350:	2300      	movs	r3, #0
 8006352:	717b      	strb	r3, [r7, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8006354:	4a0c      	ldr	r2, [pc, #48]	; (8006388 <MX_ETH_Init+0x64>)
 8006356:	463b      	mov	r3, r7
 8006358:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800635a:	4b0b      	ldr	r3, [pc, #44]	; (8006388 <MX_ETH_Init+0x64>)
 800635c:	2200      	movs	r2, #0
 800635e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8006360:	4b09      	ldr	r3, [pc, #36]	; (8006388 <MX_ETH_Init+0x64>)
 8006362:	2200      	movs	r2, #0
 8006364:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8006366:	4b08      	ldr	r3, [pc, #32]	; (8006388 <MX_ETH_Init+0x64>)
 8006368:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800636c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800636e:	4806      	ldr	r0, [pc, #24]	; (8006388 <MX_ETH_Init+0x64>)
 8006370:	f7fa fa84 	bl	800087c <HAL_ETH_Init>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <MX_ETH_Init+0x5a>
  {
    Error_Handler();
 800637a:	f000 faa5 	bl	80068c8 <Error_Handler>
  }

}
 800637e:	bf00      	nop
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	200001f8 	.word	0x200001f8
 800638c:	40028000 	.word	0x40028000

08006390 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b08e      	sub	sp, #56	; 0x38
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800639c:	2200      	movs	r2, #0
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	605a      	str	r2, [r3, #4]
 80063a2:	609a      	str	r2, [r3, #8]
 80063a4:	60da      	str	r2, [r3, #12]
 80063a6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a55      	ldr	r2, [pc, #340]	; (8006504 <HAL_ETH_MspInit+0x174>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	f040 80a4 	bne.w	80064fc <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80063b4:	2300      	movs	r3, #0
 80063b6:	623b      	str	r3, [r7, #32]
 80063b8:	4b53      	ldr	r3, [pc, #332]	; (8006508 <HAL_ETH_MspInit+0x178>)
 80063ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063bc:	4a52      	ldr	r2, [pc, #328]	; (8006508 <HAL_ETH_MspInit+0x178>)
 80063be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80063c2:	6313      	str	r3, [r2, #48]	; 0x30
 80063c4:	4b50      	ldr	r3, [pc, #320]	; (8006508 <HAL_ETH_MspInit+0x178>)
 80063c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063cc:	623b      	str	r3, [r7, #32]
 80063ce:	6a3b      	ldr	r3, [r7, #32]
 80063d0:	2300      	movs	r3, #0
 80063d2:	61fb      	str	r3, [r7, #28]
 80063d4:	4b4c      	ldr	r3, [pc, #304]	; (8006508 <HAL_ETH_MspInit+0x178>)
 80063d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d8:	4a4b      	ldr	r2, [pc, #300]	; (8006508 <HAL_ETH_MspInit+0x178>)
 80063da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80063de:	6313      	str	r3, [r2, #48]	; 0x30
 80063e0:	4b49      	ldr	r3, [pc, #292]	; (8006508 <HAL_ETH_MspInit+0x178>)
 80063e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063e8:	61fb      	str	r3, [r7, #28]
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	2300      	movs	r3, #0
 80063ee:	61bb      	str	r3, [r7, #24]
 80063f0:	4b45      	ldr	r3, [pc, #276]	; (8006508 <HAL_ETH_MspInit+0x178>)
 80063f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f4:	4a44      	ldr	r2, [pc, #272]	; (8006508 <HAL_ETH_MspInit+0x178>)
 80063f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80063fa:	6313      	str	r3, [r2, #48]	; 0x30
 80063fc:	4b42      	ldr	r3, [pc, #264]	; (8006508 <HAL_ETH_MspInit+0x178>)
 80063fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006400:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006404:	61bb      	str	r3, [r7, #24]
 8006406:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006408:	2300      	movs	r3, #0
 800640a:	617b      	str	r3, [r7, #20]
 800640c:	4b3e      	ldr	r3, [pc, #248]	; (8006508 <HAL_ETH_MspInit+0x178>)
 800640e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006410:	4a3d      	ldr	r2, [pc, #244]	; (8006508 <HAL_ETH_MspInit+0x178>)
 8006412:	f043 0304 	orr.w	r3, r3, #4
 8006416:	6313      	str	r3, [r2, #48]	; 0x30
 8006418:	4b3b      	ldr	r3, [pc, #236]	; (8006508 <HAL_ETH_MspInit+0x178>)
 800641a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	617b      	str	r3, [r7, #20]
 8006422:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006424:	2300      	movs	r3, #0
 8006426:	613b      	str	r3, [r7, #16]
 8006428:	4b37      	ldr	r3, [pc, #220]	; (8006508 <HAL_ETH_MspInit+0x178>)
 800642a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642c:	4a36      	ldr	r2, [pc, #216]	; (8006508 <HAL_ETH_MspInit+0x178>)
 800642e:	f043 0301 	orr.w	r3, r3, #1
 8006432:	6313      	str	r3, [r2, #48]	; 0x30
 8006434:	4b34      	ldr	r3, [pc, #208]	; (8006508 <HAL_ETH_MspInit+0x178>)
 8006436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006438:	f003 0301 	and.w	r3, r3, #1
 800643c:	613b      	str	r3, [r7, #16]
 800643e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006440:	2300      	movs	r3, #0
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	4b30      	ldr	r3, [pc, #192]	; (8006508 <HAL_ETH_MspInit+0x178>)
 8006446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006448:	4a2f      	ldr	r2, [pc, #188]	; (8006508 <HAL_ETH_MspInit+0x178>)
 800644a:	f043 0302 	orr.w	r3, r3, #2
 800644e:	6313      	str	r3, [r2, #48]	; 0x30
 8006450:	4b2d      	ldr	r3, [pc, #180]	; (8006508 <HAL_ETH_MspInit+0x178>)
 8006452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	60fb      	str	r3, [r7, #12]
 800645a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800645c:	2300      	movs	r3, #0
 800645e:	60bb      	str	r3, [r7, #8]
 8006460:	4b29      	ldr	r3, [pc, #164]	; (8006508 <HAL_ETH_MspInit+0x178>)
 8006462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006464:	4a28      	ldr	r2, [pc, #160]	; (8006508 <HAL_ETH_MspInit+0x178>)
 8006466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800646a:	6313      	str	r3, [r2, #48]	; 0x30
 800646c:	4b26      	ldr	r3, [pc, #152]	; (8006508 <HAL_ETH_MspInit+0x178>)
 800646e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006474:	60bb      	str	r3, [r7, #8]
 8006476:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006478:	2332      	movs	r3, #50	; 0x32
 800647a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800647c:	2302      	movs	r3, #2
 800647e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006480:	2300      	movs	r3, #0
 8006482:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006484:	2303      	movs	r3, #3
 8006486:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006488:	230b      	movs	r3, #11
 800648a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800648c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006490:	4619      	mov	r1, r3
 8006492:	481e      	ldr	r0, [pc, #120]	; (800650c <HAL_ETH_MspInit+0x17c>)
 8006494:	f7fa fe60 	bl	8001158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006498:	2386      	movs	r3, #134	; 0x86
 800649a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800649c:	2302      	movs	r3, #2
 800649e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064a0:	2300      	movs	r3, #0
 80064a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064a4:	2303      	movs	r3, #3
 80064a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80064a8:	230b      	movs	r3, #11
 80064aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064b0:	4619      	mov	r1, r3
 80064b2:	4817      	ldr	r0, [pc, #92]	; (8006510 <HAL_ETH_MspInit+0x180>)
 80064b4:	f7fa fe50 	bl	8001158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80064b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064be:	2302      	movs	r3, #2
 80064c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064c2:	2300      	movs	r3, #0
 80064c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064c6:	2303      	movs	r3, #3
 80064c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80064ca:	230b      	movs	r3, #11
 80064cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80064ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064d2:	4619      	mov	r1, r3
 80064d4:	480f      	ldr	r0, [pc, #60]	; (8006514 <HAL_ETH_MspInit+0x184>)
 80064d6:	f7fa fe3f 	bl	8001158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80064da:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80064de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064e0:	2302      	movs	r3, #2
 80064e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064e4:	2300      	movs	r3, #0
 80064e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064e8:	2303      	movs	r3, #3
 80064ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80064ec:	230b      	movs	r3, #11
 80064ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80064f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064f4:	4619      	mov	r1, r3
 80064f6:	4808      	ldr	r0, [pc, #32]	; (8006518 <HAL_ETH_MspInit+0x188>)
 80064f8:	f7fa fe2e 	bl	8001158 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80064fc:	bf00      	nop
 80064fe:	3738      	adds	r7, #56	; 0x38
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	40028000 	.word	0x40028000
 8006508:	40023800 	.word	0x40023800
 800650c:	40020800 	.word	0x40020800
 8006510:	40020000 	.word	0x40020000
 8006514:	40020400 	.word	0x40020400
 8006518:	40021800 	.word	0x40021800

0800651c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b08c      	sub	sp, #48	; 0x30
 8006520:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006522:	f107 031c 	add.w	r3, r7, #28
 8006526:	2200      	movs	r2, #0
 8006528:	601a      	str	r2, [r3, #0]
 800652a:	605a      	str	r2, [r3, #4]
 800652c:	609a      	str	r2, [r3, #8]
 800652e:	60da      	str	r2, [r3, #12]
 8006530:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006532:	2300      	movs	r3, #0
 8006534:	61bb      	str	r3, [r7, #24]
 8006536:	4b56      	ldr	r3, [pc, #344]	; (8006690 <MX_GPIO_Init+0x174>)
 8006538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653a:	4a55      	ldr	r2, [pc, #340]	; (8006690 <MX_GPIO_Init+0x174>)
 800653c:	f043 0304 	orr.w	r3, r3, #4
 8006540:	6313      	str	r3, [r2, #48]	; 0x30
 8006542:	4b53      	ldr	r3, [pc, #332]	; (8006690 <MX_GPIO_Init+0x174>)
 8006544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006546:	f003 0304 	and.w	r3, r3, #4
 800654a:	61bb      	str	r3, [r7, #24]
 800654c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800654e:	2300      	movs	r3, #0
 8006550:	617b      	str	r3, [r7, #20]
 8006552:	4b4f      	ldr	r3, [pc, #316]	; (8006690 <MX_GPIO_Init+0x174>)
 8006554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006556:	4a4e      	ldr	r2, [pc, #312]	; (8006690 <MX_GPIO_Init+0x174>)
 8006558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800655c:	6313      	str	r3, [r2, #48]	; 0x30
 800655e:	4b4c      	ldr	r3, [pc, #304]	; (8006690 <MX_GPIO_Init+0x174>)
 8006560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006566:	617b      	str	r3, [r7, #20]
 8006568:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800656a:	2300      	movs	r3, #0
 800656c:	613b      	str	r3, [r7, #16]
 800656e:	4b48      	ldr	r3, [pc, #288]	; (8006690 <MX_GPIO_Init+0x174>)
 8006570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006572:	4a47      	ldr	r2, [pc, #284]	; (8006690 <MX_GPIO_Init+0x174>)
 8006574:	f043 0301 	orr.w	r3, r3, #1
 8006578:	6313      	str	r3, [r2, #48]	; 0x30
 800657a:	4b45      	ldr	r3, [pc, #276]	; (8006690 <MX_GPIO_Init+0x174>)
 800657c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	613b      	str	r3, [r7, #16]
 8006584:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006586:	2300      	movs	r3, #0
 8006588:	60fb      	str	r3, [r7, #12]
 800658a:	4b41      	ldr	r3, [pc, #260]	; (8006690 <MX_GPIO_Init+0x174>)
 800658c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658e:	4a40      	ldr	r2, [pc, #256]	; (8006690 <MX_GPIO_Init+0x174>)
 8006590:	f043 0302 	orr.w	r3, r3, #2
 8006594:	6313      	str	r3, [r2, #48]	; 0x30
 8006596:	4b3e      	ldr	r3, [pc, #248]	; (8006690 <MX_GPIO_Init+0x174>)
 8006598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659a:	f003 0302 	and.w	r3, r3, #2
 800659e:	60fb      	str	r3, [r7, #12]
 80065a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80065a2:	2300      	movs	r3, #0
 80065a4:	60bb      	str	r3, [r7, #8]
 80065a6:	4b3a      	ldr	r3, [pc, #232]	; (8006690 <MX_GPIO_Init+0x174>)
 80065a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065aa:	4a39      	ldr	r2, [pc, #228]	; (8006690 <MX_GPIO_Init+0x174>)
 80065ac:	f043 0308 	orr.w	r3, r3, #8
 80065b0:	6313      	str	r3, [r2, #48]	; 0x30
 80065b2:	4b37      	ldr	r3, [pc, #220]	; (8006690 <MX_GPIO_Init+0x174>)
 80065b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b6:	f003 0308 	and.w	r3, r3, #8
 80065ba:	60bb      	str	r3, [r7, #8]
 80065bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80065be:	2300      	movs	r3, #0
 80065c0:	607b      	str	r3, [r7, #4]
 80065c2:	4b33      	ldr	r3, [pc, #204]	; (8006690 <MX_GPIO_Init+0x174>)
 80065c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c6:	4a32      	ldr	r2, [pc, #200]	; (8006690 <MX_GPIO_Init+0x174>)
 80065c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065cc:	6313      	str	r3, [r2, #48]	; 0x30
 80065ce:	4b30      	ldr	r3, [pc, #192]	; (8006690 <MX_GPIO_Init+0x174>)
 80065d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d6:	607b      	str	r3, [r7, #4]
 80065d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80065da:	2200      	movs	r2, #0
 80065dc:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80065e0:	482c      	ldr	r0, [pc, #176]	; (8006694 <MX_GPIO_Init+0x178>)
 80065e2:	f7fa ff7b 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80065e6:	2200      	movs	r2, #0
 80065e8:	2140      	movs	r1, #64	; 0x40
 80065ea:	482b      	ldr	r0, [pc, #172]	; (8006698 <MX_GPIO_Init+0x17c>)
 80065ec:	f7fa ff76 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80065f0:	2200      	movs	r2, #0
 80065f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065f6:	4829      	ldr	r0, [pc, #164]	; (800669c <MX_GPIO_Init+0x180>)
 80065f8:	f7fa ff70 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80065fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006602:	4b27      	ldr	r3, [pc, #156]	; (80066a0 <MX_GPIO_Init+0x184>)
 8006604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006606:	2300      	movs	r3, #0
 8006608:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800660a:	f107 031c 	add.w	r3, r7, #28
 800660e:	4619      	mov	r1, r3
 8006610:	4822      	ldr	r0, [pc, #136]	; (800669c <MX_GPIO_Init+0x180>)
 8006612:	f7fa fda1 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8006616:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800661a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800661c:	2301      	movs	r3, #1
 800661e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006620:	2300      	movs	r3, #0
 8006622:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006624:	2300      	movs	r3, #0
 8006626:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006628:	f107 031c 	add.w	r3, r7, #28
 800662c:	4619      	mov	r1, r3
 800662e:	4819      	ldr	r0, [pc, #100]	; (8006694 <MX_GPIO_Init+0x178>)
 8006630:	f7fa fd92 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8006634:	2340      	movs	r3, #64	; 0x40
 8006636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006638:	2301      	movs	r3, #1
 800663a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800663c:	2300      	movs	r3, #0
 800663e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006640:	2300      	movs	r3, #0
 8006642:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8006644:	f107 031c 	add.w	r3, r7, #28
 8006648:	4619      	mov	r1, r3
 800664a:	4813      	ldr	r0, [pc, #76]	; (8006698 <MX_GPIO_Init+0x17c>)
 800664c:	f7fa fd84 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8006650:	2380      	movs	r3, #128	; 0x80
 8006652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006654:	2300      	movs	r3, #0
 8006656:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006658:	2300      	movs	r3, #0
 800665a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800665c:	f107 031c 	add.w	r3, r7, #28
 8006660:	4619      	mov	r1, r3
 8006662:	480d      	ldr	r0, [pc, #52]	; (8006698 <MX_GPIO_Init+0x17c>)
 8006664:	f7fa fd78 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8006668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800666c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800666e:	2301      	movs	r3, #1
 8006670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006672:	2300      	movs	r3, #0
 8006674:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006676:	2300      	movs	r3, #0
 8006678:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 800667a:	f107 031c 	add.w	r3, r7, #28
 800667e:	4619      	mov	r1, r3
 8006680:	4806      	ldr	r0, [pc, #24]	; (800669c <MX_GPIO_Init+0x180>)
 8006682:	f7fa fd69 	bl	8001158 <HAL_GPIO_Init>

}
 8006686:	bf00      	nop
 8006688:	3730      	adds	r7, #48	; 0x30
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	40023800 	.word	0x40023800
 8006694:	40020400 	.word	0x40020400
 8006698:	40021800 	.word	0x40021800
 800669c:	40020800 	.word	0x40020800
 80066a0:	10110000 	.word	0x10110000

080066a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80066a8:	f7f9 ff20 	bl	80004ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80066ac:	f000 f8a2 	bl	80067f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80066b0:	f7ff ff34 	bl	800651c <MX_GPIO_Init>
  MX_ETH_Init();
 80066b4:	f7ff fe36 	bl	8006324 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80066b8:	f000 f9da 	bl	8006a70 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80066bc:	f000 fa52 	bl	8006b64 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  buffer[0]=1;//reportID
 80066c0:	4b49      	ldr	r3, [pc, #292]	; (80067e8 <main+0x144>)
 80066c2:	2201      	movs	r2, #1
 80066c4:	701a      	strb	r2, [r3, #0]
    buffer[1]=0;//modifier
 80066c6:	4b48      	ldr	r3, [pc, #288]	; (80067e8 <main+0x144>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	705a      	strb	r2, [r3, #1]
    buffer[2]=0;//OEM
 80066cc:	4b46      	ldr	r3, [pc, #280]	; (80067e8 <main+0x144>)
 80066ce:	2200      	movs	r2, #0
 80066d0:	709a      	strb	r2, [r3, #2]
    buffer[3]=0;//keycode data
 80066d2:	4b45      	ldr	r3, [pc, #276]	; (80067e8 <main+0x144>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	70da      	strb	r2, [r3, #3]
    buffer[4]=0;//keycode data
 80066d8:	4b43      	ldr	r3, [pc, #268]	; (80067e8 <main+0x144>)
 80066da:	2200      	movs	r2, #0
 80066dc:	711a      	strb	r2, [r3, #4]
    buffer[5]=0;//keycode data
 80066de:	4b42      	ldr	r3, [pc, #264]	; (80067e8 <main+0x144>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	715a      	strb	r2, [r3, #5]
    buffer[6]=0;//keycode data
 80066e4:	4b40      	ldr	r3, [pc, #256]	; (80067e8 <main+0x144>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	719a      	strb	r2, [r3, #6]
    buffer[7]=0;//keycode data
 80066ea:	4b3f      	ldr	r3, [pc, #252]	; (80067e8 <main+0x144>)
 80066ec:	2200      	movs	r2, #0
 80066ee:	71da      	strb	r2, [r3, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==GPIO_PIN_SET)
 80066f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80066f4:	483d      	ldr	r0, [pc, #244]	; (80067ec <main+0x148>)
 80066f6:	f7fa fed9 	bl	80014ac <HAL_GPIO_ReadPin>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d1f7      	bne.n	80066f0 <main+0x4c>
	  {
		  // Begin TODO 5 HID_KEYBOARD_HANDS_ON: Report PgDown press and release
		       #warning "TODO 5 HID_KEYBOARD_HANDS_ON: Report PgDown press and release"
		  	  //report keycode data - PgDwn press (0x4E)
		  	  //buffer[3]=0x4E;//keycode data
		  	  buffer[3]=0x2B;//keycode data
 8006700:	4b39      	ldr	r3, [pc, #228]	; (80067e8 <main+0x144>)
 8006702:	222b      	movs	r2, #43	; 0x2b
 8006704:	70da      	strb	r2, [r3, #3]
		  	  USBD_HID_SendReport(&hUsbDeviceFS,buffer,8);
 8006706:	2208      	movs	r2, #8
 8006708:	4937      	ldr	r1, [pc, #220]	; (80067e8 <main+0x144>)
 800670a:	4839      	ldr	r0, [pc, #228]	; (80067f0 <main+0x14c>)
 800670c:	f7fe fd5a 	bl	80051c4 <USBD_HID_SendReport>
		  	  HAL_Delay(100);
 8006710:	2064      	movs	r0, #100	; 0x64
 8006712:	f7f9 ff5d 	bl	80005d0 <HAL_Delay>
		  	  buffer[3]=0x0;//keycode data
 8006716:	4b34      	ldr	r3, [pc, #208]	; (80067e8 <main+0x144>)
 8006718:	2200      	movs	r2, #0
 800671a:	70da      	strb	r2, [r3, #3]
		  	  USBD_HID_SendReport(&hUsbDeviceFS,buffer,8);
 800671c:	2208      	movs	r2, #8
 800671e:	4932      	ldr	r1, [pc, #200]	; (80067e8 <main+0x144>)
 8006720:	4833      	ldr	r0, [pc, #204]	; (80067f0 <main+0x14c>)
 8006722:	f7fe fd4f 	bl	80051c4 <USBD_HID_SendReport>
		  	  //HAL_Delay(100);
		  	  HAL_Delay(1000);
 8006726:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800672a:	f7f9 ff51 	bl	80005d0 <HAL_Delay>

		  	// Begin TODO 5 HID_KEYBOARD_HANDS_ON: Report PgDown press and release
		  			       #warning "TODO 5 HID_KEYBOARD_HANDS_ON: Report PgDown press and release"
		  			  	  //report keycode data - PgDwn press (0x4E)
		  			  	  //buffer[3]=0x4E;//keycode data
		  			  	  buffer[3]=0x32;//keycode data
 800672e:	4b2e      	ldr	r3, [pc, #184]	; (80067e8 <main+0x144>)
 8006730:	2232      	movs	r2, #50	; 0x32
 8006732:	70da      	strb	r2, [r3, #3]
		  			  	  USBD_HID_SendReport(&hUsbDeviceFS,buffer,8);
 8006734:	2208      	movs	r2, #8
 8006736:	492c      	ldr	r1, [pc, #176]	; (80067e8 <main+0x144>)
 8006738:	482d      	ldr	r0, [pc, #180]	; (80067f0 <main+0x14c>)
 800673a:	f7fe fd43 	bl	80051c4 <USBD_HID_SendReport>
		  			  	  HAL_Delay(100);
 800673e:	2064      	movs	r0, #100	; 0x64
 8006740:	f7f9 ff46 	bl	80005d0 <HAL_Delay>
		  			  	  buffer[3]=0x0;//keycode data
 8006744:	4b28      	ldr	r3, [pc, #160]	; (80067e8 <main+0x144>)
 8006746:	2200      	movs	r2, #0
 8006748:	70da      	strb	r2, [r3, #3]
		  			  	  USBD_HID_SendReport(&hUsbDeviceFS,buffer,8);
 800674a:	2208      	movs	r2, #8
 800674c:	4926      	ldr	r1, [pc, #152]	; (80067e8 <main+0x144>)
 800674e:	4828      	ldr	r0, [pc, #160]	; (80067f0 <main+0x14c>)
 8006750:	f7fe fd38 	bl	80051c4 <USBD_HID_SendReport>
		  			  	  //HAL_Delay(100);
		  			  	  HAL_Delay(1000);
 8006754:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006758:	f7f9 ff3a 	bl	80005d0 <HAL_Delay>

		  			  	// Begin TODO 5 HID_KEYBOARD_HANDS_ON: Report PgDown press and release
		  			  			       #warning "TODO 5 HID_KEYBOARD_HANDS_ON: Report PgDown press and release"
		  			  			  	  //report keycode data - PgDwn press (0x4E)
		  			  			  	  //buffer[3]=0x4E;//keycode data
		  			  			  	  buffer[3]=0x42;//keycode data
 800675c:	4b22      	ldr	r3, [pc, #136]	; (80067e8 <main+0x144>)
 800675e:	2242      	movs	r2, #66	; 0x42
 8006760:	70da      	strb	r2, [r3, #3]
		  			  			  	  USBD_HID_SendReport(&hUsbDeviceFS,buffer,8);
 8006762:	2208      	movs	r2, #8
 8006764:	4920      	ldr	r1, [pc, #128]	; (80067e8 <main+0x144>)
 8006766:	4822      	ldr	r0, [pc, #136]	; (80067f0 <main+0x14c>)
 8006768:	f7fe fd2c 	bl	80051c4 <USBD_HID_SendReport>
		  			  			  	  HAL_Delay(100);
 800676c:	2064      	movs	r0, #100	; 0x64
 800676e:	f7f9 ff2f 	bl	80005d0 <HAL_Delay>
		  			  			  	  buffer[3]=0x0;//keycode data
 8006772:	4b1d      	ldr	r3, [pc, #116]	; (80067e8 <main+0x144>)
 8006774:	2200      	movs	r2, #0
 8006776:	70da      	strb	r2, [r3, #3]
		  			  			  	  USBD_HID_SendReport(&hUsbDeviceFS,buffer,8);
 8006778:	2208      	movs	r2, #8
 800677a:	491b      	ldr	r1, [pc, #108]	; (80067e8 <main+0x144>)
 800677c:	481c      	ldr	r0, [pc, #112]	; (80067f0 <main+0x14c>)
 800677e:	f7fe fd21 	bl	80051c4 <USBD_HID_SendReport>
		  			  			  	  //HAL_Delay(100);
		  			  			  	  HAL_Delay(1000);
 8006782:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006786:	f7f9 ff23 	bl	80005d0 <HAL_Delay>
		  			  			  	//End HID_KEYBOARD_HANDS_ON: Report PgDown press and release
		  			  			  // Begin TODO 5 HID_KEYBOARD_HANDS_ON: Report PgDown press and release
		  			  			  		  			  			       #warning "TODO 5 HID_KEYBOARD_HANDS_ON: Report PgDown press and release"
		  			  			  		  			  			  	  //report keycode data - PgDwn press (0x4E)
		  			  			  		  			  			  	  //buffer[3]=0x4E;//keycode data
		  			  			  		  			  			  	  buffer[3]=0x52;//keycode data
 800678a:	4b17      	ldr	r3, [pc, #92]	; (80067e8 <main+0x144>)
 800678c:	2252      	movs	r2, #82	; 0x52
 800678e:	70da      	strb	r2, [r3, #3]
		  			  			  		  			  			  	  USBD_HID_SendReport(&hUsbDeviceFS,buffer,8);
 8006790:	2208      	movs	r2, #8
 8006792:	4915      	ldr	r1, [pc, #84]	; (80067e8 <main+0x144>)
 8006794:	4816      	ldr	r0, [pc, #88]	; (80067f0 <main+0x14c>)
 8006796:	f7fe fd15 	bl	80051c4 <USBD_HID_SendReport>
		  			  			  		  			  			  	  HAL_Delay(100);
 800679a:	2064      	movs	r0, #100	; 0x64
 800679c:	f7f9 ff18 	bl	80005d0 <HAL_Delay>
		  			  			  		  			  			  	  buffer[3]=0x0;//keycode data
 80067a0:	4b11      	ldr	r3, [pc, #68]	; (80067e8 <main+0x144>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	70da      	strb	r2, [r3, #3]
		  			  			  		  			  			  	  USBD_HID_SendReport(&hUsbDeviceFS,buffer,8);
 80067a6:	2208      	movs	r2, #8
 80067a8:	490f      	ldr	r1, [pc, #60]	; (80067e8 <main+0x144>)
 80067aa:	4811      	ldr	r0, [pc, #68]	; (80067f0 <main+0x14c>)
 80067ac:	f7fe fd0a 	bl	80051c4 <USBD_HID_SendReport>
		  			  			  		  			  			  	  //HAL_Delay(100);
		  			  			  		  			  			  	  HAL_Delay(1000);
 80067b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80067b4:	f7f9 ff0c 	bl	80005d0 <HAL_Delay>
		  			  			  		  			  			  	//End HID_KEYBOARD_HANDS_ON: Report PgDown press and release
		  			  			  		  			  		// Begin TODO 5 HID_KEYBOARD_HANDS_ON: Report PgDown press and release
		  			  			  		  			  				  			  			       #warning "TODO 5 HID_KEYBOARD_HANDS_ON: Report PgDown press and release"
		  			  			  		  			  				  			  			  	  //report keycode data - PgDwn press (0x4E)
		  			  			  		  			  				  			  			  	  //buffer[3]=0x4E;//keycode data
		  			  			  		  			  				  			  			  	  buffer[3]=0x62;//keycode data
 80067b8:	4b0b      	ldr	r3, [pc, #44]	; (80067e8 <main+0x144>)
 80067ba:	2262      	movs	r2, #98	; 0x62
 80067bc:	70da      	strb	r2, [r3, #3]
		  			  			  		  			  				  			  			  	  USBD_HID_SendReport(&hUsbDeviceFS,buffer,8);
 80067be:	2208      	movs	r2, #8
 80067c0:	4909      	ldr	r1, [pc, #36]	; (80067e8 <main+0x144>)
 80067c2:	480b      	ldr	r0, [pc, #44]	; (80067f0 <main+0x14c>)
 80067c4:	f7fe fcfe 	bl	80051c4 <USBD_HID_SendReport>
		  			  			  		  			  				  			  			  	  HAL_Delay(100);
 80067c8:	2064      	movs	r0, #100	; 0x64
 80067ca:	f7f9 ff01 	bl	80005d0 <HAL_Delay>
		  			  			  		  			  				  			  			  	  buffer[3]=0x0;//keycode data
 80067ce:	4b06      	ldr	r3, [pc, #24]	; (80067e8 <main+0x144>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	70da      	strb	r2, [r3, #3]
		  			  			  		  			  				  			  			  	  USBD_HID_SendReport(&hUsbDeviceFS,buffer,8);
 80067d4:	2208      	movs	r2, #8
 80067d6:	4904      	ldr	r1, [pc, #16]	; (80067e8 <main+0x144>)
 80067d8:	4805      	ldr	r0, [pc, #20]	; (80067f0 <main+0x14c>)
 80067da:	f7fe fcf3 	bl	80051c4 <USBD_HID_SendReport>
		  			  			  		  			  				  			  			  	  //HAL_Delay(100);
		  			  			  		  			  				  			  			  	  HAL_Delay(1000);
 80067de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80067e2:	f7f9 fef5 	bl	80005d0 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==GPIO_PIN_SET)
 80067e6:	e783      	b.n	80066f0 <main+0x4c>
 80067e8:	20000240 	.word	0x20000240
 80067ec:	40020800 	.word	0x40020800
 80067f0:	20000288 	.word	0x20000288

080067f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b094      	sub	sp, #80	; 0x50
 80067f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80067fa:	f107 0320 	add.w	r3, r7, #32
 80067fe:	2230      	movs	r2, #48	; 0x30
 8006800:	2100      	movs	r1, #0
 8006802:	4618      	mov	r0, r3
 8006804:	f000 fe42 	bl	800748c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006808:	f107 030c 	add.w	r3, r7, #12
 800680c:	2200      	movs	r2, #0
 800680e:	601a      	str	r2, [r3, #0]
 8006810:	605a      	str	r2, [r3, #4]
 8006812:	609a      	str	r2, [r3, #8]
 8006814:	60da      	str	r2, [r3, #12]
 8006816:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006818:	2300      	movs	r3, #0
 800681a:	60bb      	str	r3, [r7, #8]
 800681c:	4b28      	ldr	r3, [pc, #160]	; (80068c0 <SystemClock_Config+0xcc>)
 800681e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006820:	4a27      	ldr	r2, [pc, #156]	; (80068c0 <SystemClock_Config+0xcc>)
 8006822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006826:	6413      	str	r3, [r2, #64]	; 0x40
 8006828:	4b25      	ldr	r3, [pc, #148]	; (80068c0 <SystemClock_Config+0xcc>)
 800682a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006830:	60bb      	str	r3, [r7, #8]
 8006832:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006834:	2300      	movs	r3, #0
 8006836:	607b      	str	r3, [r7, #4]
 8006838:	4b22      	ldr	r3, [pc, #136]	; (80068c4 <SystemClock_Config+0xd0>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a21      	ldr	r2, [pc, #132]	; (80068c4 <SystemClock_Config+0xd0>)
 800683e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006842:	6013      	str	r3, [r2, #0]
 8006844:	4b1f      	ldr	r3, [pc, #124]	; (80068c4 <SystemClock_Config+0xd0>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800684c:	607b      	str	r3, [r7, #4]
 800684e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006850:	2301      	movs	r3, #1
 8006852:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8006854:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8006858:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800685a:	2302      	movs	r3, #2
 800685c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800685e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006862:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006864:	2304      	movs	r3, #4
 8006866:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8006868:	23a8      	movs	r3, #168	; 0xa8
 800686a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800686c:	2302      	movs	r3, #2
 800686e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8006870:	2307      	movs	r3, #7
 8006872:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006874:	f107 0320 	add.w	r3, r7, #32
 8006878:	4618      	mov	r0, r3
 800687a:	f7fb ffbb 	bl	80027f4 <HAL_RCC_OscConfig>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d001      	beq.n	8006888 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006884:	f000 f820 	bl	80068c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006888:	230f      	movs	r3, #15
 800688a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800688c:	2302      	movs	r3, #2
 800688e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006890:	2300      	movs	r3, #0
 8006892:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006894:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006898:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800689a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800689e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80068a0:	f107 030c 	add.w	r3, r7, #12
 80068a4:	2105      	movs	r1, #5
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7fc f9e6 	bl	8002c78 <HAL_RCC_ClockConfig>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d001      	beq.n	80068b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80068b2:	f000 f809 	bl	80068c8 <Error_Handler>
  }
}
 80068b6:	bf00      	nop
 80068b8:	3750      	adds	r7, #80	; 0x50
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	40023800 	.word	0x40023800
 80068c4:	40007000 	.word	0x40007000

080068c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80068c8:	b480      	push	{r7}
 80068ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80068cc:	bf00      	nop
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
	...

080068d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068de:	2300      	movs	r3, #0
 80068e0:	607b      	str	r3, [r7, #4]
 80068e2:	4b10      	ldr	r3, [pc, #64]	; (8006924 <HAL_MspInit+0x4c>)
 80068e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e6:	4a0f      	ldr	r2, [pc, #60]	; (8006924 <HAL_MspInit+0x4c>)
 80068e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068ec:	6453      	str	r3, [r2, #68]	; 0x44
 80068ee:	4b0d      	ldr	r3, [pc, #52]	; (8006924 <HAL_MspInit+0x4c>)
 80068f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068f6:	607b      	str	r3, [r7, #4]
 80068f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80068fa:	2300      	movs	r3, #0
 80068fc:	603b      	str	r3, [r7, #0]
 80068fe:	4b09      	ldr	r3, [pc, #36]	; (8006924 <HAL_MspInit+0x4c>)
 8006900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006902:	4a08      	ldr	r2, [pc, #32]	; (8006924 <HAL_MspInit+0x4c>)
 8006904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006908:	6413      	str	r3, [r2, #64]	; 0x40
 800690a:	4b06      	ldr	r3, [pc, #24]	; (8006924 <HAL_MspInit+0x4c>)
 800690c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006912:	603b      	str	r3, [r7, #0]
 8006914:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006916:	bf00      	nop
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	40023800 	.word	0x40023800

08006928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006928:	b480      	push	{r7}
 800692a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800692c:	bf00      	nop
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006936:	b480      	push	{r7}
 8006938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800693a:	e7fe      	b.n	800693a <HardFault_Handler+0x4>

0800693c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800693c:	b480      	push	{r7}
 800693e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006940:	e7fe      	b.n	8006940 <MemManage_Handler+0x4>

08006942 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006942:	b480      	push	{r7}
 8006944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006946:	e7fe      	b.n	8006946 <BusFault_Handler+0x4>

08006948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006948:	b480      	push	{r7}
 800694a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800694c:	e7fe      	b.n	800694c <UsageFault_Handler+0x4>

0800694e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800694e:	b480      	push	{r7}
 8006950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006952:	bf00      	nop
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800695c:	b480      	push	{r7}
 800695e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006960:	bf00      	nop
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800696a:	b480      	push	{r7}
 800696c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800696e:	bf00      	nop
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800697c:	f7f9 fe08 	bl	8000590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006980:	bf00      	nop
 8006982:	bd80      	pop	{r7, pc}

08006984 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006988:	4802      	ldr	r0, [pc, #8]	; (8006994 <USART3_IRQHandler+0x10>)
 800698a:	f7fc fbb1 	bl	80030f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800698e:	bf00      	nop
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	20000248 	.word	0x20000248

08006998 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800699c:	4802      	ldr	r0, [pc, #8]	; (80069a8 <OTG_FS_IRQHandler+0x10>)
 800699e:	f7fa ff06 	bl	80017ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80069a2:	bf00      	nop
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	20000524 	.word	0x20000524

080069ac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80069b4:	4b11      	ldr	r3, [pc, #68]	; (80069fc <_sbrk+0x50>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d102      	bne.n	80069c2 <_sbrk+0x16>
		heap_end = &end;
 80069bc:	4b0f      	ldr	r3, [pc, #60]	; (80069fc <_sbrk+0x50>)
 80069be:	4a10      	ldr	r2, [pc, #64]	; (8006a00 <_sbrk+0x54>)
 80069c0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80069c2:	4b0e      	ldr	r3, [pc, #56]	; (80069fc <_sbrk+0x50>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80069c8:	4b0c      	ldr	r3, [pc, #48]	; (80069fc <_sbrk+0x50>)
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4413      	add	r3, r2
 80069d0:	466a      	mov	r2, sp
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d907      	bls.n	80069e6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80069d6:	f000 fd1f 	bl	8007418 <__errno>
 80069da:	4602      	mov	r2, r0
 80069dc:	230c      	movs	r3, #12
 80069de:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80069e0:	f04f 33ff 	mov.w	r3, #4294967295
 80069e4:	e006      	b.n	80069f4 <_sbrk+0x48>
	}

	heap_end += incr;
 80069e6:	4b05      	ldr	r3, [pc, #20]	; (80069fc <_sbrk+0x50>)
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4413      	add	r3, r2
 80069ee:	4a03      	ldr	r2, [pc, #12]	; (80069fc <_sbrk+0x50>)
 80069f0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80069f2:	68fb      	ldr	r3, [r7, #12]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	200001e8 	.word	0x200001e8
 8006a00:	20000b30 	.word	0x20000b30

08006a04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006a04:	b480      	push	{r7}
 8006a06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006a08:	4b16      	ldr	r3, [pc, #88]	; (8006a64 <SystemInit+0x60>)
 8006a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a0e:	4a15      	ldr	r2, [pc, #84]	; (8006a64 <SystemInit+0x60>)
 8006a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006a18:	4b13      	ldr	r3, [pc, #76]	; (8006a68 <SystemInit+0x64>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a12      	ldr	r2, [pc, #72]	; (8006a68 <SystemInit+0x64>)
 8006a1e:	f043 0301 	orr.w	r3, r3, #1
 8006a22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006a24:	4b10      	ldr	r3, [pc, #64]	; (8006a68 <SystemInit+0x64>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006a2a:	4b0f      	ldr	r3, [pc, #60]	; (8006a68 <SystemInit+0x64>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a0e      	ldr	r2, [pc, #56]	; (8006a68 <SystemInit+0x64>)
 8006a30:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a38:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006a3a:	4b0b      	ldr	r3, [pc, #44]	; (8006a68 <SystemInit+0x64>)
 8006a3c:	4a0b      	ldr	r2, [pc, #44]	; (8006a6c <SystemInit+0x68>)
 8006a3e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006a40:	4b09      	ldr	r3, [pc, #36]	; (8006a68 <SystemInit+0x64>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a08      	ldr	r2, [pc, #32]	; (8006a68 <SystemInit+0x64>)
 8006a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006a4c:	4b06      	ldr	r3, [pc, #24]	; (8006a68 <SystemInit+0x64>)
 8006a4e:	2200      	movs	r2, #0
 8006a50:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006a52:	4b04      	ldr	r3, [pc, #16]	; (8006a64 <SystemInit+0x60>)
 8006a54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006a58:	609a      	str	r2, [r3, #8]
#endif
}
 8006a5a:	bf00      	nop
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	e000ed00 	.word	0xe000ed00
 8006a68:	40023800 	.word	0x40023800
 8006a6c:	24003010 	.word	0x24003010

08006a70 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8006a74:	4b11      	ldr	r3, [pc, #68]	; (8006abc <MX_USART3_UART_Init+0x4c>)
 8006a76:	4a12      	ldr	r2, [pc, #72]	; (8006ac0 <MX_USART3_UART_Init+0x50>)
 8006a78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8006a7a:	4b10      	ldr	r3, [pc, #64]	; (8006abc <MX_USART3_UART_Init+0x4c>)
 8006a7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006a80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006a82:	4b0e      	ldr	r3, [pc, #56]	; (8006abc <MX_USART3_UART_Init+0x4c>)
 8006a84:	2200      	movs	r2, #0
 8006a86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006a88:	4b0c      	ldr	r3, [pc, #48]	; (8006abc <MX_USART3_UART_Init+0x4c>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006a8e:	4b0b      	ldr	r3, [pc, #44]	; (8006abc <MX_USART3_UART_Init+0x4c>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006a94:	4b09      	ldr	r3, [pc, #36]	; (8006abc <MX_USART3_UART_Init+0x4c>)
 8006a96:	220c      	movs	r2, #12
 8006a98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006a9a:	4b08      	ldr	r3, [pc, #32]	; (8006abc <MX_USART3_UART_Init+0x4c>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006aa0:	4b06      	ldr	r3, [pc, #24]	; (8006abc <MX_USART3_UART_Init+0x4c>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006aa6:	4805      	ldr	r0, [pc, #20]	; (8006abc <MX_USART3_UART_Init+0x4c>)
 8006aa8:	f7fc fad4 	bl	8003054 <HAL_UART_Init>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8006ab2:	f7ff ff09 	bl	80068c8 <Error_Handler>
  }

}
 8006ab6:	bf00      	nop
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	20000248 	.word	0x20000248
 8006ac0:	40004800 	.word	0x40004800

08006ac4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b08a      	sub	sp, #40	; 0x28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006acc:	f107 0314 	add.w	r3, r7, #20
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	605a      	str	r2, [r3, #4]
 8006ad6:	609a      	str	r2, [r3, #8]
 8006ad8:	60da      	str	r2, [r3, #12]
 8006ada:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a1d      	ldr	r2, [pc, #116]	; (8006b58 <HAL_UART_MspInit+0x94>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d134      	bne.n	8006b50 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	613b      	str	r3, [r7, #16]
 8006aea:	4b1c      	ldr	r3, [pc, #112]	; (8006b5c <HAL_UART_MspInit+0x98>)
 8006aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aee:	4a1b      	ldr	r2, [pc, #108]	; (8006b5c <HAL_UART_MspInit+0x98>)
 8006af0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006af4:	6413      	str	r3, [r2, #64]	; 0x40
 8006af6:	4b19      	ldr	r3, [pc, #100]	; (8006b5c <HAL_UART_MspInit+0x98>)
 8006af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006afe:	613b      	str	r3, [r7, #16]
 8006b00:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b02:	2300      	movs	r3, #0
 8006b04:	60fb      	str	r3, [r7, #12]
 8006b06:	4b15      	ldr	r3, [pc, #84]	; (8006b5c <HAL_UART_MspInit+0x98>)
 8006b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0a:	4a14      	ldr	r2, [pc, #80]	; (8006b5c <HAL_UART_MspInit+0x98>)
 8006b0c:	f043 0308 	orr.w	r3, r3, #8
 8006b10:	6313      	str	r3, [r2, #48]	; 0x30
 8006b12:	4b12      	ldr	r3, [pc, #72]	; (8006b5c <HAL_UART_MspInit+0x98>)
 8006b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b16:	f003 0308 	and.w	r3, r3, #8
 8006b1a:	60fb      	str	r3, [r7, #12]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8006b1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b24:	2302      	movs	r3, #2
 8006b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006b30:	2307      	movs	r3, #7
 8006b32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b34:	f107 0314 	add.w	r3, r7, #20
 8006b38:	4619      	mov	r1, r3
 8006b3a:	4809      	ldr	r0, [pc, #36]	; (8006b60 <HAL_UART_MspInit+0x9c>)
 8006b3c:	f7fa fb0c 	bl	8001158 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006b40:	2200      	movs	r2, #0
 8006b42:	2100      	movs	r1, #0
 8006b44:	2027      	movs	r0, #39	; 0x27
 8006b46:	f7f9 fe40 	bl	80007ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006b4a:	2027      	movs	r0, #39	; 0x27
 8006b4c:	f7f9 fe59 	bl	8000802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006b50:	bf00      	nop
 8006b52:	3728      	adds	r7, #40	; 0x28
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	40004800 	.word	0x40004800
 8006b5c:	40023800 	.word	0x40023800
 8006b60:	40020c00 	.word	0x40020c00

08006b64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	490e      	ldr	r1, [pc, #56]	; (8006ba4 <MX_USB_DEVICE_Init+0x40>)
 8006b6c:	480e      	ldr	r0, [pc, #56]	; (8006ba8 <MX_USB_DEVICE_Init+0x44>)
 8006b6e:	f7fe fb9d 	bl	80052ac <USBD_Init>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d001      	beq.n	8006b7c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006b78:	f7ff fea6 	bl	80068c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006b7c:	490b      	ldr	r1, [pc, #44]	; (8006bac <MX_USB_DEVICE_Init+0x48>)
 8006b7e:	480a      	ldr	r0, [pc, #40]	; (8006ba8 <MX_USB_DEVICE_Init+0x44>)
 8006b80:	f7fe fbbf 	bl	8005302 <USBD_RegisterClass>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d001      	beq.n	8006b8e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006b8a:	f7ff fe9d 	bl	80068c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006b8e:	4806      	ldr	r0, [pc, #24]	; (8006ba8 <MX_USB_DEVICE_Init+0x44>)
 8006b90:	f7fe fbd1 	bl	8005336 <USBD_Start>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d001      	beq.n	8006b9e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006b9a:	f7ff fe95 	bl	80068c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006b9e:	bf00      	nop
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	20000114 	.word	0x20000114
 8006ba8:	20000288 	.word	0x20000288
 8006bac:	20000008 	.word	0x20000008

08006bb0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b08a      	sub	sp, #40	; 0x28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bb8:	f107 0314 	add.w	r3, r7, #20
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	601a      	str	r2, [r3, #0]
 8006bc0:	605a      	str	r2, [r3, #4]
 8006bc2:	609a      	str	r2, [r3, #8]
 8006bc4:	60da      	str	r2, [r3, #12]
 8006bc6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006bd0:	d147      	bne.n	8006c62 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	613b      	str	r3, [r7, #16]
 8006bd6:	4b25      	ldr	r3, [pc, #148]	; (8006c6c <HAL_PCD_MspInit+0xbc>)
 8006bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bda:	4a24      	ldr	r2, [pc, #144]	; (8006c6c <HAL_PCD_MspInit+0xbc>)
 8006bdc:	f043 0301 	orr.w	r3, r3, #1
 8006be0:	6313      	str	r3, [r2, #48]	; 0x30
 8006be2:	4b22      	ldr	r3, [pc, #136]	; (8006c6c <HAL_PCD_MspInit+0xbc>)
 8006be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	613b      	str	r3, [r7, #16]
 8006bec:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8006bee:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8006bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006c00:	230a      	movs	r3, #10
 8006c02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c04:	f107 0314 	add.w	r3, r7, #20
 8006c08:	4619      	mov	r1, r3
 8006c0a:	4819      	ldr	r0, [pc, #100]	; (8006c70 <HAL_PCD_MspInit+0xc0>)
 8006c0c:	f7fa faa4 	bl	8001158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8006c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c16:	2300      	movs	r3, #0
 8006c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8006c1e:	f107 0314 	add.w	r3, r7, #20
 8006c22:	4619      	mov	r1, r3
 8006c24:	4812      	ldr	r0, [pc, #72]	; (8006c70 <HAL_PCD_MspInit+0xc0>)
 8006c26:	f7fa fa97 	bl	8001158 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006c2a:	4b10      	ldr	r3, [pc, #64]	; (8006c6c <HAL_PCD_MspInit+0xbc>)
 8006c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c2e:	4a0f      	ldr	r2, [pc, #60]	; (8006c6c <HAL_PCD_MspInit+0xbc>)
 8006c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c34:	6353      	str	r3, [r2, #52]	; 0x34
 8006c36:	2300      	movs	r3, #0
 8006c38:	60fb      	str	r3, [r7, #12]
 8006c3a:	4b0c      	ldr	r3, [pc, #48]	; (8006c6c <HAL_PCD_MspInit+0xbc>)
 8006c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c3e:	4a0b      	ldr	r2, [pc, #44]	; (8006c6c <HAL_PCD_MspInit+0xbc>)
 8006c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c44:	6453      	str	r3, [r2, #68]	; 0x44
 8006c46:	4b09      	ldr	r3, [pc, #36]	; (8006c6c <HAL_PCD_MspInit+0xbc>)
 8006c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c4e:	60fb      	str	r3, [r7, #12]
 8006c50:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006c52:	2200      	movs	r2, #0
 8006c54:	2100      	movs	r1, #0
 8006c56:	2043      	movs	r0, #67	; 0x43
 8006c58:	f7f9 fdb7 	bl	80007ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006c5c:	2043      	movs	r0, #67	; 0x43
 8006c5e:	f7f9 fdd0 	bl	8000802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006c62:	bf00      	nop
 8006c64:	3728      	adds	r7, #40	; 0x28
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	40023800 	.word	0x40023800
 8006c70:	40020000 	.word	0x40020000

08006c74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006c88:	4619      	mov	r1, r3
 8006c8a:	4610      	mov	r0, r2
 8006c8c:	f7fe fb9c 	bl	80053c8 <USBD_LL_SetupStage>
}
 8006c90:	bf00      	nop
 8006c92:	3708      	adds	r7, #8
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006caa:	78fa      	ldrb	r2, [r7, #3]
 8006cac:	6879      	ldr	r1, [r7, #4]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	00db      	lsls	r3, r3, #3
 8006cb2:	1a9b      	subs	r3, r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	440b      	add	r3, r1
 8006cb8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	78fb      	ldrb	r3, [r7, #3]
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	f7fe fbcc 	bl	800545e <USBD_LL_DataOutStage>
}
 8006cc6:	bf00      	nop
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b082      	sub	sp, #8
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006ce0:	78fa      	ldrb	r2, [r7, #3]
 8006ce2:	6879      	ldr	r1, [r7, #4]
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	00db      	lsls	r3, r3, #3
 8006ce8:	1a9b      	subs	r3, r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	440b      	add	r3, r1
 8006cee:	3348      	adds	r3, #72	; 0x48
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	78fb      	ldrb	r3, [r7, #3]
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	f7fe fc23 	bl	8005540 <USBD_LL_DataInStage>
}
 8006cfa:	bf00      	nop
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b082      	sub	sp, #8
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7fe fd31 	bl	8005778 <USBD_LL_SOF>
}
 8006d16:	bf00      	nop
 8006d18:	3708      	adds	r7, #8
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b084      	sub	sp, #16
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006d26:	2301      	movs	r3, #1
 8006d28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d102      	bne.n	8006d38 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006d32:	2300      	movs	r3, #0
 8006d34:	73fb      	strb	r3, [r7, #15]
 8006d36:	e008      	b.n	8006d4a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d102      	bne.n	8006d46 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006d40:	2301      	movs	r3, #1
 8006d42:	73fb      	strb	r3, [r7, #15]
 8006d44:	e001      	b.n	8006d4a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006d46:	f7ff fdbf 	bl	80068c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d50:	7bfa      	ldrb	r2, [r7, #15]
 8006d52:	4611      	mov	r1, r2
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7fe fcd9 	bl	800570c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7fe fc92 	bl	800568a <USBD_LL_Reset>
}
 8006d66:	bf00      	nop
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
	...

08006d70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fe fcd4 	bl	800572c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	6812      	ldr	r2, [r2, #0]
 8006d92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d96:	f043 0301 	orr.w	r3, r3, #1
 8006d9a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a1b      	ldr	r3, [r3, #32]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d005      	beq.n	8006db0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006da4:	4b04      	ldr	r3, [pc, #16]	; (8006db8 <HAL_PCD_SuspendCallback+0x48>)
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	4a03      	ldr	r2, [pc, #12]	; (8006db8 <HAL_PCD_SuspendCallback+0x48>)
 8006daa:	f043 0306 	orr.w	r3, r3, #6
 8006dae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006db0:	bf00      	nop
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	e000ed00 	.word	0xe000ed00

08006dbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7fe fcc3 	bl	8005756 <USBD_LL_Resume>
}
 8006dd0:	bf00      	nop
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	460b      	mov	r3, r1
 8006de2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006dea:	78fa      	ldrb	r2, [r7, #3]
 8006dec:	4611      	mov	r1, r2
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7fe fce9 	bl	80057c6 <USBD_LL_IsoOUTIncomplete>
}
 8006df4:	bf00      	nop
 8006df6:	3708      	adds	r7, #8
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	460b      	mov	r3, r1
 8006e06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006e0e:	78fa      	ldrb	r2, [r7, #3]
 8006e10:	4611      	mov	r1, r2
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fe fcca 	bl	80057ac <USBD_LL_IsoINIncomplete>
}
 8006e18:	bf00      	nop
 8006e1a:	3708      	adds	r7, #8
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fe fcd6 	bl	80057e0 <USBD_LL_DevConnected>
}
 8006e34:	bf00      	nop
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fe fcd3 	bl	80057f6 <USBD_LL_DevDisconnected>
}
 8006e50:	bf00      	nop
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d13c      	bne.n	8006ee2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006e68:	4a20      	ldr	r2, [pc, #128]	; (8006eec <USBD_LL_Init+0x94>)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a1e      	ldr	r2, [pc, #120]	; (8006eec <USBD_LL_Init+0x94>)
 8006e74:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006e78:	4b1c      	ldr	r3, [pc, #112]	; (8006eec <USBD_LL_Init+0x94>)
 8006e7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006e7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006e80:	4b1a      	ldr	r3, [pc, #104]	; (8006eec <USBD_LL_Init+0x94>)
 8006e82:	2204      	movs	r2, #4
 8006e84:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006e86:	4b19      	ldr	r3, [pc, #100]	; (8006eec <USBD_LL_Init+0x94>)
 8006e88:	2202      	movs	r2, #2
 8006e8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006e8c:	4b17      	ldr	r3, [pc, #92]	; (8006eec <USBD_LL_Init+0x94>)
 8006e8e:	2200      	movs	r2, #0
 8006e90:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006e92:	4b16      	ldr	r3, [pc, #88]	; (8006eec <USBD_LL_Init+0x94>)
 8006e94:	2202      	movs	r2, #2
 8006e96:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006e98:	4b14      	ldr	r3, [pc, #80]	; (8006eec <USBD_LL_Init+0x94>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006e9e:	4b13      	ldr	r3, [pc, #76]	; (8006eec <USBD_LL_Init+0x94>)
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006ea4:	4b11      	ldr	r3, [pc, #68]	; (8006eec <USBD_LL_Init+0x94>)
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006eaa:	4b10      	ldr	r3, [pc, #64]	; (8006eec <USBD_LL_Init+0x94>)
 8006eac:	2200      	movs	r2, #0
 8006eae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006eb0:	4b0e      	ldr	r3, [pc, #56]	; (8006eec <USBD_LL_Init+0x94>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006eb6:	480d      	ldr	r0, [pc, #52]	; (8006eec <USBD_LL_Init+0x94>)
 8006eb8:	f7fa fb29 	bl	800150e <HAL_PCD_Init>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d001      	beq.n	8006ec6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006ec2:	f7ff fd01 	bl	80068c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006ec6:	2180      	movs	r1, #128	; 0x80
 8006ec8:	4808      	ldr	r0, [pc, #32]	; (8006eec <USBD_LL_Init+0x94>)
 8006eca:	f7fb fc76 	bl	80027ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006ece:	2240      	movs	r2, #64	; 0x40
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	4806      	ldr	r0, [pc, #24]	; (8006eec <USBD_LL_Init+0x94>)
 8006ed4:	f7fb fc2a 	bl	800272c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006ed8:	2280      	movs	r2, #128	; 0x80
 8006eda:	2101      	movs	r1, #1
 8006edc:	4803      	ldr	r0, [pc, #12]	; (8006eec <USBD_LL_Init+0x94>)
 8006ede:	f7fb fc25 	bl	800272c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	20000524 	.word	0x20000524

08006ef0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006efc:	2300      	movs	r3, #0
 8006efe:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fa fc1e 	bl	8001748 <HAL_PCD_Start>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 f91c 	bl	8007150 <USBD_Get_USB_Status>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006f1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b084      	sub	sp, #16
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	4608      	mov	r0, r1
 8006f30:	4611      	mov	r1, r2
 8006f32:	461a      	mov	r2, r3
 8006f34:	4603      	mov	r3, r0
 8006f36:	70fb      	strb	r3, [r7, #3]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	70bb      	strb	r3, [r7, #2]
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f40:	2300      	movs	r3, #0
 8006f42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f44:	2300      	movs	r3, #0
 8006f46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8006f4e:	78bb      	ldrb	r3, [r7, #2]
 8006f50:	883a      	ldrh	r2, [r7, #0]
 8006f52:	78f9      	ldrb	r1, [r7, #3]
 8006f54:	f7fa fff3 	bl	8001f3e <HAL_PCD_EP_Open>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 f8f6 	bl	8007150 <USBD_Get_USB_Status>
 8006f64:	4603      	mov	r3, r0
 8006f66:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006f68:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b084      	sub	sp, #16
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f82:	2300      	movs	r3, #0
 8006f84:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006f8c:	78fa      	ldrb	r2, [r7, #3]
 8006f8e:	4611      	mov	r1, r2
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7fb f83c 	bl	800200e <HAL_PCD_EP_Close>
 8006f96:	4603      	mov	r3, r0
 8006f98:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8006f9a:	7bfb      	ldrb	r3, [r7, #15]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f000 f8d7 	bl	8007150 <USBD_Get_USB_Status>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006fa6:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3710      	adds	r7, #16
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	460b      	mov	r3, r1
 8006fba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006fca:	78fa      	ldrb	r2, [r7, #3]
 8006fcc:	4611      	mov	r1, r2
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7fb f8fc 	bl	80021cc <HAL_PCD_EP_SetStall>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fd8:	7bfb      	ldrb	r3, [r7, #15]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 f8b8 	bl	8007150 <USBD_Get_USB_Status>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8006fe4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b084      	sub	sp, #16
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ffe:	2300      	movs	r3, #0
 8007000:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007008:	78fa      	ldrb	r2, [r7, #3]
 800700a:	4611      	mov	r1, r2
 800700c:	4618      	mov	r0, r3
 800700e:	f7fb f941 	bl	8002294 <HAL_PCD_EP_ClrStall>
 8007012:	4603      	mov	r3, r0
 8007014:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8007016:	7bfb      	ldrb	r3, [r7, #15]
 8007018:	4618      	mov	r0, r3
 800701a:	f000 f899 	bl	8007150 <USBD_Get_USB_Status>
 800701e:	4603      	mov	r3, r0
 8007020:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8007022:	7bbb      	ldrb	r3, [r7, #14]
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	460b      	mov	r3, r1
 8007036:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800703e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007040:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007044:	2b00      	cmp	r3, #0
 8007046:	da0b      	bge.n	8007060 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007048:	78fb      	ldrb	r3, [r7, #3]
 800704a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800704e:	68f9      	ldr	r1, [r7, #12]
 8007050:	4613      	mov	r3, r2
 8007052:	00db      	lsls	r3, r3, #3
 8007054:	1a9b      	subs	r3, r3, r2
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	440b      	add	r3, r1
 800705a:	333e      	adds	r3, #62	; 0x3e
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	e00b      	b.n	8007078 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007060:	78fb      	ldrb	r3, [r7, #3]
 8007062:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007066:	68f9      	ldr	r1, [r7, #12]
 8007068:	4613      	mov	r3, r2
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	1a9b      	subs	r3, r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	440b      	add	r3, r1
 8007072:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007076:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007078:	4618      	mov	r0, r3
 800707a:	3714      	adds	r7, #20
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	460b      	mov	r3, r1
 800708e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007090:	2300      	movs	r3, #0
 8007092:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007094:	2300      	movs	r3, #0
 8007096:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800709e:	78fa      	ldrb	r2, [r7, #3]
 80070a0:	4611      	mov	r1, r2
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7fa ff26 	bl	8001ef4 <HAL_PCD_SetAddress>
 80070a8:	4603      	mov	r3, r0
 80070aa:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80070ac:	7bfb      	ldrb	r3, [r7, #15]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f000 f84e 	bl	8007150 <USBD_Get_USB_Status>
 80070b4:	4603      	mov	r3, r0
 80070b6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80070b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b086      	sub	sp, #24
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	60f8      	str	r0, [r7, #12]
 80070ca:	607a      	str	r2, [r7, #4]
 80070cc:	461a      	mov	r2, r3
 80070ce:	460b      	mov	r3, r1
 80070d0:	72fb      	strb	r3, [r7, #11]
 80070d2:	4613      	mov	r3, r2
 80070d4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070d6:	2300      	movs	r3, #0
 80070d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070da:	2300      	movs	r3, #0
 80070dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80070e4:	893b      	ldrh	r3, [r7, #8]
 80070e6:	7af9      	ldrb	r1, [r7, #11]
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	f7fb f825 	bl	8002138 <HAL_PCD_EP_Transmit>
 80070ee:	4603      	mov	r3, r0
 80070f0:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80070f2:	7dfb      	ldrb	r3, [r7, #23]
 80070f4:	4618      	mov	r0, r3
 80070f6:	f000 f82b 	bl	8007150 <USBD_Get_USB_Status>
 80070fa:	4603      	mov	r3, r0
 80070fc:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80070fe:	7dbb      	ldrb	r3, [r7, #22]
}
 8007100:	4618      	mov	r0, r3
 8007102:	3718      	adds	r7, #24
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	607a      	str	r2, [r7, #4]
 8007112:	461a      	mov	r2, r3
 8007114:	460b      	mov	r3, r1
 8007116:	72fb      	strb	r3, [r7, #11]
 8007118:	4613      	mov	r3, r2
 800711a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800711c:	2300      	movs	r3, #0
 800711e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007120:	2300      	movs	r3, #0
 8007122:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800712a:	893b      	ldrh	r3, [r7, #8]
 800712c:	7af9      	ldrb	r1, [r7, #11]
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	f7fa ffb7 	bl	80020a2 <HAL_PCD_EP_Receive>
 8007134:	4603      	mov	r3, r0
 8007136:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8007138:	7dfb      	ldrb	r3, [r7, #23]
 800713a:	4618      	mov	r0, r3
 800713c:	f000 f808 	bl	8007150 <USBD_Get_USB_Status>
 8007140:	4603      	mov	r3, r0
 8007142:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8007144:	7dbb      	ldrb	r3, [r7, #22]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3718      	adds	r7, #24
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
	...

08007150 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	4603      	mov	r3, r0
 8007158:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800715a:	2300      	movs	r3, #0
 800715c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800715e:	79fb      	ldrb	r3, [r7, #7]
 8007160:	2b03      	cmp	r3, #3
 8007162:	d817      	bhi.n	8007194 <USBD_Get_USB_Status+0x44>
 8007164:	a201      	add	r2, pc, #4	; (adr r2, 800716c <USBD_Get_USB_Status+0x1c>)
 8007166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716a:	bf00      	nop
 800716c:	0800717d 	.word	0x0800717d
 8007170:	08007183 	.word	0x08007183
 8007174:	08007189 	.word	0x08007189
 8007178:	0800718f 	.word	0x0800718f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800717c:	2300      	movs	r3, #0
 800717e:	73fb      	strb	r3, [r7, #15]
    break;
 8007180:	e00b      	b.n	800719a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007182:	2302      	movs	r3, #2
 8007184:	73fb      	strb	r3, [r7, #15]
    break;
 8007186:	e008      	b.n	800719a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007188:	2301      	movs	r3, #1
 800718a:	73fb      	strb	r3, [r7, #15]
    break;
 800718c:	e005      	b.n	800719a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800718e:	2302      	movs	r3, #2
 8007190:	73fb      	strb	r3, [r7, #15]
    break;
 8007192:	e002      	b.n	800719a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007194:	2302      	movs	r3, #2
 8007196:	73fb      	strb	r3, [r7, #15]
    break;
 8007198:	bf00      	nop
  }
  return usb_status;
 800719a:	7bfb      	ldrb	r3, [r7, #15]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3714      	adds	r7, #20
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	4603      	mov	r3, r0
 80071b0:	6039      	str	r1, [r7, #0]
 80071b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	2212      	movs	r2, #18
 80071b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80071ba:	4b03      	ldr	r3, [pc, #12]	; (80071c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80071bc:	4618      	mov	r0, r3
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr
 80071c8:	20000130 	.word	0x20000130

080071cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	4603      	mov	r3, r0
 80071d4:	6039      	str	r1, [r7, #0]
 80071d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	2204      	movs	r2, #4
 80071dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80071de:	4b03      	ldr	r3, [pc, #12]	; (80071ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	20000144 	.word	0x20000144

080071f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	4603      	mov	r3, r0
 80071f8:	6039      	str	r1, [r7, #0]
 80071fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071fc:	79fb      	ldrb	r3, [r7, #7]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d105      	bne.n	800720e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	4907      	ldr	r1, [pc, #28]	; (8007224 <USBD_FS_ProductStrDescriptor+0x34>)
 8007206:	4808      	ldr	r0, [pc, #32]	; (8007228 <USBD_FS_ProductStrDescriptor+0x38>)
 8007208:	f7fe ffcc 	bl	80061a4 <USBD_GetString>
 800720c:	e004      	b.n	8007218 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800720e:	683a      	ldr	r2, [r7, #0]
 8007210:	4904      	ldr	r1, [pc, #16]	; (8007224 <USBD_FS_ProductStrDescriptor+0x34>)
 8007212:	4805      	ldr	r0, [pc, #20]	; (8007228 <USBD_FS_ProductStrDescriptor+0x38>)
 8007214:	f7fe ffc6 	bl	80061a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007218:	4b02      	ldr	r3, [pc, #8]	; (8007224 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800721a:	4618      	mov	r0, r3
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	2000092c 	.word	0x2000092c
 8007228:	08007628 	.word	0x08007628

0800722c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	4603      	mov	r3, r0
 8007234:	6039      	str	r1, [r7, #0]
 8007236:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007238:	683a      	ldr	r2, [r7, #0]
 800723a:	4904      	ldr	r1, [pc, #16]	; (800724c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800723c:	4804      	ldr	r0, [pc, #16]	; (8007250 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800723e:	f7fe ffb1 	bl	80061a4 <USBD_GetString>
  return USBD_StrDesc;
 8007242:	4b02      	ldr	r3, [pc, #8]	; (800724c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007244:	4618      	mov	r0, r3
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	2000092c 	.word	0x2000092c
 8007250:	08007640 	.word	0x08007640

08007254 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	4603      	mov	r3, r0
 800725c:	6039      	str	r1, [r7, #0]
 800725e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	221a      	movs	r2, #26
 8007264:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007266:	f000 f843 	bl	80072f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800726a:	4b02      	ldr	r3, [pc, #8]	; (8007274 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800726c:	4618      	mov	r0, r3
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	20000148 	.word	0x20000148

08007278 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	4603      	mov	r3, r0
 8007280:	6039      	str	r1, [r7, #0]
 8007282:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007284:	79fb      	ldrb	r3, [r7, #7]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d105      	bne.n	8007296 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	4907      	ldr	r1, [pc, #28]	; (80072ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800728e:	4808      	ldr	r0, [pc, #32]	; (80072b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007290:	f7fe ff88 	bl	80061a4 <USBD_GetString>
 8007294:	e004      	b.n	80072a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	4904      	ldr	r1, [pc, #16]	; (80072ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800729a:	4805      	ldr	r0, [pc, #20]	; (80072b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800729c:	f7fe ff82 	bl	80061a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80072a0:	4b02      	ldr	r3, [pc, #8]	; (80072ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3708      	adds	r7, #8
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	2000092c 	.word	0x2000092c
 80072b0:	08007654 	.word	0x08007654

080072b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	4603      	mov	r3, r0
 80072bc:	6039      	str	r1, [r7, #0]
 80072be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80072c0:	79fb      	ldrb	r3, [r7, #7]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d105      	bne.n	80072d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80072c6:	683a      	ldr	r2, [r7, #0]
 80072c8:	4907      	ldr	r1, [pc, #28]	; (80072e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80072ca:	4808      	ldr	r0, [pc, #32]	; (80072ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80072cc:	f7fe ff6a 	bl	80061a4 <USBD_GetString>
 80072d0:	e004      	b.n	80072dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	4904      	ldr	r1, [pc, #16]	; (80072e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80072d6:	4805      	ldr	r0, [pc, #20]	; (80072ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80072d8:	f7fe ff64 	bl	80061a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80072dc:	4b02      	ldr	r3, [pc, #8]	; (80072e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	2000092c 	.word	0x2000092c
 80072ec:	08007660 	.word	0x08007660

080072f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80072f6:	4b0f      	ldr	r3, [pc, #60]	; (8007334 <Get_SerialNum+0x44>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80072fc:	4b0e      	ldr	r3, [pc, #56]	; (8007338 <Get_SerialNum+0x48>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007302:	4b0e      	ldr	r3, [pc, #56]	; (800733c <Get_SerialNum+0x4c>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4413      	add	r3, r2
 800730e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d009      	beq.n	800732a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007316:	2208      	movs	r2, #8
 8007318:	4909      	ldr	r1, [pc, #36]	; (8007340 <Get_SerialNum+0x50>)
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f000 f814 	bl	8007348 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007320:	2204      	movs	r2, #4
 8007322:	4908      	ldr	r1, [pc, #32]	; (8007344 <Get_SerialNum+0x54>)
 8007324:	68b8      	ldr	r0, [r7, #8]
 8007326:	f000 f80f 	bl	8007348 <IntToUnicode>
  }
}
 800732a:	bf00      	nop
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	1fff7a10 	.word	0x1fff7a10
 8007338:	1fff7a14 	.word	0x1fff7a14
 800733c:	1fff7a18 	.word	0x1fff7a18
 8007340:	2000014a 	.word	0x2000014a
 8007344:	2000015a 	.word	0x2000015a

08007348 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007348:	b480      	push	{r7}
 800734a:	b087      	sub	sp, #28
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	4613      	mov	r3, r2
 8007354:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007356:	2300      	movs	r3, #0
 8007358:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800735a:	2300      	movs	r3, #0
 800735c:	75fb      	strb	r3, [r7, #23]
 800735e:	e027      	b.n	80073b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	0f1b      	lsrs	r3, r3, #28
 8007364:	2b09      	cmp	r3, #9
 8007366:	d80b      	bhi.n	8007380 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	0f1b      	lsrs	r3, r3, #28
 800736c:	b2da      	uxtb	r2, r3
 800736e:	7dfb      	ldrb	r3, [r7, #23]
 8007370:	005b      	lsls	r3, r3, #1
 8007372:	4619      	mov	r1, r3
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	440b      	add	r3, r1
 8007378:	3230      	adds	r2, #48	; 0x30
 800737a:	b2d2      	uxtb	r2, r2
 800737c:	701a      	strb	r2, [r3, #0]
 800737e:	e00a      	b.n	8007396 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	0f1b      	lsrs	r3, r3, #28
 8007384:	b2da      	uxtb	r2, r3
 8007386:	7dfb      	ldrb	r3, [r7, #23]
 8007388:	005b      	lsls	r3, r3, #1
 800738a:	4619      	mov	r1, r3
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	440b      	add	r3, r1
 8007390:	3237      	adds	r2, #55	; 0x37
 8007392:	b2d2      	uxtb	r2, r2
 8007394:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	011b      	lsls	r3, r3, #4
 800739a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800739c:	7dfb      	ldrb	r3, [r7, #23]
 800739e:	005b      	lsls	r3, r3, #1
 80073a0:	3301      	adds	r3, #1
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	4413      	add	r3, r2
 80073a6:	2200      	movs	r2, #0
 80073a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80073aa:	7dfb      	ldrb	r3, [r7, #23]
 80073ac:	3301      	adds	r3, #1
 80073ae:	75fb      	strb	r3, [r7, #23]
 80073b0:	7dfa      	ldrb	r2, [r7, #23]
 80073b2:	79fb      	ldrb	r3, [r7, #7]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d3d3      	bcc.n	8007360 <IntToUnicode+0x18>
  }
}
 80073b8:	bf00      	nop
 80073ba:	371c      	adds	r7, #28
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80073c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80073fc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80073c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80073ca:	e003      	b.n	80073d4 <LoopCopyDataInit>

080073cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80073cc:	4b0c      	ldr	r3, [pc, #48]	; (8007400 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80073ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80073d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80073d2:	3104      	adds	r1, #4

080073d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80073d4:	480b      	ldr	r0, [pc, #44]	; (8007404 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80073d6:	4b0c      	ldr	r3, [pc, #48]	; (8007408 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80073d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80073da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80073dc:	d3f6      	bcc.n	80073cc <CopyDataInit>
  ldr  r2, =_sbss
 80073de:	4a0b      	ldr	r2, [pc, #44]	; (800740c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80073e0:	e002      	b.n	80073e8 <LoopFillZerobss>

080073e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80073e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80073e4:	f842 3b04 	str.w	r3, [r2], #4

080073e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80073e8:	4b09      	ldr	r3, [pc, #36]	; (8007410 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80073ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80073ec:	d3f9      	bcc.n	80073e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80073ee:	f7ff fb09 	bl	8006a04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80073f2:	f000 f817 	bl	8007424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80073f6:	f7ff f955 	bl	80066a4 <main>
  bx  lr    
 80073fa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80073fc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8007400:	08007698 	.word	0x08007698
  ldr  r0, =_sdata
 8007404:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007408:	200001c8 	.word	0x200001c8
  ldr  r2, =_sbss
 800740c:	200001c8 	.word	0x200001c8
  ldr  r3, = _ebss
 8007410:	20000b30 	.word	0x20000b30

08007414 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007414:	e7fe      	b.n	8007414 <ADC_IRQHandler>
	...

08007418 <__errno>:
 8007418:	4b01      	ldr	r3, [pc, #4]	; (8007420 <__errno+0x8>)
 800741a:	6818      	ldr	r0, [r3, #0]
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	20000164 	.word	0x20000164

08007424 <__libc_init_array>:
 8007424:	b570      	push	{r4, r5, r6, lr}
 8007426:	4e0d      	ldr	r6, [pc, #52]	; (800745c <__libc_init_array+0x38>)
 8007428:	4c0d      	ldr	r4, [pc, #52]	; (8007460 <__libc_init_array+0x3c>)
 800742a:	1ba4      	subs	r4, r4, r6
 800742c:	10a4      	asrs	r4, r4, #2
 800742e:	2500      	movs	r5, #0
 8007430:	42a5      	cmp	r5, r4
 8007432:	d109      	bne.n	8007448 <__libc_init_array+0x24>
 8007434:	4e0b      	ldr	r6, [pc, #44]	; (8007464 <__libc_init_array+0x40>)
 8007436:	4c0c      	ldr	r4, [pc, #48]	; (8007468 <__libc_init_array+0x44>)
 8007438:	f000 f8ea 	bl	8007610 <_init>
 800743c:	1ba4      	subs	r4, r4, r6
 800743e:	10a4      	asrs	r4, r4, #2
 8007440:	2500      	movs	r5, #0
 8007442:	42a5      	cmp	r5, r4
 8007444:	d105      	bne.n	8007452 <__libc_init_array+0x2e>
 8007446:	bd70      	pop	{r4, r5, r6, pc}
 8007448:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800744c:	4798      	blx	r3
 800744e:	3501      	adds	r5, #1
 8007450:	e7ee      	b.n	8007430 <__libc_init_array+0xc>
 8007452:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007456:	4798      	blx	r3
 8007458:	3501      	adds	r5, #1
 800745a:	e7f2      	b.n	8007442 <__libc_init_array+0x1e>
 800745c:	08007690 	.word	0x08007690
 8007460:	08007690 	.word	0x08007690
 8007464:	08007690 	.word	0x08007690
 8007468:	08007694 	.word	0x08007694

0800746c <malloc>:
 800746c:	4b02      	ldr	r3, [pc, #8]	; (8007478 <malloc+0xc>)
 800746e:	4601      	mov	r1, r0
 8007470:	6818      	ldr	r0, [r3, #0]
 8007472:	f000 b861 	b.w	8007538 <_malloc_r>
 8007476:	bf00      	nop
 8007478:	20000164 	.word	0x20000164

0800747c <free>:
 800747c:	4b02      	ldr	r3, [pc, #8]	; (8007488 <free+0xc>)
 800747e:	4601      	mov	r1, r0
 8007480:	6818      	ldr	r0, [r3, #0]
 8007482:	f000 b80b 	b.w	800749c <_free_r>
 8007486:	bf00      	nop
 8007488:	20000164 	.word	0x20000164

0800748c <memset>:
 800748c:	4402      	add	r2, r0
 800748e:	4603      	mov	r3, r0
 8007490:	4293      	cmp	r3, r2
 8007492:	d100      	bne.n	8007496 <memset+0xa>
 8007494:	4770      	bx	lr
 8007496:	f803 1b01 	strb.w	r1, [r3], #1
 800749a:	e7f9      	b.n	8007490 <memset+0x4>

0800749c <_free_r>:
 800749c:	b538      	push	{r3, r4, r5, lr}
 800749e:	4605      	mov	r5, r0
 80074a0:	2900      	cmp	r1, #0
 80074a2:	d045      	beq.n	8007530 <_free_r+0x94>
 80074a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074a8:	1f0c      	subs	r4, r1, #4
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	bfb8      	it	lt
 80074ae:	18e4      	addlt	r4, r4, r3
 80074b0:	f000 f8ac 	bl	800760c <__malloc_lock>
 80074b4:	4a1f      	ldr	r2, [pc, #124]	; (8007534 <_free_r+0x98>)
 80074b6:	6813      	ldr	r3, [r2, #0]
 80074b8:	4610      	mov	r0, r2
 80074ba:	b933      	cbnz	r3, 80074ca <_free_r+0x2e>
 80074bc:	6063      	str	r3, [r4, #4]
 80074be:	6014      	str	r4, [r2, #0]
 80074c0:	4628      	mov	r0, r5
 80074c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074c6:	f000 b8a2 	b.w	800760e <__malloc_unlock>
 80074ca:	42a3      	cmp	r3, r4
 80074cc:	d90c      	bls.n	80074e8 <_free_r+0x4c>
 80074ce:	6821      	ldr	r1, [r4, #0]
 80074d0:	1862      	adds	r2, r4, r1
 80074d2:	4293      	cmp	r3, r2
 80074d4:	bf04      	itt	eq
 80074d6:	681a      	ldreq	r2, [r3, #0]
 80074d8:	685b      	ldreq	r3, [r3, #4]
 80074da:	6063      	str	r3, [r4, #4]
 80074dc:	bf04      	itt	eq
 80074de:	1852      	addeq	r2, r2, r1
 80074e0:	6022      	streq	r2, [r4, #0]
 80074e2:	6004      	str	r4, [r0, #0]
 80074e4:	e7ec      	b.n	80074c0 <_free_r+0x24>
 80074e6:	4613      	mov	r3, r2
 80074e8:	685a      	ldr	r2, [r3, #4]
 80074ea:	b10a      	cbz	r2, 80074f0 <_free_r+0x54>
 80074ec:	42a2      	cmp	r2, r4
 80074ee:	d9fa      	bls.n	80074e6 <_free_r+0x4a>
 80074f0:	6819      	ldr	r1, [r3, #0]
 80074f2:	1858      	adds	r0, r3, r1
 80074f4:	42a0      	cmp	r0, r4
 80074f6:	d10b      	bne.n	8007510 <_free_r+0x74>
 80074f8:	6820      	ldr	r0, [r4, #0]
 80074fa:	4401      	add	r1, r0
 80074fc:	1858      	adds	r0, r3, r1
 80074fe:	4282      	cmp	r2, r0
 8007500:	6019      	str	r1, [r3, #0]
 8007502:	d1dd      	bne.n	80074c0 <_free_r+0x24>
 8007504:	6810      	ldr	r0, [r2, #0]
 8007506:	6852      	ldr	r2, [r2, #4]
 8007508:	605a      	str	r2, [r3, #4]
 800750a:	4401      	add	r1, r0
 800750c:	6019      	str	r1, [r3, #0]
 800750e:	e7d7      	b.n	80074c0 <_free_r+0x24>
 8007510:	d902      	bls.n	8007518 <_free_r+0x7c>
 8007512:	230c      	movs	r3, #12
 8007514:	602b      	str	r3, [r5, #0]
 8007516:	e7d3      	b.n	80074c0 <_free_r+0x24>
 8007518:	6820      	ldr	r0, [r4, #0]
 800751a:	1821      	adds	r1, r4, r0
 800751c:	428a      	cmp	r2, r1
 800751e:	bf04      	itt	eq
 8007520:	6811      	ldreq	r1, [r2, #0]
 8007522:	6852      	ldreq	r2, [r2, #4]
 8007524:	6062      	str	r2, [r4, #4]
 8007526:	bf04      	itt	eq
 8007528:	1809      	addeq	r1, r1, r0
 800752a:	6021      	streq	r1, [r4, #0]
 800752c:	605c      	str	r4, [r3, #4]
 800752e:	e7c7      	b.n	80074c0 <_free_r+0x24>
 8007530:	bd38      	pop	{r3, r4, r5, pc}
 8007532:	bf00      	nop
 8007534:	200001ec 	.word	0x200001ec

08007538 <_malloc_r>:
 8007538:	b570      	push	{r4, r5, r6, lr}
 800753a:	1ccd      	adds	r5, r1, #3
 800753c:	f025 0503 	bic.w	r5, r5, #3
 8007540:	3508      	adds	r5, #8
 8007542:	2d0c      	cmp	r5, #12
 8007544:	bf38      	it	cc
 8007546:	250c      	movcc	r5, #12
 8007548:	2d00      	cmp	r5, #0
 800754a:	4606      	mov	r6, r0
 800754c:	db01      	blt.n	8007552 <_malloc_r+0x1a>
 800754e:	42a9      	cmp	r1, r5
 8007550:	d903      	bls.n	800755a <_malloc_r+0x22>
 8007552:	230c      	movs	r3, #12
 8007554:	6033      	str	r3, [r6, #0]
 8007556:	2000      	movs	r0, #0
 8007558:	bd70      	pop	{r4, r5, r6, pc}
 800755a:	f000 f857 	bl	800760c <__malloc_lock>
 800755e:	4a21      	ldr	r2, [pc, #132]	; (80075e4 <_malloc_r+0xac>)
 8007560:	6814      	ldr	r4, [r2, #0]
 8007562:	4621      	mov	r1, r4
 8007564:	b991      	cbnz	r1, 800758c <_malloc_r+0x54>
 8007566:	4c20      	ldr	r4, [pc, #128]	; (80075e8 <_malloc_r+0xb0>)
 8007568:	6823      	ldr	r3, [r4, #0]
 800756a:	b91b      	cbnz	r3, 8007574 <_malloc_r+0x3c>
 800756c:	4630      	mov	r0, r6
 800756e:	f000 f83d 	bl	80075ec <_sbrk_r>
 8007572:	6020      	str	r0, [r4, #0]
 8007574:	4629      	mov	r1, r5
 8007576:	4630      	mov	r0, r6
 8007578:	f000 f838 	bl	80075ec <_sbrk_r>
 800757c:	1c43      	adds	r3, r0, #1
 800757e:	d124      	bne.n	80075ca <_malloc_r+0x92>
 8007580:	230c      	movs	r3, #12
 8007582:	6033      	str	r3, [r6, #0]
 8007584:	4630      	mov	r0, r6
 8007586:	f000 f842 	bl	800760e <__malloc_unlock>
 800758a:	e7e4      	b.n	8007556 <_malloc_r+0x1e>
 800758c:	680b      	ldr	r3, [r1, #0]
 800758e:	1b5b      	subs	r3, r3, r5
 8007590:	d418      	bmi.n	80075c4 <_malloc_r+0x8c>
 8007592:	2b0b      	cmp	r3, #11
 8007594:	d90f      	bls.n	80075b6 <_malloc_r+0x7e>
 8007596:	600b      	str	r3, [r1, #0]
 8007598:	50cd      	str	r5, [r1, r3]
 800759a:	18cc      	adds	r4, r1, r3
 800759c:	4630      	mov	r0, r6
 800759e:	f000 f836 	bl	800760e <__malloc_unlock>
 80075a2:	f104 000b 	add.w	r0, r4, #11
 80075a6:	1d23      	adds	r3, r4, #4
 80075a8:	f020 0007 	bic.w	r0, r0, #7
 80075ac:	1ac3      	subs	r3, r0, r3
 80075ae:	d0d3      	beq.n	8007558 <_malloc_r+0x20>
 80075b0:	425a      	negs	r2, r3
 80075b2:	50e2      	str	r2, [r4, r3]
 80075b4:	e7d0      	b.n	8007558 <_malloc_r+0x20>
 80075b6:	428c      	cmp	r4, r1
 80075b8:	684b      	ldr	r3, [r1, #4]
 80075ba:	bf16      	itet	ne
 80075bc:	6063      	strne	r3, [r4, #4]
 80075be:	6013      	streq	r3, [r2, #0]
 80075c0:	460c      	movne	r4, r1
 80075c2:	e7eb      	b.n	800759c <_malloc_r+0x64>
 80075c4:	460c      	mov	r4, r1
 80075c6:	6849      	ldr	r1, [r1, #4]
 80075c8:	e7cc      	b.n	8007564 <_malloc_r+0x2c>
 80075ca:	1cc4      	adds	r4, r0, #3
 80075cc:	f024 0403 	bic.w	r4, r4, #3
 80075d0:	42a0      	cmp	r0, r4
 80075d2:	d005      	beq.n	80075e0 <_malloc_r+0xa8>
 80075d4:	1a21      	subs	r1, r4, r0
 80075d6:	4630      	mov	r0, r6
 80075d8:	f000 f808 	bl	80075ec <_sbrk_r>
 80075dc:	3001      	adds	r0, #1
 80075de:	d0cf      	beq.n	8007580 <_malloc_r+0x48>
 80075e0:	6025      	str	r5, [r4, #0]
 80075e2:	e7db      	b.n	800759c <_malloc_r+0x64>
 80075e4:	200001ec 	.word	0x200001ec
 80075e8:	200001f0 	.word	0x200001f0

080075ec <_sbrk_r>:
 80075ec:	b538      	push	{r3, r4, r5, lr}
 80075ee:	4c06      	ldr	r4, [pc, #24]	; (8007608 <_sbrk_r+0x1c>)
 80075f0:	2300      	movs	r3, #0
 80075f2:	4605      	mov	r5, r0
 80075f4:	4608      	mov	r0, r1
 80075f6:	6023      	str	r3, [r4, #0]
 80075f8:	f7ff f9d8 	bl	80069ac <_sbrk>
 80075fc:	1c43      	adds	r3, r0, #1
 80075fe:	d102      	bne.n	8007606 <_sbrk_r+0x1a>
 8007600:	6823      	ldr	r3, [r4, #0]
 8007602:	b103      	cbz	r3, 8007606 <_sbrk_r+0x1a>
 8007604:	602b      	str	r3, [r5, #0]
 8007606:	bd38      	pop	{r3, r4, r5, pc}
 8007608:	20000b2c 	.word	0x20000b2c

0800760c <__malloc_lock>:
 800760c:	4770      	bx	lr

0800760e <__malloc_unlock>:
 800760e:	4770      	bx	lr

08007610 <_init>:
 8007610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007612:	bf00      	nop
 8007614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007616:	bc08      	pop	{r3}
 8007618:	469e      	mov	lr, r3
 800761a:	4770      	bx	lr

0800761c <_fini>:
 800761c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761e:	bf00      	nop
 8007620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007622:	bc08      	pop	{r3}
 8007624:	469e      	mov	lr, r3
 8007626:	4770      	bx	lr
